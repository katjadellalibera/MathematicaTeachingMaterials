(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 11.3' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[    396667,       7996]
NotebookOptionsPosition[    380981,       7760]
NotebookOutlinePosition[    381348,       7776]
CellTagsIndexPosition[    381305,       7773]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["An introduction to the Wolfram Language for Minervans", "Section",
 CellChangeTimes->{{3.746165283256872*^9, 
  3.746165300207507*^9}},ExpressionUUID->"acfe4bd9-fc63-44fd-80ef-\
e92470f61e5e"],

Cell["\<\
Hello Minervans, 
Minerva just got a license for Mathematica/ the Wolfram Language/ WL (it\
\[CloseCurlyQuote]s the same thing) and this document and others that will \
follow are there to help you in making best use of the language for the \
Minerva curriculum.
You\[CloseCurlyQuote]ll quickly see that it can help you in many classes and \
has capabilities for many topics like Logic, Statistics, Calculus, Machine \
Learning, Graph Theory, Digital Humanities,...
I hope you\[CloseCurlyQuote]ll enjoy it and if you have any questions, feel \
free to email me at Katja.dellalibera@minerva.kgi.edu.\
\>", "Text",
 CellChangeTimes->{{3.74616532044839*^9, 3.746165322267524*^9}, {
  3.7461653927979393`*^9, 3.746165408982664*^9}, {3.746165912263782*^9, 
  3.7461659333643646`*^9}, {3.746166063049778*^9, 3.7461661048876314`*^9}, {
  3.7461661572086573`*^9, 3.746166161316721*^9}, {3.7462185386155663`*^9, 
  3.746218597031021*^9}, {3.7462246070164037`*^9, 3.746224696953026*^9}, {
  3.74622472943783*^9, 3.746224734328998*^9}, {3.7462271925803337`*^9, 
  3.746227337588827*^9}, {3.746228397557969*^9, 3.746228449949851*^9}, {
  3.7462401987054305`*^9, 3.7462402710580363`*^9}, {3.746482526395055*^9, 
  3.746482532484195*^9}},ExpressionUUID->"6c5dc7f1-d768-4338-b040-\
dea4f05d7efd"],

Cell[CellGroupData[{

Cell["The Basics: Syntax and running programs", "Subsection",
 CellChangeTimes->{{3.74616541124662*^9, 3.7461654187066646`*^9}, {
  3.746165458354656*^9, 3.7461654799679213`*^9}, {3.7461656828133793`*^9, 
  3.746165687234481*^9}},ExpressionUUID->"d7d2f2f1-a693-41db-83c5-\
f0e809623ce5"],

Cell["\<\
To run anything in a Mathematica Notebook, just type your input and press \
[SHIFT]+[ENTER] to compute:\
\>", "Text",
 CellChangeTimes->{{3.7461655069016085`*^9, 3.7461656943929873`*^9}, {
  3.746165728134555*^9, 
  3.7461657853244996`*^9}},ExpressionUUID->"c79b1cfd-b3b0-4b0f-8203-\
2fd69fe6846a"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"1412", "+", "851", " "}]], "Input",
 CellChangeTimes->{{3.746165789393385*^9, 3.746165809477404*^9}, {
  3.746334266136294*^9, 3.746334305540327*^9}},
 CellLabel->"In[44]:=",ExpressionUUID->"f053157d-4eac-441d-8482-83a00dc6f4a4"],

Cell[BoxData["2263"], "Output",
 CellChangeTimes->{3.746334306526696*^9},
 CellLabel->"Out[44]=",ExpressionUUID->"580e5bfa-40f5-41d6-bf2d-7ee83ebf076d"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Range", "[", "10", "]"}]], "Input",
 CellChangeTimes->{{3.746165831794017*^9, 3.746165834683233*^9}},
 CellLabel->"In[45]:=",ExpressionUUID->"953b7f8f-927e-4945-9300-687e31fb849c"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "7", ",", "8", 
   ",", "9", ",", "10"}], "}"}]], "Output",
 CellChangeTimes->{3.7463343089124613`*^9},
 CellLabel->"Out[45]=",ExpressionUUID->"e9946f24-a127-4261-b647-e852c4716fec"]
}, Open  ]],

Cell["\<\
We have already come across some important syntax: Built-in functions in the \
Wolfram language start with a capital letter and are applied on some number \
of elements (in this case the integer 10) inside of square brackets [] \
resulting in an output (in this case a list from 1 to 10). Lists can be any \
number and combination of numbers, lists, strings, variables, etc and are \
marked by curly brackets {} \
\>", "Text",
 CellChangeTimes->{{3.7461661702598095`*^9, 3.7461664334749765`*^9}, {
  3.7461669372181253`*^9, 3.7461669479564085`*^9}, {3.7461672146802855`*^9, 
  3.7461672205324497`*^9}, {3.7462123737435465`*^9, 3.7462123867834234`*^9}, {
  3.7462284820570526`*^9, 3.7462284845683393`*^9}, {3.746268697685062*^9, 
  3.746268708095194*^9}},ExpressionUUID->"90d86723-e27f-48a0-bcb7-\
8a9cf24d4111"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"r", "=", 
    RowBox[{"Range", "[", "10", "]"}]}], ";"}], " ", 
  RowBox[{"(*", 
   RowBox[{
    RowBox[{"define", " ", "r"}], ",", " ", 
    RowBox[{"but", " ", 
     RowBox[{"don", "'"}], "t", " ", "print", " ", "it"}]}], 
   "*)"}]}]], "Input",
 CellChangeTimes->{{3.7461664383958197`*^9, 3.746166457041002*^9}, {
  3.746228529849264*^9, 3.7462285432863398`*^9}, {3.746268718440568*^9, 
  3.7462687192513905`*^9}},ExpressionUUID->"ff3a53a6-6f61-4f99-a3ff-\
e82717e97a1d"],

Cell["\<\
If you don\[CloseCurlyQuote]t want your function to print immediately, simply \
put the \[OpenCurlyDoubleQuote];\[CloseCurlyDoubleQuote] behind it. It will \
still evaluate and define the variable r. Comments look like this: (*comment*)\
\>", "Text",
 CellChangeTimes->{{3.7461664601785774`*^9, 3.74616650771348*^9}, {
  3.746228524179415*^9, 
  3.746228592419775*^9}},ExpressionUUID->"d72afefb-e7a7-49b4-8074-\
222e99e3c96d"],

Cell["Display the variable r, you just defined", "CodeText",
 CellChangeTimes->{{3.7462687549489193`*^9, 3.746268770957161*^9}, {
  3.746318516473979*^9, 
  3.7463185170609074`*^9}},ExpressionUUID->"420058f8-4b4d-4c51-81f1-\
17f27f856128"],

Cell[CellGroupData[{

Cell[BoxData["r"], "Input",
 CellChangeTimes->{3.746166509778001*^9},
 CellLabel->"In[15]:=",ExpressionUUID->"8a236c07-d540-45ce-aac4-ed8e77024593"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "7", ",", "8", 
   ",", "9", ",", "10"}], "}"}]], "Output",
 CellChangeTimes->{3.7461672845551877`*^9, 3.746167317897072*^9},
 CellLabel->"Out[15]=",ExpressionUUID->"465d0ff2-d684-4419-ad1b-3eb2787329dc"]
}, Open  ]],

Cell[TextData[{
 "Use ",
 StyleBox["Length ",
  FontWeight->"Bold"],
 "and ",
 StyleBox["%",
  FontWeight->"Bold"],
 " to get the length of the last output"
}], "CodeText",
 CellChangeTimes->{{3.746227401282468*^9, 
  3.746227437809561*^9}},ExpressionUUID->"d7159c24-5212-4f36-a2d6-\
a14b3f0ede1b"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Length", "[", "%", "]"}]], "Input",
 CellChangeTimes->{
  3.7461668817055016`*^9, {3.746167234118544*^9, 3.7461672727694693`*^9}, {
   3.7461673146692343`*^9, 3.7461673153883095`*^9}, {3.746167583585513*^9, 
   3.746167588321292*^9}},
 CellLabel->"In[17]:=",ExpressionUUID->"c5b2cb06-b814-4dcc-ab32-3d613f68cf89"],

Cell[BoxData["10"], "Output",
 CellChangeTimes->{
  3.746166882587214*^9, {3.7461672431029005`*^9, 3.7461672911578503`*^9}, 
   3.7461673240745583`*^9, 3.7461675888837905`*^9},
 CellLabel->"Out[17]=",ExpressionUUID->"95adb519-58f7-44c0-adb0-4a3ea1b5f406"]
}, Open  ]],

Cell["\<\
To see r, simply type it in an input field and evaluate it. The symbol % will \
also return the last output, but generally it is better to define a variable. \
For those, the convention is using lowercase letters and words (Upper-case is \
reserved for built-in functions), and distinguishing multiple words using \
camel case (randomVariable, anotherRandomVariable,...)\
\>", "Text",
 CellChangeTimes->{{3.746166513311513*^9, 3.7461665444094095`*^9}, {
  3.7461668849308834`*^9, 3.7461669208049593`*^9}, {3.7461670630067835`*^9, 
  3.7461671635339823`*^9}, {3.746268796068022*^9, 
  3.746268823405927*^9}},ExpressionUUID->"087d33d1-9fb7-4535-9f12-\
b4a8c04562a6"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Getting Started", "Subsection",
 CellChangeTimes->{{3.746169543417392*^9, 
  3.746169562631672*^9}},ExpressionUUID->"e8ba0604-9156-4d60-b3a4-\
6fa1abf46e2f"],

Cell["\<\
The notebooks are designed to help you enter Wolfram Language input:\
\>", "Text",
 CellChangeTimes->{{3.7461671864008837`*^9, 3.7461671902314653`*^9}, {
  3.746167338151737*^9, 3.7461673795300426`*^9}, {3.7461674205399313`*^9, 
  3.746167423409293*^9}},ExpressionUUID->"01fdd64d-df9d-44a3-bbf4-\
beaeebd2291e"],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1: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
cv6hBx7E7+b/uAWGFa/Xe76kJCMtPft4Zk1NDd6JKkSIkB+rVJSXnzp5qrmp
yXop5XDKsMHX3nHrbWWlZRerFnhaFi2VlZUYWgF+C/Lze3W/+tabbm7XdtGD
lJaWPv7oYz96vNVeNXWVnCvJOp6Zm5NTV1cXCATE8yAhQn70At382b8+/f/+
7/+bN3eu9WpOTs6wa4f86u5f1NfVxdfjcDi3btl68sRJjBvnzp37yU9+8h+E
wOnw4cP37NkDbFnD2wLA29uuJLxF/8MFOG1a6rHMjOO1NTVX1OKJECFXuAAC
/O35F3p2675owQLrVfUL/xUVQMC6hIWDBw70uKrb1EmTMd6WlJT853/+5//8
z/+89tpr77777siRIx966CE4/d///d9du3ZdaXgLDnS73WXnS7MzM9UnYjU1
Ab/gtEKEXFli4u3ChdyrzNKr9j57uKmpyef3k5+8+2znTsDbGVOnoW/1ow9J
Ad726NGjpaUFIoHTBoPBUaNG/fu///sTTzwBMRy8PV/62CM/QryVg0HgtOnH
gNNmANJesW8uCBFyhQvC214qv+XgbX5e3h9++7s/P/knwMwL2sdOF85f8Ltf
/3pQ/2tuHn7jC889n5GeAUA6+sPRd952+4A+fW+87vrf/PJXzz79NEAKibe4
rN27dwPe3njjjZCLy28f+yHzW4lehoUxxePxVJSVZWYcz83Jqa6q8muD1Pdo
oRAhQr5HwXi7mIe32VlZA/r2vfPW2xoaGiDl6tWr+/To+eC9923cuGn2zJlD
Bw3evm0boMq7b4+86fobAG9vv/mWhx986LVXR4TDYS7erly5EvD2N7/5DZ/f
/mDxVv2IVmNjUeFZvMdAkiTwQEZ6WnZmZk11NXB7gbRChFzhEn89AfD2mr79
gLsC3sqyPOKVV+B0586daNGgsaERfc8ZTt96483eV/eYNmUqehaG1xO6deuW
m5tbUQEsr2zfvn3Dhw//6U9/OnPmTDu8/SGu3yKwzUhPP3XyJMCs1+uF+mYd
z8zJzq4oLxecVogQIUgSx1sA0gXzF0DK3/36N9u2bXM4HCSM6Hg7eQrzvOwn
P/lJnz59BgwY0K9fv//7v//7j//4j8ceewz9D1bu+u3jP7T1W/XTsnV1mRkZ
6paD48eLCguzjh8HTltdVS12eQkRIoSUxPH2gvaB6I8++PDG664HnLzjttsW
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
lyw/dOgwAGb8LACngUDAisyKoqxZuw46O/q32nGy19bWjR49fvWadV999bXT
6fqudbgYAYD1+wPof3WBJfUNDWPGjT946PA/zQDj/bIOd0DxI74URACoBXyM
4mUF8TGD7+kTQyK9kUwOqXj7jIa38+Zr1FR/0oHzBkMhSTFK0S55AsHmdken
x+c3SpeU8OYt27r97KrxEyYFFcWvpgzXNjYDN76m/zVHjqU3tbY1NLcWFJ79
4IOPenS7+onH/wRZTLz9EPA2YlqrhJwePxThCUjQ47DNYMY3e/cDYr/66ghf
IOgPyoRVqNaET2SysthLinlKOIc41d2CXIQraCRTaFdj3ypsoTJZqKnEvHGM
DTrNtupBziRvt1lTP7aZuKFkdRocfh1vqdrpLcTMK1v8RlXfjG9xBXafKENw
ai4jwHFK/s7MkkaXH+5X+vmGNQbjhfgNRwvyq9sMJQS/NV/9471HA78h8q0W
/DJIpP4K2w8GmHnsWPqUqdN3fvp5bu6J7OxcwMAvdn0Zf5oPYLthw+bm5mar
ttNn8tLSM2RZjpMdlB86lDJl6owugT0ZAoVCHauqqtCpx+M9ePBwRUXlP80A
DW+19YSAbPZK1COCCo0b9FXcbTFumLkMvH36WYS3gIF+BEpGgrPF51577fX3
R33Y1NaOVKVnZb/yyohbbr71wQceWrBoSV1TM6D02vWbHv7jI72u7gkk9rUR
r48ZO94dCMKl/n36Ad6eOJOnzt+D6k628qoaYLzDhl4HaKxEoyNGAN5eBSCs
421QaXW41qzf+NhjT0ARL7z40r5Dh52+ABjscHtWrlrzpz89BXh7+213jHj1
tX+89TZguFZNBeOtH8MvC1MYXRXKV0Z9/RhRLe7VfaL7WT+lfBskcRKXS0TS
98hPXqWUh8gbSt5EI4vil827Q6b3ozSyQqJuo8On4m0gqNdUViythW056jpt
0HgmS9qj/RbVtW86VqgSWkRuNaRFeLs5vTi/rr22w/tZ1jl0VWe/KQV7TpW7
A8j4EP38K8yu3GqnMLuBsbausdnjk8z3grVkALkNzsCVg7fA7s6fLx353gdH
jx6LRmNIgKMyk2ugghADEIpAGNJ0OhyTp06vqq6GS8zSAUAuEGZ0jP57INYZ
CoVxmq9375k5a47L5cbADpGSFJSCQRLq8b8sDIVCwWAQWYh4NcRoOkMoGSqC
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
z/fp2XtAv/6DBw4aNHDQ4IGDYa49cdIUmOMD3vbt3fe2W25rqG9obm0FJBzQ
t/8v7/7lY48+dstNt/S6uteSpcvlUAT617nSsuuvuwHQ8q47fv7wHx9xen3N
La2g85r+15zR8NZinsp49+zd36dX74H9r1m9Zp0cjkKWF1/4m/aE66bf/ua3
Q68d2qtnb6C4AVmGikCu4nMlt958KwwBd91x129+/ZuS0vIlS5apBg+69hd3
/+Luu+4GeIerM2fP8UpBSA94CyS8X+8+w64dCrg9sP+Avr36/O63vz9w8FAg
qMiEHzSGHEPu0iyMMc5UTLczLo1hJytkHaPMrSGSRalbQNxNxgZdoVkWdZdj
+qmpxzSMZwCnwSiUB3gNiVISM5VTFpo2Ey4yfWL+RqmUPA9gbfj9GtZI8b0a
IckW/LzMr+Et2fz4ncW+s+OOg46B4y1dtvIf/3j7rbfeIcOOnZ9HorHzpWUw
+x43bkJ7Zyd0ltr6hoULFwMfvv/e+1966dWt27b7gzJSDnoOHj7ywvN/e+D+
B197/Y2m1vZOp/vtd94dOfK9ylrtWzfYMKIHAWeeOm3GQw88tHLVmmA4Aijn
cLlXrFj9wvMvAnP++9/f/OrrbwKygvtjMBT5dt/+55978aEH//jKy6+WllUA
K07LOD5q1IdArR955DGoyO5v9mC0rKmte/PNt1CN3n33/TmfzAOFbQ5nJGqF
CAsQEXjL4BWZmLkXdMYYE2O9I1wbTIUEsllh04qQTHb2Kn2gROxs0y23ICFR
TWNIQhCK1nNIvzHIbBbKqopxrWXcS1IFgbdCki2Y3/qVKMk3rA3Y2kG4aciO
JoXCMDEPaEEyftWnYGpXigTRqbr1K6Yuq0Yibo+3pbXV4/OHo1FtodUI+qU2
rz8gR9RlXknPG9XzGr9qJ9V/o8BdW9vafQFJX4NVO2bU7fO1QaTKUWNkZREU
uH3+tvYOb0DSPRCJBZQQAHVHR6dP/fwXgWNh9VJA1oISVi0haCEPu2LYS2Qf
t3MmCRokEDF5dUpsvRf02MfUlAtfXBs4WM1wckTgDcO44wU3WAHcDuStTrMU
pCEzjeQkINMKOU5ASsR6gpBkC/4+GOa3GHyM/h5jOohBPGxRF52qLwsUnE05
mnbkaLoRtOPUdCKGiTQSs2m4gdaWSscT4eixDI9fpqCDtTmGkc1SI373NL1k
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
ocH6uDwOMLLISVfNzmlyl05j/cAgvP1bclyiblaH3V/NdbU1Pn5iynvEnIW8
ShcaMwcU46puJzl1Yp+ucmYQ1tshvp8gJNliXb+1tk87viebHw2jXo5gkI1I
E69LUl1M+0fn1idBXFrIN5UcDmwmqgTYxjhFsM+w7L88YKJ3nE1onBdXFboI
3od22U81xnUah1JasJTz5E6mnGY7rNCLIUwLib8nhLNhm7hk2SdMWGsxw7o8
a1bBcEIMrzlzV0VknksV8f0EIckXFW/bvJb/h24hrvypLruzi+mqZpu3bD21
S8w/pnhIjNTGPPumIYj3WRIGcsPmNlHumiSNDF0bzDWD2gFrz/SoSGpazVsv
7dJp1PSZdFqXNWU16Peaobs2AxnThMjbJOOBiWhC7CODKIvJerIIngLQG6ct
HJg0iTlgNumR1VfEfjAhyRdzPYHYD8bQJHZvPE0/jMRRit/aPMFRIkyMHZFm
9ycwTFXmdzTOf5SwsdyIsWW/nCfa3NVmI5d1QwVhJO0TLvGzdxH5qAtDGXeD
WTwmHMdpVqRinEa5i+dP662hS4yS5drdUwyJVsupe6er4k+mjGlRVOY7nC2O
jBfrt0KSLeb3E2zWb2V6KcyOEXHpFgkpvAc9Ubt//8ftcVgbt9dbwDAqhyMa
mHT1+kM84+lccTekxXn2Zwf7Vpdyrlrh14ZI2xXNvUd22W1Bz96BzO1m4ZF5
P45m3Vw7rQXhW8ydSdmNDlbb4jUDwW+FJF+M/QkO8/+X2bd8PnuxLKtaH15j
JolTSkoor7C4+HxZUEVFqkOxnShywfpGLdNbrQhTcPbc4SPHikvLFMZULvzG
pWfcvs8AEYWohm12RM7qPTs/K3GLJm1geanhNEtKHqPmDQGcvAnEkFWwthDr
SGd3B+PXlH9fIsy2MboV8e4Fo0es3wpJtlj/H7odFCTSy4jOrobS8oqTp07X
NzWTnQJ1mWNpGcOGXvfzu+4uq6zuqiPHgko4GDaXO/xy6PSZvFOnz5w+nXf6
9JkzZ/Iqqmo6XB5IhtJEYhdef/2Nq6/qPnrMODhmOqwdOJATf04PjVt9FhN4
JaoZ47qUO07JFnrMLbHLSC4hjA90nDEobktgMJajvAtuHC8vc7+4rc6aPU6J
1rqI98uEJFswv+V+H4xsrrY9iAe2cBCNxl5++dUBffsvWbw0ZOnImVk5N95w
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
Ez954aebNn19ae8yGetu/vqDNVFHfJsPnJPZ+u2c2T0vvvTr0bFxyczj1Un5
7K+j6Hw/2DQV38ow9YknvzN3ztwVH165b9/TR468tnfv9zqmTZekKvlWqpAZ
9n5v38wZM7f37fzxT17omNbxta9tDtPlC+Ktt2+8N8mmo7smURnNlq2CZMSo
TcyAvNeEplBB3/TqXmwRzNsEeJ5+gDRL8i1aoGii2nWpOy/w/gRGu6H+f9kZ
s/+WolBfmOFm1tERXL8FX/4vkhXfJunPe0X6LN+I4/iFF37WcUHHh666enz8
rBS1YcNdkm83bXpA76TN1xOy92WvhU7kLKz49v640QiieOW1q2ZMn5HuN4iS
IGo8++z/SFIt+DYrOFgq9S7pve661Q/+6793Tus4cOBHxMfMW/FPE/7UlAtH
Ou1MqAUwFZrm3il3kTa4JOba4OO68yFhRIa+2Li52GbdslUw7Fu8JZeG+Hs1
jHbDvC+rE+/LyPAAZgvsuwG4lSTJTTfdLFluzZp1u/fs3f2dIr148FCYNHK+
XbJ4ydCfhqq14FvfemTL1r5XXn21dOJP+/btl8HnR/7po9VqVYas337kUcmN
kgn7+w+/fuyNIEyG1f7bdD9Yo6FVa+0ynL7vvk0dF0xfc8vakXJFhLGU1jl9
xq5dD73++rFf/PJXn/nMGhnNqvWEVEJ1Mrjzzi9c1DN3+bIrL1t0+dDJt8mP
d5lqJlZlPccN967rw2ZaSDo6vyJuS5lTEJH6tJBl66Q0IJM49l/RU/P51BrJ
IZ0QOMUDUNnmH+ERMce3jLZDrd9WJkQa+OVJyL9xIwjTJPLT7CDIrucHaWdW
+QN1RajiMmXx7S1dM7u6u7pnd/fkqad79v33b04aGd92defx7anTIzd+6tOS
Py/5h0uWL10+b+68nlk9e/Y+JaL0A2Klt4aWLl0u5cyfO+/KK99fPnP25Kk/
93T3XNRz0cuvvpYu2EZWkgZE2a5amaers2t7364wip/cvUfml1cWLli4YP4l
N9xwozy9Jotvc+Nl3HvguedndHR2dnR+8Z4viywMFrpqafWBf8LsIGzAPMZ1
Eb4uoilB3RKUCgFVRISi3M8CiDJyKJNIw5AE1x7flaI6bus7lU0/fIE1Tume
I4q+NEWYFypXq+5n1w5MZHYtarqU6orYgJSBvW45OcbvyxjthebbqohzOlV9
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
BoPBYDAYDAaDwWD48X9VzQia
    "], {{0, 207}, {464, 0}}, {0, 255},
    ColorFunction->RGBColor],
   BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
   Selectable->False],
  DefaultBaseStyle->"ImageGraphics",
  ImageSize->{326., Automatic},
  ImageSizeRaw->{464, 207},
  PlotRange->{{0, 464}, {0, 207}}]], "Input",ExpressionUUID->"4b16c51b-1b7a-\
44dc-b7a1-4fdf2f65643d"],

Cell["\<\
If you start typing a function (or even just a word you think is related to \
what you are trying to do), it will automatically list functions starting \
with what you type. 
To learn more about any of them, simply click on the little i, next to them \
to open the documentation. It includes many useful examples, how to use them \
and related  functions, tutorials, or guides.
Strong Suggestion: DO NOT UNDERESTIMATE THE POWER OF THIS!!!
From my experience, 99% of the time, you can figure out how to do something \
just by typing a vaguely related word, and smartly clicking through the \
documentation. The Wolfram Language is a Knowledge Based Language. Over 5000 \
functions are built-in, so you don\[CloseCurlyQuote]t need to deal with \
importing libraries, each with their designs and conventions, etc.. Once you \
got the syntax down and can read the documentation, most of the pages will \
likely link you to what you need.\
\>", "Text",
 CellChangeTimes->{{3.74616742823767*^9, 3.7461674393232946`*^9}, {
  3.746167472924225*^9, 3.7461675524592495`*^9}, {3.746167599182398*^9, 
  3.746167618428346*^9}, {3.746167816115323*^9, 3.7461680955455923`*^9}, {
  3.746168408277485*^9, 3.7461684801283736`*^9}, {3.7461685453098*^9, 
  3.7461686163128834`*^9}, {3.746168900826499*^9, 3.7461689193252745`*^9}, {
  3.7461696748653235`*^9, 3.746169684536824*^9}, {3.7462274775512295`*^9, 
  3.7462274783182383`*^9}},ExpressionUUID->"ee4e7589-bbd5-48ad-8e3c-\
568e73968146"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Some more notes on Notebooks:", "Subsection",
 CellChangeTimes->{{3.746213578255331*^9, 3.7462135842360716`*^9}, {
  3.7462152908703656`*^9, 
  3.7462152984831142`*^9}},ExpressionUUID->"7dd81925-af04-407d-a852-\
172d7989a036"],

Cell[TextData[{
 "Mathematica notebooks are the original notebook environment. Jupyter \
notebooks were designed to be like Mathematica notebooks for Python, which \
also means you are going to find a lot of similarities. If you want to change \
the type of cell, open the drop-down menu [Format]",
 Cell[BoxData[
  FormBox[
   RowBox[{"\[Rule]", " "}], TraditionalForm]],
  FormatType->"TraditionalForm",ExpressionUUID->
  "fb32b694-ac58-4ea8-a514-b7150f845d26"],
 "[Style] to see all kinds of cells you can have and their shortcuts."
}], "Text",
 CellChangeTimes->{{3.7462135869765124`*^9, 3.7462137582838154`*^9}, {
  3.7462137956571302`*^9, 3.7462138295942707`*^9}, {3.746215064680827*^9, 
  3.7462152842045975`*^9}, {3.7462275270419827`*^9, 3.7462275276433363`*^9}, {
  3.7462278953585787`*^9, 3.746227901048441*^9}, {3.7462279562752676`*^9, 
  3.74622795760459*^9}, {3.746227991211417*^9, 
  3.746227991972698*^9}},ExpressionUUID->"5bdda456-e083-4629-9028-\
09eec4fdbb04"],

Cell[TextData[{
 "To the right, you can see layers of Square brackets, that you can double \
click on, to minimize a section, indicated by a section heading (a type of \
cell).\nYou don\[CloseCurlyQuote]t use laTex for formatting, although there \
are ways to translate from one to the other. If you want to write Math in \
Mathematica, they have their own system, which will be it\[CloseCurlyQuote]s \
own notebook. If you can\[CloseCurlyQuote]t wait to get started, check out \
the Fast Introduction for Math Students ",
 ButtonBox["here",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["http://www.wolfram.com/language/fast-introduction-for-math-students/\
en/"], None},
  ButtonNote->
   "http://www.wolfram.com/language/fast-introduction-for-math-students/en/"],
 "."
}], "Text",
 CellChangeTimes->{{3.7462279932744045`*^9, 3.7462279992430277`*^9}, {
  3.7462689472687464`*^9, 3.7462690400965357`*^9}, {3.7462690796158223`*^9, 
  3.7462691213223352`*^9}, {3.746269178797632*^9, 3.746269223459261*^9}, {
  3.7463177989683275`*^9, 3.7463178423907833`*^9}, {3.746482780782243*^9, 
  3.746482785295355*^9}},ExpressionUUID->"0ced5bda-6f97-48bf-bdd9-\
98fc8d150891"],

Cell["\<\
If you mark a cell or group of cells and press [delete], they will be \
deleted, so be careful with that.\
\>", "Text",
 CellChangeTimes->{{3.746227959359594*^9, 3.74622796545548*^9}, {
  3.746317857228776*^9, 
  3.746317890482188*^9}},ExpressionUUID->"68d620ff-96aa-4b0b-b6d2-\
b7d97e00b67c"],

Cell["\<\
To open a new cell, simply press the down-arrow and start typing. The default \
will be a code cell.\
\>", "Text",
 CellChangeTimes->{{3.7462279025175295`*^9, 3.7462279489503326`*^9}, 
   3.7464828640236993`*^9},ExpressionUUID->"d32750fb-133c-4fa7-a9a6-\
d91c217b0a36"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Why the Wolfram Language works especially well for Math", "Subsection",
 CellChangeTimes->{{3.7463335238686075`*^9, 3.74633355138896*^9}, {
  3.746334908941656*^9, 3.746334911064555*^9}, {3.7464246916905127`*^9, 
  3.746424695773122*^9}},ExpressionUUID->"ee891427-3bf7-402f-bbaa-\
85766c3d1e8c"],

Cell["\<\
In Mathematics, we have a lot of terms we don\[CloseCurlyQuote]t know the \
values of. The Wolfram language can deal with symbolic input:\
\>", "Text",
 CellChangeTimes->{{3.746333558141537*^9, 
  3.746333705366846*^9}},ExpressionUUID->"fb6482a8-d7e6-476a-b6dd-\
58a814c7ee94"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"y", "+", "x", "+", "z"}]], "Input",
 CellChangeTimes->{{3.746333694754755*^9, 3.746333697222983*^9}},
 CellLabel->"In[39]:=",ExpressionUUID->"fc9f35d1-225f-4929-bc7d-6be98fbfdaf5"],

Cell[BoxData[
 RowBox[{"x", "+", "y", "+", "z"}]], "Output",
 CellChangeTimes->{3.7463336986405344`*^9},
 CellLabel->"Out[39]=",ExpressionUUID->"494a6cf7-0e17-4429-baaf-714b220e53d0"]
}, Open  ]],

Cell["\<\
None of these variables are defined, but there won\[CloseCurlyQuote]t be an \
error, they are simply read as symbolic input. If I define one of them\
\>", "Text",
 CellChangeTimes->{{3.7463337076162586`*^9, 
  3.746333777940565*^9}},ExpressionUUID->"191ba1e7-39a9-4cef-82c2-\
015584ca7b1b"],

Cell[BoxData[
 RowBox[{
  RowBox[{"y", "=", "2"}], ";"}]], "Input",
 CellChangeTimes->{{3.7463337799872246`*^9, 3.746333793041437*^9}},
 CellLabel->"In[41]:=",ExpressionUUID->"e1cffe7b-7164-4a06-bcc0-4e39bc9070dd"],

Cell["the function will now plug in the value of y defined.", "Text",
 CellChangeTimes->{{3.7463338101364975`*^9, 3.7463338795969396`*^9}, {
  3.7463339121749167`*^9, 
  3.7463339383935604`*^9}},ExpressionUUID->"cf21eba0-c639-4245-baf7-\
0e485943e48c"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"y", "+", "x", "+", "z"}]], "Input",
 CellChangeTimes->{{3.746333801424699*^9, 3.7463338049478464`*^9}},
 CellLabel->"In[42]:=",ExpressionUUID->"d16bb627-762f-45ad-b4c5-8a080af534c2"],

Cell[BoxData[
 RowBox[{"2", "+", "x", "+", "z"}]], "Output",
 CellChangeTimes->{3.7463338061266994`*^9},
 CellLabel->"Out[42]=",ExpressionUUID->"ffea9302-2576-42e7-b31a-cdfb5ed86b5f"]
}, Open  ]],

Cell[TextData[{
 "Use ",
 StyleBox["ClearAll ",
  FontWeight->"Bold"],
 "to Clear the variable y:"
}], "CodeText",
 CellChangeTimes->{{3.7463339498542976`*^9, 3.746333971264619*^9}, {
  3.7463340383798714`*^9, 
  3.7463340447613726`*^9}},ExpressionUUID->"dad43f90-b9b3-48a6-ba17-\
4d89f90969dd"],

Cell[BoxData[
 RowBox[{"ClearAll", "[", "y", "]"}]], "Input",
 CellChangeTimes->{{3.746334047124674*^9, 3.7463340526287947`*^9}},
 CellLabel->"In[43]:=",ExpressionUUID->"19b2f6b2-f046-4a20-afdf-7ddd7e78e827"],

Cell["\<\
It\[CloseCurlyQuote]s important to keep track of which variables you already \
defined and clear them if necessary, it can lead to weird bugs. Generally, if \
they turn black, they are already defined.
Another thing you can define are functions, with various in- and outputs.\
\>", "Text",
 CellChangeTimes->{{3.74633405697493*^9, 3.7463340812717505`*^9}, {
  3.746334234947704*^9, 3.746334253308813*^9}, {3.746334692757934*^9, 
  3.746334764068118*^9}},ExpressionUUID->"44785c11-4eb8-425e-a91f-\
d874f014caf6"],

Cell[TextData[{
 "Define f as a function that takes x as an input and outputs ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SuperscriptBox["x", "2"], "+", "3"}], TraditionalForm]],
  FormatType->"TraditionalForm",ExpressionUUID->
  "b76f1a1d-a60f-4d86-b380-997c5a0b91e4"],
 "."
}], "CodeText",
 CellChangeTimes->{{3.746334844044678*^9, 3.746334899484087*^9}, {
  3.746424718410565*^9, 
  3.7464247354062963`*^9}},ExpressionUUID->"ea0f07e2-a5cc-45e4-99c0-\
4ac777569316"],

Cell[BoxData[
 RowBox[{
  RowBox[{"f", "[", "x_", "]"}], ":=", " ", 
  RowBox[{
   RowBox[{"x", "^", "2"}], " ", "+", "3"}]}]], "Input",
 CellChangeTimes->{{3.7463346820459576`*^9, 3.746334686133972*^9}, {
  3.746334767695629*^9, 3.746334777504413*^9}, {3.746334828290803*^9, 
  3.7463348328840237`*^9}},
 CellLabel->"In[35]:=",ExpressionUUID->"f3ebe83d-02f6-4c62-a48f-0370c3bddce1"],

Cell["\<\
So what can you do with your function?
Maybe you want to evaluate it at a certain point:\
\>", "Text",
 CellChangeTimes->{{3.746424765648862*^9, 
  3.7464248102406225`*^9}},ExpressionUUID->"a9d0c8f7-e4b9-48d2-82f6-\
58e9f9966f47"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"f", "[", "2", "]"}]], "Input",
 CellChangeTimes->{{3.7464248129976816`*^9, 3.7464248152402773`*^9}},
 CellLabel->"In[36]:=",ExpressionUUID->"18355ec9-7050-4c10-9bda-6474f400368e"],

Cell[BoxData["7"], "Output",
 CellChangeTimes->{3.7464248162517586`*^9, 3.7464248529433937`*^9},
 CellLabel->"Out[36]=",ExpressionUUID->"6075508e-b93f-425d-aff7-1076a832d526"]
}, Open  ]],

Cell["Or you want to take the derivative?", "Text",
 CellChangeTimes->{{3.7464248220564795`*^9, 
  3.7464248346011305`*^9}},ExpressionUUID->"68289f76-623d-48f3-8744-\
eb7f830bf16a"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"f", "'"}], "[", "x", "]"}]], "Input",
 CellChangeTimes->{{3.74642483636835*^9, 3.7464248968078074`*^9}},
 CellLabel->"In[39]:=",ExpressionUUID->"14cbc9a4-1be1-4a45-b548-270fbdc7be66"],

Cell[BoxData[
 RowBox[{"2", " ", "x"}]], "Output",
 CellChangeTimes->{{3.7464248411414566`*^9, 3.7464248628113527`*^9}, 
   3.7464248975194173`*^9},
 CellLabel->"Out[39]=",ExpressionUUID->"47559d9a-66ec-4b6a-bd7f-cd71b3ecad58"]
}, Open  ]],

Cell[TextData[{
 "You can also make a ",
 StyleBox["Table",
  FontWeight->"Bold"],
 " of the values f takes as x increases up to a value (10 in this case)"
}], "Text",
 CellChangeTimes->{{3.7464249848563223`*^9, 3.7464250301108713`*^9}, {
  3.746425060546233*^9, 3.746425064703053*^9}, {3.7464258009411736`*^9, 
  3.7464258351981106`*^9}},ExpressionUUID->"9807928a-3226-4da8-ac6c-\
d805f476d64c"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Table", "[", 
  RowBox[{
   RowBox[{"f", "[", "x", "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", "10"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.7464258167713437`*^9, 3.7464258273224106`*^9}},
 CellLabel->"In[40]:=",ExpressionUUID->"90f39cc3-3b41-4143-adce-115eb671a2b6"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "4", ",", "7", ",", "12", ",", "19", ",", "28", ",", "39", ",", "52", ",", 
   "67", ",", "84", ",", "103"}], "}"}]], "Output",
 CellChangeTimes->{3.7464258277523584`*^9},
 CellLabel->"Out[40]=",ExpressionUUID->"e7f10fbf-b4bc-4165-8467-51d0819baf9d"]
}, Open  ]],

Cell["\<\
You might recognize the output of the function as a list, which is a data \
structure you will encounter rather frequently and is worth exploring a bit \
more.\
\>", "Text",
 CellChangeTimes->{{3.746426039844849*^9, 3.7464260405037746`*^9}, {
  3.7464260726169205`*^9, 
  3.746426130181055*^9}},ExpressionUUID->"25a10c99-a87f-438b-b423-\
e3d9961e0603"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Lists:", "Subsection",
 CellChangeTimes->{{3.74616980573497*^9, 3.7461698576862383`*^9}, {
  3.746334914824934*^9, 3.7463349168001842`*^9}, {3.7464276878345613`*^9, 
  3.7464276895455027`*^9}},ExpressionUUID->"28b614ea-5feb-403b-8447-\
0d9e9e3f3b84"],

Cell[TextData[{
 StyleBox["Table",
  FontWeight->"Bold"],
 " is a frequently used function to generate lists or Lists of lists."
}], "Text",
 CellChangeTimes->{{3.7461698615910378`*^9, 3.746169929420359*^9}, {
  3.7462275408935738`*^9, 3.7462275531973405`*^9}, {3.746269290067151*^9, 
  3.7462692945272255`*^9}, {3.7463328494273214`*^9, 3.7463328503211174`*^9}, {
  3.746333494002779*^9, 3.7463335079490194`*^9}, {3.746426142435177*^9, 
  3.7464261649444075`*^9}, {3.7464262112817993`*^9, 
  3.7464262174380217`*^9}},ExpressionUUID->"646a22de-1f33-46b3-883f-\
7fa695e67715"],

Cell[TextData[{
 "Use the function ",
 StyleBox["Table",
  FontWeight->"Bold"],
 " to generate a list of lists of x*y as x and y increase from 1 to 5:"
}], "CodeText",
 CellChangeTimes->{{3.7461700310942273`*^9, 3.746170071343392*^9}, {
  3.746333484112772*^9, 3.7463334882918897`*^9}, {3.746426186573472*^9, 
  3.746426203167906*^9}, {3.7464262704945693`*^9, 3.746426316150364*^9}, {
  3.746426530276174*^9, 
  3.7464265412545104`*^9}},ExpressionUUID->"9e0a8177-68f6-49e3-bf27-\
d8920ea69c4a"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Table", "[", 
  RowBox[{
   RowBox[{"x", "*", "y"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", "5"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"y", ",", "5"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.7461699342263346`*^9, 3.7461699925350204`*^9}, {
   3.7463333498728795`*^9, 3.7463333593596406`*^9}, {3.746426176374236*^9, 
   3.7464261983522167`*^9}, {3.7464262512451987`*^9, 3.746426262506914*^9}, 
   3.7464263086914797`*^9, {3.746426484683757*^9, 3.746426498114948*^9}, {
   3.74642654522332*^9, 3.7464265543788767`*^9}, {3.746426623918457*^9, 
   3.7464266266354914`*^9}},
 CellLabel->"In[92]:=",ExpressionUUID->"440e88a1-3027-4b78-a3b8-e21016f35da8"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "3", ",", "4", ",", "5"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "4", ",", "6", ",", "8", ",", "10"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3", ",", "6", ",", "9", ",", "12", ",", "15"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"4", ",", "8", ",", "12", ",", "16", ",", "20"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"5", ",", "10", ",", "15", ",", "20", ",", "25"}], "}"}]}], 
  "}"}]], "Output",
 CellChangeTimes->{
  3.7461699936665845`*^9, {3.7464261814211254`*^9, 3.7464262055246887`*^9}, 
   3.7464262637755365`*^9, 3.7464263105359497`*^9, {3.746426489211706*^9, 
   3.7464264987787647`*^9}, 3.746426619796487*^9, 3.7464340616418285`*^9},
 CellLabel->"Out[92]=",ExpressionUUID->"85e8f871-c94e-4c1f-bea6-b32b2d546fac"]
}, Open  ]],

Cell["\<\
Ough, it is already quite hard to see what\[CloseCurlyQuote]s going on, since \
our array has 2 layers.
Lucky for us, an array with two layers like this can be displayed using Grid[]\
\>", "Text",
 CellChangeTimes->{{3.7464263221064863`*^9, 3.7464263478516865`*^9}, {
  3.7464264239484615`*^9, 3.746426468382886*^9}, {3.746426505525321*^9, 
  3.746426515311519*^9}, {3.7464266523981004`*^9, 3.746426674200034*^9}, {
  3.7466614419418755`*^9, 
  3.74666144216827*^9}},ExpressionUUID->"98b622a7-7ed4-482c-a6ca-\
c06f04b1bddf"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Grid", "[", 
  RowBox[{"Table", "[", 
   RowBox[{
    RowBox[{"x", "*", "y"}], ",", 
    RowBox[{"{", 
     RowBox[{"x", ",", "5"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"y", ",", "5"}], "}"}]}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.7464262264420705`*^9, 3.7464262319062843`*^9}, {
   3.746426377767809*^9, 3.746426388548596*^9}, 3.746426561561005*^9, {
   3.7464266309613066`*^9, 3.7464266440074997`*^9}},
 CellLabel->"In[52]:=",ExpressionUUID->"ccc9c3f2-f4cb-4cb2-a17b-9b14d9d3bf3d"],

Cell[BoxData[
 TagBox[GridBox[{
    {"1", "2", "3", "4", "5"},
    {"2", "4", "6", "8", "10"},
    {"3", "6", "9", "12", "15"},
    {"4", "8", "12", "16", "20"},
    {"5", "10", "15", "20", "25"}
   },
   AutoDelete->False,
   GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
  "Grid"]], "Output",
 CellChangeTimes->{3.7464265184095726`*^9, 3.7464266125986705`*^9, 
  3.746426644518031*^9},
 CellLabel->"Out[52]=",ExpressionUUID->"4456d63d-b324-47cd-8c3b-65fff203a6ee"]
}, Open  ]],

Cell["\<\
We are already using three functions stacked into each other and as you get \
more practice, you\[CloseCurlyQuote]ll see that a lot of Wolfram Language \
code will be functions wrapping one another.
If it gets really hard to see, you can put functions on new lines like this:\
\>", "Text",
 CellChangeTimes->{{3.746427141159244*^9, 
  3.7464272639931297`*^9}},ExpressionUUID->"00538afd-a0a2-4875-aceb-\
6065d6393de9"],

Cell[BoxData[
 RowBox[{
  RowBox[{"Grid", "[", "\[IndentingNewLine]", 
   RowBox[{"Table", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"x", "*", "y"}], ",", "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{"x", ",", "5"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"y", ",", "5"}], "}"}]}], "]"}], "\[IndentingNewLine]", "]"}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.7464272683065686`*^9, 3.7464272880029945`*^9}, {
  3.7464273770966187`*^9, 3.746427385439575*^9}, {3.7464274447143745`*^9, 
  3.746427455797208*^9}},ExpressionUUID->"f7d56da2-3d17-466a-af8c-\
9fc11eeedef4"],

Cell["\<\
Let\[CloseCurlyQuote]s look at a few more things we can do with lists and \
learn a few functions in the process:\
\>", "Text",
 CellChangeTimes->{{3.7464274585088873`*^9, 
  3.7464275038195796`*^9}},ExpressionUUID->"9a5d4bf9-fc74-4468-b92e-\
f777a12f28f0"],

Cell[TextData[{
 "Use ",
 StyleBox["Table ",
  FontWeight->"Bold"],
 "and ",
 StyleBox["RandomInteger",
  FontWeight->"Bold"],
 " to generate a list of random integers between 0 and 100."
}], "CodeText",
 CellChangeTimes->{{3.7461704418249187`*^9, 3.7461704736494684`*^9}, {
  3.746170599397631*^9, 
  3.746170668206781*^9}},ExpressionUUID->"d03fab90-fad1-4c91-8e73-\
c08b4a1bbd1c"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"randomList", "=", 
  RowBox[{"Table", "[", 
   RowBox[{
    RowBox[{"RandomInteger", "[", "100", "]"}], ",", "10"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.7461706368327727`*^9, 3.7461706616391177`*^9}, {
  3.7462276095987573`*^9, 3.746227635375807*^9}},
 CellLabel->"In[53]:=",ExpressionUUID->"c9a0964b-8f9c-47f3-8177-0efc48927d51"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "74", ",", "53", ",", "82", ",", "6", ",", "35", ",", "80", ",", "80", ",", 
   "98", ",", "72", ",", "79"}], "}"}]], "Output",
 CellChangeTimes->{3.7461706623985786`*^9, 3.7462276365464225`*^9, 
  3.74631867544495*^9, 3.7464275148406024`*^9},
 CellLabel->"Out[53]=",ExpressionUUID->"46ea6d0e-ad73-46f7-a565-4b165faffb97"]
}, Open  ]],

Cell["Access the 7th element of the list:", "CodeText",
 CellChangeTimes->{{3.746171529429519*^9, 
  3.7461715436165004`*^9}},ExpressionUUID->"2031cefd-f0fa-46f6-b674-\
8af6feb908e6"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"randomList", "[", 
   RowBox[{"[", "7", "]"}], "]"}], " ", 
  RowBox[{"(*", 
   RowBox[{
    RowBox[{"Two", " ", "square", " ", "brackets"}], ",", " ", 
    RowBox[{"not", " ", "1", " ", "like", " ", "python"}]}], 
   "*)"}]}]], "Input",
 CellChangeTimes->{{3.7461715197741585`*^9, 3.7461715259742684`*^9}, {
  3.7462693166680155`*^9, 3.7462693522409115`*^9}},
 CellLabel->"In[54]:=",ExpressionUUID->"b7b86169-bbf4-4768-bd10-080016c5550f"],

Cell[BoxData["80"], "Output",
 CellChangeTimes->{3.746171526455377*^9, 3.746227639716273*^9, 
  3.7463186786414337`*^9, 3.7464275186943393`*^9},
 CellLabel->"Out[54]=",ExpressionUUID->"12932706-b54c-4eee-88ad-db4c50bef11c"]
}, Open  ]],

Cell["Sort the list:", "CodeText",
 CellChangeTimes->{{3.746171649574241*^9, 
  3.7461716540803404`*^9}},ExpressionUUID->"77b7b1d5-76d2-430f-8c73-\
d7e4c23997c7"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Sort", "[", "randomList", "]"}]], "Input",
 CellChangeTimes->{{3.7461716292190485`*^9, 3.7461716378212576`*^9}},
 CellLabel->"In[55]:=",ExpressionUUID->"4ef9ffbc-07b8-4679-9ee8-feb6fa678295"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "6", ",", "35", ",", "53", ",", "72", ",", "74", ",", "79", ",", "80", ",", 
   "80", ",", "82", ",", "98"}], "}"}]], "Output",
 CellChangeTimes->{3.746171639808962*^9, 3.7462276420930924`*^9, 
  3.7463186837497807`*^9, 3.746427522117256*^9},
 CellLabel->"Out[55]=",ExpressionUUID->"c49eb196-5a16-44b2-bc93-b34404ecb37b"]
}, Open  ]],

Cell["\<\
Plot the points from the list (the x-coordinate will default to the index) \
connected or not connected. :\
\>", "CodeText",
 CellChangeTimes->{{3.746171481298489*^9, 3.7461715085460625`*^9}, 
   3.7461715467454333`*^9, {3.746318692262453*^9, 
   3.7463187237602005`*^9}},ExpressionUUID->"9acf6c40-337d-417b-845a-\
aedbc04cae61"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"ListPlot", "[", "randomList", "]"}], ",", " ", 
   RowBox[{"ListLinePlot", "[", "randomList", "]"}]}], "}"}]], "Input",
 CellChangeTimes->{{3.7461713838778915`*^9, 3.7461713936722107`*^9}, {
  3.7463186544622736`*^9, 3.7463186694951496`*^9}, {3.7464275320461073`*^9, 
  3.746427533643382*^9}, {3.746427958642783*^9, 
  3.7464279720926514`*^9}},ExpressionUUID->"077e19a7-b634-4a37-b93a-\
470cf76671c6"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   GraphicsBox[{{}, {{}, 
      {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
       0.012833333333333334`], AbsoluteThickness[1.6], 
       PointBox[{{1., 74.}, {2., 53.}, {3., 82.}, {4., 6.}, {5., 35.}, {6., 
        80.}, {7., 80.}, {8., 98.}, {9., 72.}, {10., 
        79.}}]}, {}}, {}, {}, {}, {}},
    AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
    Axes->{True, True},
    AxesLabel->{None, None},
    AxesOrigin->{0., 0},
    DisplayFunction->Identity,
    Frame->{{False, False}, {False, False}},
    FrameLabel->{{None, None}, {None, None}},
    FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
    GridLines->{None, None},
    GridLinesStyle->Directive[
      GrayLevel[0.5, 0.4]],
    ImagePadding->All,
    Method->{"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
          (Identity[#]& )[
           Part[#, 1]], 
          (Identity[#]& )[
           Part[#, 2]]}& ), "CopiedValueFunction" -> ({
          (Identity[#]& )[
           Part[#, 1]], 
          (Identity[#]& )[
           Part[#, 2]]}& )}},
    PlotRange->{{0., 10.}, {0, 98.}},
    PlotRangeClipping->True,
    PlotRangePadding->{{
       Scaled[0.02], 
       Scaled[0.02]}, {
       Scaled[0.02], 
       Scaled[0.05]}},
    Ticks->{Automatic, Automatic}], ",", 
   GraphicsBox[{{}, {{}, {}, 
      {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
        NCache[
         Rational[7, 360], 0.019444444444444445`]], AbsoluteThickness[1.6], 
       LineBox[{{1., 74.}, {2., 53.}, {3., 82.}, {4., 6.}, {5., 35.}, {6., 
        80.}, {7., 80.}, {8., 98.}, {9., 72.}, {10., 79.}}]}}, {}, {}, {}, {}},
    AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
    Axes->{True, True},
    AxesLabel->{None, None},
    AxesOrigin->{0., 0},
    DisplayFunction->Identity,
    Frame->{{False, False}, {False, False}},
    FrameLabel->{{None, None}, {None, None}},
    FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
    GridLines->{None, None},
    GridLinesStyle->Directive[
      GrayLevel[0.5, 0.4]],
    ImagePadding->All,
    Method->{"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
          (Identity[#]& )[
           Part[#, 1]], 
          (Identity[#]& )[
           Part[#, 2]]}& ), "CopiedValueFunction" -> ({
          (Identity[#]& )[
           Part[#, 1]], 
          (Identity[#]& )[
           Part[#, 2]]}& )}},
    PlotRange->{{0., 10.}, {0, 98.}},
    PlotRangeClipping->True,
    PlotRangePadding->{{
       Scaled[0.02], 
       Scaled[0.02]}, {
       Scaled[0.02], 
       Scaled[0.05]}},
    Ticks->{Automatic, Automatic}]}], "}"}]], "Output",
 CellChangeTimes->{3.746171395443323*^9, 3.7462276453596277`*^9, 
  3.7463186904189963`*^9, 3.74642752543531*^9},
 CellLabel->"Out[56]=",ExpressionUUID->"bf0a4c1a-1a96-4593-872e-c68d2bb1130b"]
}, Open  ]],

Cell["\<\
You can see that even graphic elements such as plots can be elements in a \
lists.\
\>", "Text",
 CellChangeTimes->{{3.746171573651693*^9, 3.746171614762694*^9}, 
   3.746318648103054*^9, {3.7463187264897976`*^9, 3.7463187818451304`*^9}, {
   3.7464275605122075`*^9, 
   3.7464275622109613`*^9}},ExpressionUUID->"c260e2e2-a811-481e-9d86-\
fc18026ceb69"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Visualizations", "Subsection",
 CellChangeTimes->{{3.7462128890327*^9, 
  3.7462128985711246`*^9}},ExpressionUUID->"413925a7-b3b2-45f5-95d0-\
e3355ae31b91"],

Cell["\<\
It is quite easy to plot all kinds of things in Mathematica. And if you take \
any kind of math or (social or natural) science class, it will come in quite \
handy.\
\>", "Text",
 CellChangeTimes->{{3.746215348531447*^9, 3.7462153892362785`*^9}, {
  3.7462154224101286`*^9, 3.7462155189868965`*^9}, {3.746227659750553*^9, 
  3.746227692463421*^9}, {3.7463187458735247`*^9, 3.746318748822049*^9}, {
  3.746427589354248*^9, 3.746427625501225*^9}, {3.7464278256145544`*^9, 
  3.7464278375170527`*^9}},ExpressionUUID->"396017c3-3c0f-4e67-ad41-\
898e806cdad8"],

Cell[CellGroupData[{

Cell["Displaying Lists", "Subsubsection",
 CellChangeTimes->{{3.746427842643625*^9, 
  3.746427848895754*^9}},ExpressionUUID->"4c3ebc83-0fad-4dad-9b3d-\
eb42e0f87231"],

Cell[TextData[{
 "You already saw how to display a list using ",
 StyleBox["ListPlot ",
  FontWeight->"Bold"],
 "and ",
 StyleBox["ListLinePlot",
  FontWeight->"Bold"],
 ". \nHere are some other example charts:"
}], "Text",
 CellChangeTimes->{{3.7464278539075966`*^9, 3.746427898617657*^9}, {
  3.7466615158523874`*^9, 
  3.746661529707267*^9}},ExpressionUUID->"ef332a4f-d387-4d95-a1d4-\
17070400cae9"],

Cell[TextData[{
 "A ",
 StyleBox["BarChart:",
  FontWeight->"Bold"]
}], "CodeText",
 CellChangeTimes->{{3.7464280995771723`*^9, 
  3.746428109431057*^9}},ExpressionUUID->"e523783a-ee26-4f09-a67d-\
263a67e3aa82"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"BarChart", "[", "randomList", "]"}]], "Input",
 CellChangeTimes->{{3.746427923449998*^9, 3.746427931051549*^9}},
 CellLabel->"In[58]:=",ExpressionUUID->"50b562e3-850d-4b34-87b7-77c7af147404"],

Cell[BoxData[
 GraphicsBox[{
   {Opacity[0], 
    PointBox[{{0.3479427549194991, 0.}, {10.453901197192788`, 0.}}]}, {{}, 
    {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.63], 
     Thickness[Small]}], 
     {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.63], 
      Thickness[Small]}], 
      TagBox[
       TooltipBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           
           RectangleBox[{0.5460988028072107, 0.}, {1.4539011971927893`, 74.}, 
            "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{27.114898900736765`, 
           56.77409198973707}, {-51.544094244741956`, 98.64548819746446}}],
         StatusArea[#, 74]& ,
         TagBoxNote->"74"],
        StyleBox["74", {}, StripOnInput -> False]],
       Annotation[#, 
        Style[74, {}], "Tooltip"]& ]}, 
     {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.63], 
      Thickness[Small]}], 
      TagBox[
       TooltipBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           
           RectangleBox[{1.5460988028072107`, 0.}, {2.4539011971927893`, 53.},
             "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{59.235538006052096`, 
           88.8947310950524}, {-9.064618146277965, 98.64548819746446}}],
         StatusArea[#, 53]& ,
         TagBoxNote->"53"],
        StyleBox["53", {}, StripOnInput -> False]],
       Annotation[#, 
        Style[53, {}], "Tooltip"]& ]}, 
     {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.63], 
      Thickness[Small]}], 
      TagBox[
       TooltipBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           
           RectangleBox[{2.5460988028072107`, 0.}, {3.4539011971927893`, 82.},
             "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{91.35617711136744, 
           121.01537020036774`}, {-67.72675180606157, 98.64548819746446}}],
         StatusArea[#, 82]& ,
         TagBoxNote->"82"],
        StyleBox["82", {}, StripOnInput -> False]],
       Annotation[#, 
        Style[82, {}], "Tooltip"]& ]}, 
     {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.63], 
      Thickness[Small]}], 
      TagBox[
       TooltipBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           
           RectangleBox[{3.5460988028072107`, 0.}, {4.453901197192789, 6.}, 
            "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{123.47681621668278`, 153.13600930568307`}, {
           86.00849502647475, 98.64548819746446}}],
         StatusArea[#, 6]& ,
         TagBoxNote->"6"],
        StyleBox["6", {}, StripOnInput -> False]],
       Annotation[#, 
        Style[6, {}], "Tooltip"]& ]}, 
     {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.63], 
      Thickness[Small]}], 
      TagBox[
       TooltipBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           
           RectangleBox[{4.546098802807211, 0.}, {5.453901197192789, 35.}, 
            "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{155.5974553219981, 185.2566484109984}, {
           27.346361366691156`, 98.64548819746446}}],
         StatusArea[#, 35]& ,
         TagBoxNote->"35"],
        StyleBox["35", {}, StripOnInput -> False]],
       Annotation[#, 
        Style[35, {}], "Tooltip"]& ]}, 
     {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.63], 
      Thickness[Small]}], 
      TagBox[
       TooltipBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           
           RectangleBox[{5.546098802807211, 0.}, {6.453901197192789, 80.}, 
            "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{187.71809442731342`, 
           217.37728751631374`}, {-63.68108741573167, 98.64548819746446}}],
         StatusArea[#, 80]& ,
         TagBoxNote->"80"],
        StyleBox["80", {}, StripOnInput -> False]],
       Annotation[#, 
        Style[80, {}], "Tooltip"]& ]}, 
     {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.63], 
      Thickness[Small]}], 
      TagBox[
       TooltipBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           
           RectangleBox[{6.546098802807211, 0.}, {7.453901197192789, 80.}, 
            "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{219.83873353262877`, 
           249.49792662162906`}, {-63.68108741573167, 98.64548819746446}}],
         StatusArea[#, 80]& ,
         TagBoxNote->"80"],
        StyleBox["80", {}, StripOnInput -> False]],
       Annotation[#, 
        Style[80, {}], "Tooltip"]& ]}, 
     {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.63], 
      Thickness[Small]}], 
      TagBox[
       TooltipBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           
           RectangleBox[{7.546098802807211, 0.}, {8.453901197192788, 98.}, 
            "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{251.95937263794409`, 
           281.6185657269444}, {-100.09206692870077`, 98.64548819746446}}],
         StatusArea[#, 98]& ,
         TagBoxNote->"98"],
        StyleBox["98", {}, StripOnInput -> False]],
       Annotation[#, 
        Style[98, {}], "Tooltip"]& ]}, 
     {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.63], 
      Thickness[Small]}], 
      TagBox[
       TooltipBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           
           RectangleBox[{8.54609880280721, 0.}, {9.453901197192788, 72.}, 
            "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{284.0800117432594, 
           313.7392048322597}, {-47.49842985441205, 98.64548819746446}}],
         StatusArea[#, 72]& ,
         TagBoxNote->"72"],
        StyleBox["72", {}, StripOnInput -> False]],
       Annotation[#, 
        Style[72, {}], "Tooltip"]& ]}, 
     {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[0.63], 
      Thickness[Small]}], 
      TagBox[
       TooltipBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           
           RectangleBox[{9.54609880280721, 0.}, {10.453901197192788`, 79.}, 
            "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{316.20065084857475`, 
           345.859843937575}, {-61.6582552205667, 98.64548819746446}}],
         StatusArea[#, 79]& ,
         TagBoxNote->"79"],
        StyleBox["79", {}, StripOnInput -> False]],
       Annotation[#, 
        Style[79, {}], "Tooltip"]& ]}}, {}, {}}, {}, {}, {}, {}, 
   StyleBox[{
     {Thickness[Tiny], 
      LineBox[{{0.3479427549194991, 0.}, {10.656020366038254`, 0.}}], 
      StyleBox[{}, "GraphicsLabel",
       StripOnInput->False]}, 
     StyleBox[{
       {Thickness[Tiny], 
        LineBox[{{0.5460988028072107, 0.}, 
          Offset[{-1.102182119232618*^-15, -6.}, {0.5460988028072107, 0.}]}], 
        LineBox[{{10.453901197192788`, 0.}, 
          Offset[{-1.102182119232618*^-15, -6.}, {10.453901197192788`, 
           0.}]}], {{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}}}, 
       StyleBox[{}, "GraphicsLabel",
        StripOnInput->False]}, "GraphicsTicks",
      StripOnInput->False]}, "GraphicsAxes",
    StripOnInput->False,
    Antialiasing->False]},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{False, True},
  AxesLabel->{None, None},
  AxesOrigin->{0.3479427549194991, 0.},
  CoordinatesToolOptions:>{"DisplayFunction" -> ({
      Identity[
       Part[#, 1]], 
      Identity[
       Part[#, 2]]}& ), "CopiedValueFunction" -> ({
      Identity[
       Part[#, 1]], 
      Identity[
       Part[#, 2]]}& )},
  DisplayFunction->Identity,
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  PlotRange->{{All, All}, {All, All}},
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.02], 
     Scaled[0.05]}},
  Ticks->{None, Automatic}]], "Output",
 CellChangeTimes->{3.746427948717388*^9},
 CellLabel->"Out[58]=",ExpressionUUID->"03b216f0-ab80-467b-aa5c-8d88a42e28b5"]
}, Open  ]],

Cell[TextData[{
 "A ",
 StyleBox["PieChart:",
  FontWeight->"Bold"]
}], "CodeText",
 CellChangeTimes->{{3.7464281165124407`*^9, 
  3.74642812191858*^9}},ExpressionUUID->"f173b1b9-eab5-4098-8edd-\
f6cd571298cf"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"PieChart", "[", "randomList", "]"}]], "Input",
 CellChangeTimes->{{3.746427933274714*^9, 3.7464279441618195`*^9}},
 CellLabel->"In[57]:=",ExpressionUUID->"5eb64ab3-82a3-411c-a824-cd55d2e70f7b"],

Cell[BoxData[
 GraphicsBox[{{}, {}, 
   DynamicModuleBox[{DynamicChart`click$3027$3105 = False, 
    DynamicChart`click$3036$3105 = False, DynamicChart`click$3040$3105 = 
    False, DynamicChart`click$3044$3105 = False, 
    DynamicChart`click$3048$3105 = False, DynamicChart`click$3052$3105 = 
    False, DynamicChart`click$3056$3105 = False, 
    DynamicChart`click$3060$3105 = False, DynamicChart`click$3064$3105 = 
    False, DynamicChart`click$3068$3105 = False}, {
     {RGBColor[0.5, 0.5, 1.], EdgeForm[{GrayLevel[0], Opacity[0.5]}], {{{}, {
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{GrayLevel[0], 
          Opacity[0.5]}], GeometricTransformationBox[
           TagBox[
            TagBox[
             TooltipBox[
              TagBox[
               DynamicBox[{
                 FEPrivate`If[
                  CurrentValue["MouseOver"], 
                  EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[2.5], 
                    Opacity[0.66]}], {}, {}], 
                 
                 DiskBox[{0, 0}, 1., {2.4360452898093845`, 
                  3.141592653589793}]},
                
                ImageSizeCache->{{31.585786437626894`, 
                 181.41421356237308`}, {-99.73645338160716, \
-1.5857864376268935`}}],
               StatusArea[#, 74]& ,
               TagBoxNote->"74"],
              StyleBox["74", {}, StripOnInput -> False]],
             Annotation[#, 
              Style[74, {}], "Tooltip"]& ],
            
            EventHandlerTag[{
             "MouseClicked" :> FEPrivate`Set[DynamicChart`click$3027$3105, 
                FEPrivate`Not[DynamicChart`click$3027$3105]], PassEventsDown -> 
              True, Method -> "Preemptive", PassEventsUp -> True}]], Dynamic[
           If[DynamicChart`click$3027$3105, {{{1., 0}, {
               0, 1.}}, {-0.18768360223743003`, 0.06910040123749035}}, {{1, 
             0}, {0, 1}}, {{1, 0}, {0, 1}}], 
            TrackedSymbols :> {DynamicChart`click$3027$3105}]]}, 
         {RGBColor[0.99048, 0.6546373333333334, 0.2701484444444444], 
          EdgeForm[{GrayLevel[0], Opacity[0.5]}], GeometricTransformationBox[
           TagBox[
            TagBox[
             TooltipBox[
              TagBox[
               DynamicBox[{
                 FEPrivate`If[
                  CurrentValue["MouseOver"], 
                  EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[2.5], 
                    Opacity[0.66]}], {}, {}], 
                 
                 DiskBox[{0, 0}, 1., {1.9307208265612537`, 
                  2.4360452898093845`}]},
                
                ImageSizeCache->{{66.68104750381573, 
                 181.4142135623731}, {-141.99495597858927`, \
-1.5857864376268935`}}],
               StatusArea[#, 53]& ,
               TagBoxNote->"53"],
              StyleBox["53", {}, StripOnInput -> False]],
             Annotation[#, 
              Style[53, {}], "Tooltip"]& ],
            
            EventHandlerTag[{
             "MouseClicked" :> FEPrivate`Set[DynamicChart`click$3036$3105, 
                FEPrivate`Not[DynamicChart`click$3036$3105]], PassEventsDown -> 
              True, Method -> "Preemptive", PassEventsUp -> True}]], Dynamic[
           If[DynamicChart`click$3036$3105, {{{1., 0}, {
               0, 1.}}, {-0.11499715008290352`, 0.1636326846104108}}, {{1, 
             0}, {0, 1}}, {{1, 0}, {0, 1}}], 
            TrackedSymbols :> {DynamicChart`click$3036$3105}]]}, 
         {RGBColor[0.998096, 0.5661274666666667, 0.2140296888888889], 
          EdgeForm[{GrayLevel[0], Opacity[0.5]}], GeometricTransformationBox[
           TagBox[
            TagBox[
             TooltipBox[
              TagBox[
               DynamicBox[{
                 FEPrivate`If[
                  CurrentValue["MouseOver"], 
                  EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[2.5], 
                    Opacity[0.66]}], {}, {}], 
                 
                 DiskBox[{0, 0}, 1., {1.1488980721018816`, 
                  1.9307208265612537`}]},
                ImageSizeCache->{{126.81186137681291`, 
                 241.6096834935168}, {-151.4142135623731, \
-1.5857864376268935`}}],
               StatusArea[#, 82]& ,
               TagBoxNote->"82"],
              StyleBox["82", {}, StripOnInput -> False]],
             Annotation[#, 
              Style[82, {}], "Tooltip"]& ],
            
            EventHandlerTag[{
             "MouseClicked" :> FEPrivate`Set[DynamicChart`click$3040$3105, 
                FEPrivate`Not[DynamicChart`click$3040$3105]], PassEventsDown -> 
              True, Method -> "Preemptive", PassEventsUp -> True}]], Dynamic[
           If[DynamicChart`click$3040$3105, {{{1., 0}, {0, 1.}}, {
              0.006196383767487776, 0.19990398902524686`}}, {{1, 0}, {0, 
             1}}, {{1, 0}, {0, 1}}], 
            TrackedSymbols :> {DynamicChart`click$3040$3105}]]}, 
         {RGBColor[0.928, 0.5210666666666667, 0.2], EdgeForm[{GrayLevel[0], 
          Opacity[0.5]}], GeometricTransformationBox[
           TagBox[
            TagBox[
             TooltipBox[
              TagBox[
               DynamicBox[{
                 FEPrivate`If[
                  CurrentValue["MouseOver"], 
                  EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[2.5], 
                    Opacity[0.66]}], {}, {}], 
                 
                 DiskBox[{0, 0}, 1., {1.0916915290926594`, 
                  1.1488980721018816`}]},
                
                ImageSizeCache->{{178.5857864376269, 
                 249.179001318599}, {-138.52426314766248`, \
-1.5857864376268935`}}],
               StatusArea[#, 6]& ,
               TagBoxNote->"6"],
              StyleBox["6", {}, StripOnInput -> False]],
             Annotation[#, 
              Style[6, {}], "Tooltip"]& ],
            
            EventHandlerTag[{
             "MouseClicked" :> FEPrivate`Set[DynamicChart`click$3044$3105, 
                FEPrivate`Not[DynamicChart`click$3044$3105]], PassEventsDown -> 
              True, Method -> "Preemptive", PassEventsUp -> True}]], Dynamic[
           If[
            DynamicChart`click$3044$3105, {{{1., 0}, {0, 1.}}, {
              0.08708341544011722, 0.1800457685014673}}, {{1, 0}, {0, 1}}, {{
             1, 0}, {0, 1}}], 
            TrackedSymbols :> {DynamicChart`click$3044$3105}]]}, 
         {RGBColor[0.8320000000000001, 0.49048888888888886`, 0.2], EdgeForm[{
          GrayLevel[0], Opacity[0.5]}], GeometricTransformationBox[
           TagBox[
            TagBox[
             TooltipBox[
              TagBox[
               DynamicBox[{
                 FEPrivate`If[
                  CurrentValue["MouseOver"], 
                  EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[2.5], 
                    Opacity[0.66]}], {}, {}], 
                 
                 DiskBox[{0, 0}, 1., {0.7579866948721956, 
                  1.0916915290926594`}]},
                
                ImageSizeCache->{{178.5857864376269, 
                 288.1687813915329}, {-134.86318266659276`, \
-1.5857864376268935`}}],
               StatusArea[#, 35]& ,
               TagBoxNote->"35"],
              StyleBox["35", {}, StripOnInput -> False]],
             Annotation[#, 
              Style[35, {}], "Tooltip"]& ],
            
            EventHandlerTag[{
             "MouseClicked" :> FEPrivate`Set[DynamicChart`click$3048$3105, 
                FEPrivate`Not[DynamicChart`click$3048$3105]], PassEventsDown -> 
              True, Method -> "Preemptive", PassEventsUp -> True}]], Dynamic[
           If[DynamicChart`click$3048$3105, {{{1., 0}, {0, 1.}}, {
              0.12039261462074223`, 0.15970478497772522`}}, {{1, 0}, {0, 
             1}}, {{1, 0}, {0, 1}}], 
            TrackedSymbols :> {DynamicChart`click$3048$3105}]]}, 
         {RGBColor[
          0.7598801777777778, 0.4773333333333333, 0.3161064888888889], 
          EdgeForm[{GrayLevel[0], Opacity[0.5]}], GeometricTransformationBox[
           TagBox[
            TagBox[
             TooltipBox[
              TagBox[
               DynamicBox[{
                 FEPrivate`If[
                  CurrentValue["MouseOver"], 
                  EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[2.5], 
                    Opacity[0.66]}], {}, {}], 
                 
                 DiskBox[{0, 0}, 1., {-0.004767211917435343, 
                  0.7579866948721956}]},
                
                ImageSizeCache->{{178.5857864376269, 
                 328.4142135623731}, {-105.47094143147304`, \
-0.8850089401186523}}],
               StatusArea[#, 80]& ,
               TagBoxNote->"80"],
              StyleBox["80", {}, StripOnInput -> False]],
             Annotation[#, 
              Style[80, {}], "Tooltip"]& ],
            
            EventHandlerTag[{
             "MouseClicked" :> FEPrivate`Set[DynamicChart`click$3052$3105, 
                FEPrivate`Not[DynamicChart`click$3052$3105]], PassEventsDown -> 
              True, Method -> "Preemptive", PassEventsUp -> True}]], Dynamic[
           If[DynamicChart`click$3052$3105, {{{1., 0}, {0, 1.}}, {
              0.18598336249759595`, 0.07355398611963755}}, {{1, 0}, {0, 
             1}}, {{1, 0}, {0, 1}}], 
            TrackedSymbols :> {DynamicChart`click$3052$3105}]]}, 
         {RGBColor[0.7116405333333333, 0.4816, 0.5483194666666666], EdgeForm[{
          GrayLevel[0], Opacity[0.5]}], GeometricTransformationBox[
           TagBox[
            TagBox[
             TooltipBox[
              TagBox[
               DynamicBox[{
                 FEPrivate`If[
                  CurrentValue["MouseOver"], 
                  EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[2.5], 
                    Opacity[0.66]}], {}, {}], 
                 
                 DiskBox[{0, 0}, 
                  1., {-0.7675211187070663, -0.004767211917435343}]},
                
                ImageSizeCache->{{178.5857864376269, 
                 328.41254318179085`}, {-4.4142135623731065`, 
                 100.48417604817409`}}],
               StatusArea[#, 80]& ,
               TagBoxNote->"80"],
              StyleBox["80", {}, StripOnInput -> False]],
             Annotation[#, 
              Style[80, {}], "Tooltip"]& ],
            
            EventHandlerTag[{
             "MouseClicked" :> FEPrivate`Set[DynamicChart`click$3056$3105, 
                FEPrivate`Not[DynamicChart`click$3056$3105]], PassEventsDown -> 
              True, Method -> "Preemptive", PassEventsUp -> True}]], Dynamic[
           If[DynamicChart`click$3056$3105, {{{1., 0}, {0, 1.}}, {
              0.18527362487750348`, -0.07532386026187274}}, {{1, 0}, {0, 
             1}}, {{1, 0}, {0, 1}}], 
            TrackedSymbols :> {DynamicChart`click$3056$3105}]]}, 
         {RGBColor[
          0.6558762666666667, 0.4926222222222222, 0.7345293333333333], 
          EdgeForm[{GrayLevel[0], Opacity[0.5]}], GeometricTransformationBox[
           TagBox[
            TagBox[
             TooltipBox[
              TagBox[
               DynamicBox[{
                 FEPrivate`If[
                  CurrentValue["MouseOver"], 
                  EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[2.5], 
                    Opacity[0.66]}], {}, {}], 
                 
                 DiskBox[{0, 0}, 
                  1., {-1.7018946545243647`, -0.7675211187070663}]},
                
                ImageSizeCache->{{159.36948718997036`, 
                 287.2004260767985}, {-4.414213562373078, 145.4142135623731}}],
               StatusArea[#, 98]& ,
               TagBoxNote->"98"],
              StyleBox["98", {}, StripOnInput -> False]],
             Annotation[#, 
              Style[98, {}], "Tooltip"]& ],
            
            EventHandlerTag[{
             "MouseClicked" :> FEPrivate`Set[DynamicChart`click$3060$3105, 
                FEPrivate`Not[DynamicChart`click$3060$3105]], PassEventsDown -> 
              True, Method -> "Preemptive", PassEventsUp -> True}]], Dynamic[
           If[DynamicChart`click$3060$3105, {{{1., 0}, {0, 1.}}, {
              0.06595938181016861, -0.18881038094135716`}}, {{1, 0}, {0, 
             1}}, {{1, 0}, {0, 1}}], 
            TrackedSymbols :> {DynamicChart`click$3060$3105}]]}, 
         {RGBColor[
          0.5775381333333334, 0.5239111111111111, 0.7827298666666667], 
          EdgeForm[{GrayLevel[0], Opacity[0.5]}], GeometricTransformationBox[
           TagBox[
            TagBox[
             TooltipBox[
              TagBox[
               DynamicBox[{
                 FEPrivate`If[
                  CurrentValue["MouseOver"], 
                  EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[2.5], 
                    Opacity[0.66]}], {}, {}], 
                 
                 DiskBox[{0, 0}, 
                  1., {-2.388373170635033, -1.7018946545243647`}]},
                
                ImageSizeCache->{{71.35067466217247, 
                 181.4142135623731}, {-4.414213562373078, 
                 144.15279405231928`}}],
               StatusArea[#, 72]& ,
               TagBoxNote->"72"],
              StyleBox["72", {}, StripOnInput -> False]],
             Annotation[#, 
              Style[72, {}], "Tooltip"]& ],
            
            EventHandlerTag[{
             "MouseClicked" :> FEPrivate`Set[DynamicChart`click$3064$3105, 
                FEPrivate`Not[DynamicChart`click$3064$3105]], PassEventsDown -> 
              True, Method -> "Preemptive", PassEventsUp -> True}]], Dynamic[
           If[DynamicChart`click$3064$3105, {{{1., 0}, {
               0, 1.}}, {-0.09134985334868065, -0.17791909479641174`}}, {{1, 
             0}, {0, 1}}, {{1, 0}, {0, 1}}], 
            TrackedSymbols :> {DynamicChart`click$3064$3105}]]}, 
         {RGBColor[0.4992, 0.5552, 0.8309304], EdgeForm[{GrayLevel[0], 
          Opacity[0.5]}], GeometricTransformationBox[
           TagBox[
            TagBox[
             TooltipBox[
              TagBox[
               DynamicBox[{
                 FEPrivate`If[
                  CurrentValue["MouseOver"], 
                  EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[2.5], 
                    Opacity[0.66]}], {}, {}], 
                 
                 DiskBox[{0, 0}, 
                  1., {-3.141592653589793, -2.388373170635033}]},
                
                ImageSizeCache->{{31.585786437626894`, 
                 181.41421356237308`}, {-4.4142135623731065`, 
                 98.96087339006603}}],
               StatusArea[#, 79]& ,
               TagBoxNote->"79"],
              StyleBox["79", {}, StripOnInput -> False]],
             Annotation[#, 
              Style[79, {}], "Tooltip"]& ],
            
            EventHandlerTag[{
             "MouseClicked" :> FEPrivate`Set[DynamicChart`click$3068$3105, 
                FEPrivate`Not[DynamicChart`click$3068$3105]], PassEventsDown -> 
              True, Method -> "Preemptive", PassEventsUp -> True}]], Dynamic[
           If[DynamicChart`click$3068$3105, {{{1., 0}, {
               0, 1.}}, {-0.18598336249759592`, -0.07355398611963758}}, {{1, 
             0}, {0, 1}}, {{1, 0}, {0, 1}}], 
            TrackedSymbols :> {
             DynamicChart`click$3068$3105}]]}}}, {}}, {}}, {{{
        GeometricTransformationBox[
         TagBox[
          TagBox[
           TooltipBox[
            TagBox[{{}, {}},
             StatusArea[#, 74]& ,
             TagBoxNote->"74"],
            StyleBox["74", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[74, {}], "Tooltip"]& ],
          
          EventHandlerTag[{
           "MouseClicked" :> FEPrivate`Set[DynamicChart`click$3027$3105, 
              FEPrivate`Not[DynamicChart`click$3027$3105]], PassEventsDown -> 
            True, Method -> "Preemptive", PassEventsUp -> True}]], Dynamic[
         If[DynamicChart`click$3027$3105, {{{1., 0}, {
             0, 1.}}, {-0.18768360223743003`, 0.06910040123749035}}, {{1, 
           0}, {0, 1}}, {{1, 0}, {0, 1}}], 
          TrackedSymbols :> {DynamicChart`click$3027$3105}]], 
        GeometricTransformationBox[
         TagBox[
          TagBox[
           TooltipBox[
            TagBox[{{}, {}},
             StatusArea[#, 53]& ,
             TagBoxNote->"53"],
            StyleBox["53", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[53, {}], "Tooltip"]& ],
          
          EventHandlerTag[{
           "MouseClicked" :> FEPrivate`Set[DynamicChart`click$3036$3105, 
              FEPrivate`Not[DynamicChart`click$3036$3105]], PassEventsDown -> 
            True, Method -> "Preemptive", PassEventsUp -> True}]], Dynamic[
         If[DynamicChart`click$3036$3105, {{{1., 0}, {
             0, 1.}}, {-0.11499715008290352`, 0.1636326846104108}}, {{1, 0}, {
           0, 1}}, {{1, 0}, {0, 1}}], 
          TrackedSymbols :> {DynamicChart`click$3036$3105}]], 
        GeometricTransformationBox[
         TagBox[
          TagBox[
           TooltipBox[
            TagBox[{{}, {}},
             StatusArea[#, 82]& ,
             TagBoxNote->"82"],
            StyleBox["82", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[82, {}], "Tooltip"]& ],
          
          EventHandlerTag[{
           "MouseClicked" :> FEPrivate`Set[DynamicChart`click$3040$3105, 
              FEPrivate`Not[DynamicChart`click$3040$3105]], PassEventsDown -> 
            True, Method -> "Preemptive", PassEventsUp -> True}]], Dynamic[
         If[DynamicChart`click$3040$3105, {{{1., 0}, {0, 1.}}, {
            0.006196383767487776, 0.19990398902524686`}}, {{1, 0}, {0, 1}}, {{
           1, 0}, {0, 1}}], 
          TrackedSymbols :> {DynamicChart`click$3040$3105}]], 
        GeometricTransformationBox[
         TagBox[
          TagBox[
           TooltipBox[
            TagBox[{{}, {}},
             StatusArea[#, 6]& ,
             TagBoxNote->"6"],
            StyleBox["6", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[6, {}], "Tooltip"]& ],
          
          EventHandlerTag[{
           "MouseClicked" :> FEPrivate`Set[DynamicChart`click$3044$3105, 
              FEPrivate`Not[DynamicChart`click$3044$3105]], PassEventsDown -> 
            True, Method -> "Preemptive", PassEventsUp -> True}]], Dynamic[
         If[DynamicChart`click$3044$3105, {{{1., 0}, {0, 1.}}, {
            0.08708341544011722, 0.1800457685014673}}, {{1, 0}, {0, 1}}, {{1, 
           0}, {0, 1}}], TrackedSymbols :> {DynamicChart`click$3044$3105}]], 
        GeometricTransformationBox[
         TagBox[
          TagBox[
           TooltipBox[
            TagBox[{{}, {}},
             StatusArea[#, 35]& ,
             TagBoxNote->"35"],
            StyleBox["35", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[35, {}], "Tooltip"]& ],
          
          EventHandlerTag[{
           "MouseClicked" :> FEPrivate`Set[DynamicChart`click$3048$3105, 
              FEPrivate`Not[DynamicChart`click$3048$3105]], PassEventsDown -> 
            True, Method -> "Preemptive", PassEventsUp -> True}]], Dynamic[
         If[DynamicChart`click$3048$3105, {{{1., 0}, {0, 1.}}, {
            0.12039261462074223`, 0.15970478497772522`}}, {{1, 0}, {0, 1}}, {{
           1, 0}, {0, 1}}], 
          TrackedSymbols :> {DynamicChart`click$3048$3105}]], 
        GeometricTransformationBox[
         TagBox[
          TagBox[
           TooltipBox[
            TagBox[{{}, {}},
             StatusArea[#, 80]& ,
             TagBoxNote->"80"],
            StyleBox["80", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[80, {}], "Tooltip"]& ],
          
          EventHandlerTag[{
           "MouseClicked" :> FEPrivate`Set[DynamicChart`click$3052$3105, 
              FEPrivate`Not[DynamicChart`click$3052$3105]], PassEventsDown -> 
            True, Method -> "Preemptive", PassEventsUp -> True}]], Dynamic[
         If[DynamicChart`click$3052$3105, {{{1., 0}, {0, 1.}}, {
            0.18598336249759595`, 0.07355398611963755}}, {{1, 0}, {0, 1}}, {{
           1, 0}, {0, 1}}], 
          TrackedSymbols :> {DynamicChart`click$3052$3105}]], 
        GeometricTransformationBox[
         TagBox[
          TagBox[
           TooltipBox[
            TagBox[{{}, {}},
             StatusArea[#, 80]& ,
             TagBoxNote->"80"],
            StyleBox["80", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[80, {}], "Tooltip"]& ],
          
          EventHandlerTag[{
           "MouseClicked" :> FEPrivate`Set[DynamicChart`click$3056$3105, 
              FEPrivate`Not[DynamicChart`click$3056$3105]], PassEventsDown -> 
            True, Method -> "Preemptive", PassEventsUp -> True}]], Dynamic[
         If[DynamicChart`click$3056$3105, {{{1., 0}, {0, 1.}}, {
            0.18527362487750348`, -0.07532386026187274}}, {{1, 0}, {0, 1}}, {{
           1, 0}, {0, 1}}], 
          TrackedSymbols :> {DynamicChart`click$3056$3105}]], 
        GeometricTransformationBox[
         TagBox[
          TagBox[
           TooltipBox[
            TagBox[{{}, {}},
             StatusArea[#, 98]& ,
             TagBoxNote->"98"],
            StyleBox["98", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[98, {}], "Tooltip"]& ],
          
          EventHandlerTag[{
           "MouseClicked" :> FEPrivate`Set[DynamicChart`click$3060$3105, 
              FEPrivate`Not[DynamicChart`click$3060$3105]], PassEventsDown -> 
            True, Method -> "Preemptive", PassEventsUp -> True}]], Dynamic[
         If[DynamicChart`click$3060$3105, {{{1., 0}, {0, 1.}}, {
            0.06595938181016861, -0.18881038094135716`}}, {{1, 0}, {0, 1}}, {{
           1, 0}, {0, 1}}], 
          TrackedSymbols :> {DynamicChart`click$3060$3105}]], 
        GeometricTransformationBox[
         TagBox[
          TagBox[
           TooltipBox[
            TagBox[{{}, {}},
             StatusArea[#, 72]& ,
             TagBoxNote->"72"],
            StyleBox["72", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[72, {}], "Tooltip"]& ],
          
          EventHandlerTag[{
           "MouseClicked" :> FEPrivate`Set[DynamicChart`click$3064$3105, 
              FEPrivate`Not[DynamicChart`click$3064$3105]], PassEventsDown -> 
            True, Method -> "Preemptive", PassEventsUp -> True}]], Dynamic[
         If[DynamicChart`click$3064$3105, {{{1., 0}, {
             0, 1.}}, {-0.09134985334868065, -0.17791909479641174`}}, {{1, 
           0}, {0, 1}}, {{1, 0}, {0, 1}}], 
          TrackedSymbols :> {DynamicChart`click$3064$3105}]], 
        GeometricTransformationBox[
         TagBox[
          TagBox[
           TooltipBox[
            TagBox[{{}, {}},
             StatusArea[#, 79]& ,
             TagBoxNote->"79"],
            StyleBox["79", {}, StripOnInput -> False]],
           Annotation[#, 
            Style[79, {}], "Tooltip"]& ],
          
          EventHandlerTag[{
           "MouseClicked" :> FEPrivate`Set[DynamicChart`click$3068$3105, 
              FEPrivate`Not[DynamicChart`click$3068$3105]], PassEventsDown -> 
            True, Method -> "Preemptive", PassEventsUp -> True}]], Dynamic[
         If[DynamicChart`click$3068$3105, {{{1., 0}, {
             0, 1.}}, {-0.18598336249759592`, -0.07355398611963758}}, {{1, 
           0}, {0, 1}}, {{1, 0}, {0, 1}}], 
          TrackedSymbols :> {
           DynamicChart`click$3068$3105}]]}, {}}, {}}, {}, {}},
    DynamicModuleValues:>{}], {{}, {}}, {{{}, {}, {}, {}}, {}}},
  ContentSelectable->False,
  DisplayFunction->Identity,
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  PlotRange->{{-1., 1.}, {-1., 1.}},
  PlotRangePadding->Scaled[0.09166666666666669]]], "Output",
 CellChangeTimes->{3.746427945648189*^9},
 CellLabel->"Out[57]=",ExpressionUUID->"9fdeb65b-706f-481b-b302-92548cfceede"]
}, Open  ]],

Cell[TextData[{
 "A ",
 StyleBox["NumberLinePlot:",
  FontWeight->"Bold"]
}], "CodeText",
 CellChangeTimes->{{3.7464281285905237`*^9, 
  3.7464281342477975`*^9}},ExpressionUUID->"86b57736-290e-43b4-87d7-\
8ff134680c45"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"NumberLinePlot", "[", "randomList", "]"}]], "Input",
 CellChangeTimes->{{3.746428006566975*^9, 3.746428014492362*^9}},
 CellLabel->"In[59]:=",ExpressionUUID->"7f2eae89-bebd-4f23-ba0c-d798afd02df1"],

Cell[BoxData[
 GraphicsBox[{
   {RGBColor[0.368417, 0.506779, 0.709798], PointSize[Medium], 
    AbsoluteThickness[1.6], PointBox[{74, 1}]}, 
   {RGBColor[0.368417, 0.506779, 0.709798], PointSize[Medium], 
    AbsoluteThickness[1.6], PointBox[{53, 1}]}, 
   {RGBColor[0.368417, 0.506779, 0.709798], PointSize[Medium], 
    AbsoluteThickness[1.6], PointBox[{82, 1}]}, 
   {RGBColor[0.368417, 0.506779, 0.709798], PointSize[Medium], 
    AbsoluteThickness[1.6], PointBox[{6, 1}]}, 
   {RGBColor[0.368417, 0.506779, 0.709798], PointSize[Medium], 
    AbsoluteThickness[1.6], PointBox[{35, 1}]}, 
   {RGBColor[0.368417, 0.506779, 0.709798], PointSize[Medium], 
    AbsoluteThickness[1.6], PointBox[{80, 1}]}, 
   {RGBColor[0.368417, 0.506779, 0.709798], PointSize[Medium], 
    AbsoluteThickness[1.6], PointBox[{80, 1}]}, 
   {RGBColor[0.368417, 0.506779, 0.709798], PointSize[Medium], 
    AbsoluteThickness[1.6], PointBox[{98, 1}]}, 
   {RGBColor[0.368417, 0.506779, 0.709798], PointSize[Medium], 
    AbsoluteThickness[1.6], PointBox[{72, 1}]}, 
   {RGBColor[0.368417, 0.506779, 0.709798], PointSize[Medium], 
    AbsoluteThickness[1.6], PointBox[{79, 1}]}},
  AspectRatio->NCache[Rational[1, 10]/GoldenRatio, 0.06180339887498948],
  Axes->{True, False},
  AxesLabel->{None},
  AxesOrigin->{Automatic, Automatic},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  ImagePadding->All,
  PlotRange->{{0., 98.}, {0, 1}},
  PlotRangePadding->{{
     Scaled[0.1], 
     Scaled[0.1]}, {0, 1}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.746428017407693*^9},
 CellLabel->"Out[59]=",ExpressionUUID->"9fa261e4-9919-43c3-b555-03e512be8553"]
}, Open  ]],

Cell[TextData[{
 "A ",
 StyleBox["Column ",
  FontWeight->"Bold"],
 "(this is a bit like grid for one dimensional lists, ",
 StyleBox["Row",
  FontWeight->"Bold"],
 " will give you the same oriented horizontally)",
 StyleBox[":",
  FontWeight->"Bold"]
}], "CodeText",
 CellChangeTimes->{{3.7464281420264893`*^9, 3.746428154866789*^9}, {
  3.7466615505823064`*^9, 
  3.746661615314641*^9}},ExpressionUUID->"a628df8a-cd63-47c7-aabb-\
39a04bc6146f"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Column", "[", "randomList", "]"}]], "Input",
 CellChangeTimes->{{3.746428020399692*^9, 3.746428032213067*^9}},
 CellLabel->"In[60]:=",ExpressionUUID->"05153145-08e3-42a7-a5f0-aae75116aeff"],

Cell[BoxData[
 TagBox[GridBox[{
    {"74"},
    {"53"},
    {"82"},
    {"6"},
    {"35"},
    {"80"},
    {"80"},
    {"98"},
    {"72"},
    {"79"}
   },
   DefaultBaseStyle->"Column",
   GridBoxAlignment->{"Columns" -> {{Left}}},
   GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
  "Column"]], "Output",
 CellChangeTimes->{3.74642803281767*^9},
 CellLabel->"Out[60]=",ExpressionUUID->"da6288e2-72e4-4b4e-9ecd-6ecdf0c8761e"]
}, Open  ]],

Cell["Make a pie chart with 10 identical segments, each of size 1:", \
"CodeText",
 CellChangeTimes->{{3.7464293162463074`*^9, 
  3.746429344903001*^9}},ExpressionUUID->"fb7de189-4466-460b-be79-\
d06e4a10ff73"],

Cell[BoxData[
 RowBox[{"(*", 
  RowBox[{"your", " ", "code", " ", "goes", " ", "here"}], "*)"}]], "Input",
 CellChangeTimes->{{3.7464293472828875`*^9, 3.7464293523821745`*^9}, 
   3.7464294041872115`*^9},ExpressionUUID->"848b2c42-6cbd-4da7-afa7-\
ed965622f01a"],

Cell["Make a bar chart of the sequence 1,2,3,...,9,10,9,8,7,...,1", "CodeText",
 CellChangeTimes->{{3.7464293609252205`*^9, 
  3.746429400072793*^9}},ExpressionUUID->"deccc495-f0a9-4528-8c0a-\
9a3162ea7f98"],

Cell[BoxData[
 RowBox[{"(*", 
  RowBox[{"your", " ", "code", " ", "goes", " ", "here"}], "*)"}]], "Input",
 CellChangeTimes->{{3.7464294154155984`*^9, 
  3.746429421210305*^9}},ExpressionUUID->"e208c602-1ea8-469f-b4db-\
bb5f0a07074c"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Displaying functions:", "Subsubsection",
 CellChangeTimes->{{3.7464295087504206`*^9, 
  3.746429514035207*^9}},ExpressionUUID->"048f5e93-563c-45c2-a2c9-\
3c4b03c2c269"],

Cell["\<\
You can plot not only lists, but functions.
Lets define a new function that takes two inputs, x and a. 
a_: 1 sets the default of a to 1\
\>", "Text",
 CellChangeTimes->{{3.746429515661416*^9, 3.746429541717944*^9}, {
  3.7464295807374153`*^9, 
  3.74642961708809*^9}},ExpressionUUID->"18d3ad72-6543-4d5b-9262-\
1eb6cde6ac9d"],

Cell["Define g[x,a]:", "CodeText",
 CellChangeTimes->{{3.746429663384227*^9, 3.7464296811373587`*^9}, {
  3.746429711906226*^9, 
  3.746429716077606*^9}},ExpressionUUID->"a863b29e-5836-4a20-9628-\
0e28d6b43f4b"],

Cell[BoxData[
 RowBox[{
  RowBox[{"g", "[", 
   RowBox[{"x_", ",", 
    RowBox[{"a_:", "1"}]}], "]"}], ":=", " ", 
  RowBox[{
   RowBox[{"a", "*", 
    RowBox[{"x", "^", "2"}]}], " ", "-", "1"}]}]], "Input",
 CellChangeTimes->{{3.7464295476283407`*^9, 3.7464295739461517`*^9}, {
  3.7464296217932205`*^9, 3.7464296461358547`*^9}},
 CellLabel->"In[1]:=",ExpressionUUID->"8f55a5a2-cd2c-473e-b862-5239577ec1f9"],

Cell["Plot g[x] with a as the default 1.", "CodeText",
 CellChangeTimes->{{3.746429727422929*^9, 
  3.746429758063203*^9}},ExpressionUUID->"dff31419-0f50-4478-9714-\
8ec852062ec2"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{"g", "[", "x", "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", 
     RowBox[{"-", "5"}], ",", "5"}], "}"}], ",", 
   RowBox[{"AxesLabel", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"\"\<x\>\"", ",", "\"\<y\>\""}], "}"}]}]}], "]"}]], "Input",
 CellChangeTimes->{{3.7464296547918015`*^9, 3.7464296563192153`*^9}, {
  3.74642968677094*^9, 3.7464297016049137`*^9}, {3.7464298041073484`*^9, 
  3.74642984861142*^9}},
 CellLabel->"In[67]:=",ExpressionUUID->"bc22a21a-7df8-4766-a34d-cbf9c2aa6842"],

Cell[BoxData[
 GraphicsBox[{{{}, {}, 
    TagBox[
     {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], Opacity[
      1.], LineBox[CompressedData["
1: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
       "]]},
     Annotation[#, "Charting`Private`Tag$21998#1"]& ]}, {}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{
    FormBox["\"x\"", TraditionalForm], 
    FormBox["\"y\"", TraditionalForm]},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, 
     Charting`ScaledFrameTicks[{Identity, Identity}]}, {Automatic, 
     Charting`ScaledFrameTicks[{Identity, Identity}]}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{
   "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{-5, 5}, {-0.9999994076417575, 23.999997959183716`}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{
  3.746429702625848*^9, {3.746429819025626*^9, 3.7464298501065893`*^9}},
 CellLabel->"Out[67]=",ExpressionUUID->"95a55d84-a090-4371-82df-29372dcb8471"]
}, Open  ]],

Cell[TextData[{
 "You may notice a third input in the function. Axislabel",
 Cell[BoxData[
  FormBox[
   RowBox[{"\[Rule]", " "}], TraditionalForm]],
  FormatType->"TraditionalForm",ExpressionUUID->
  "867fce5c-a814-4b85-a15e-6aaf083aba07"],
 "{\[OpenCurlyDoubleQuote]x\[CloseCurlyDoubleQuote],\[CloseCurlyDoubleQuote]y\
\[CloseCurlyDoubleQuote]}  is an option for the ",
 StyleBox["Plot",
  FontWeight->"Bold"],
 " function that specifies the labels of the axes. There are a lot of options \
like setting a heading, colors, background, etc., but more on that later.\n\n\
We can also change both x and a and create a 3D plot."
}], "Text",
 CellChangeTimes->{{3.746429766822039*^9, 3.7464298013155236`*^9}, {
  3.746429855394966*^9, 3.7464298970698605`*^9}, {3.746429992376954*^9, 
  3.7464300824961405`*^9}},ExpressionUUID->"08b93728-b7a0-42be-883b-\
534ca7df6f78"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot3D", "[", 
  RowBox[{
   RowBox[{"g", "[", 
    RowBox[{"x", ",", "a"}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", 
     RowBox[{"-", "5"}], ",", "5"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"a", ",", 
     RowBox[{"-", "5"}], ",", "5"}], "}"}], ",", 
   RowBox[{"AxesLabel", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"\"\<x\>\"", ",", "\"\<a\>\"", ",", "\"\<g[x,a]\>\""}], "}"}]}], 
   ",", 
   RowBox[{"PlotRange", "\[Rule]", " ", "All"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.746430086752118*^9, 3.746430186824532*^9}},
 CellLabel->"In[70]:=",ExpressionUUID->"a93da361-1708-46f5-9d9c-13203685cfb4"],

Cell[BoxData[
 Graphics3DBox[GraphicsComplex3DBox[CompressedData["
1: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
+P4V84yP0599nP7g4/Dg2RPx2+W9r2CV+pv3vow3xj/x2vW3DGmyvGsR8wPA
E5Ydu7Pz+ewR+g/7jieqlN92OJTB5hHi9geVX4Qe8PWK86OHfUpe7WfRQzw/
g/KL0AP+guL/6GFf00z7U/of8+clzdvg8JTzq7Rz81SbJ8Ff1bpDfwUvI3+M
/SfPn/3M+EnfhDNbvI5+fa/8Ot4ferLqufiB6HlPeli34H+f3ovd/xSepPfC
83gvb+q9WHxP/bbR36Fhm/PE8krB33H5vVdtfmCf9bPiEuDss75S3IBxCq8v
fXZt29bkCzb/gP/Pwxkv1eTP0M95D/Rz9IOf0LrP+QQ8zVS+NHFz8HHKz+G9
MB5XKN7Ic+kn/nPh9ZrWU+yHj4Ja7+iX9N/nlRfKeQD4IZ1H895ZF0Yrros9
4NjDc5kfmmp9QZ5+6svT77J+EJ0/4QX+St+MnnvSr8Cf0bmP7U+0f7wyOxon
sfij4gZTNkTjxujnPOiMzkPRD75G50ToYR/6TotonATc4g8ro3Fmb1wE0XER
u58M3mb49o/mH7poeti3bhve9N0mqZtD3rwXrJceb94LMkuPxfelJ7/0GA+a
X5dcu9n1+Zd22rkb+IVPX9pda8FOP+4RHPT8AeT3Xo3q8cZpMPmzqB7vuZEe
GtfecyM/aFyD00+ekT8AD6wnDV0+ZFHzt9DTXvMY8py73S2/GnnmjQuLnlm0
pnAek7e6HzqPQ5755I5yC2v0fj/R5O2+nfxS5OG/8Zk1Q98Zn9Hycdm//Kr7
IOD4iQVdP68WoR8zDxy69MDhC9kqRE7Nzrkj9fFYPZwTn5Tb0HFz90hnrU/w
s/+7bY3mnetqOPK/fT78i9U7OkVWb8u/JjU1q8mvSv9E0tN12xqOfP2Hll9L
XtxScgkmPyItj/ThwHDkK6i+RHS9TLH1/5X931TIVaWW4civc/Nz9UhdtRP5
7v1GDD04u7Thdh8x65nJj9UtqTzS/SZ/t5MnXrjE6iBl1DxTKypv/eE5pydz
pLbmL/CyOk/vFLUzFveT/eDI/yD7ayuOYfkG4gcc+dvFz6oozyYfFv/gyNcV
/5007yD/j94vOPK/6v2qn5j8mQzrpn1Yu6fhfv+hX1meb2KprZGBsf4DvvNw
taMd1sf6idX5+PP0pnNlm1l/AH9UecK8d/AL1+fe0fBypQjvBfynL0bPzrMz
wd4L+DjlJ8M/+DnpgWfwR/Rc+ARfLDvhDXyH2gU/4G+KB/hhnXzln9rfPnCi
vfEDvrfE+ZK/L29h/IB3nN2hU9cmjY0f8B9VJwR+wPu+9lm19WvLGj/gWV0e
fnrjBzy/868KGj/gvaUHfiwvWM+FH/B2shN+/HbBD/gs8QA/7NdPpfWrPC2N
H/Ataf2zR8j4Ab8jrZ9XrWv8gFdWPjM8gL/oxu/NMDyA51d+NTyAH7l7Wc/7
KpUyHsDLSz88gDeQPfAAvln2wwP4abUXHizPNI2f4Y2MB/D9aXw2qGM8gHdx
/Fc1HuLqw+wuYzyAZ9O9DHgA/1H5z/AA/o97bmHjAbyk9NPeePk61l6/XbQX
v2aew6tYe8GPOD1lrb3gldqV/ah8iZLW3vg6LQWsveBPyT+nveCDdA+O9oIf
cs+9xdoLniT9vHfwirIHHuL1lDUe/PbCA35uf607nePOt7YltxYOD+A14/bL
/z4vgAdw6r3AA3hW4fAAnjdO/t/xdnjw7ekUd+4Ssx8e/PbCA/7pk46fCgE8
gO9wfJYO4AG8iev/hQN4AK+kOD88gKco3gIP4Nw3hAfwT0KHmi4ecyUED+Dl
pR8ewBvJHngA3y774cFvLzwQt37W4Q2NB/BdTk8t4wG8hXtuReMBvIby7uDB
6q4oDxMewCcrfw8ewP9wz80dwIPlM0s/PIA3kz3wEK+nlvEA/pzaCw/EuY+4
ebKF8QD+k5tXGxsP4LXdPFzbeABPUv4zPIBPeTQ1d5u5ycaD1TlRPj88gK93
zy1qPMTLVzAewGvJHniI19PYeAA/qvbCA/v+F9262c54AN/j1tnmxgN4G8f/
HcaDxQ9Uxwb/AbyXW/dLB/jP4BXdPjHReAPvv+Sutye+8WMI3sCnKZ8T3sDv
ln54A18le+ANvJXshzfwP9VeePP5gTfyA+em+WP7uxhv4Nuc/9bGeAP/zPl7
TY038LHK94Y38LPOnyxnvIG/OfBg+TJL8hlv4I1eevX9FyJ/GW/go3V/Ad7A
T0g/vMXL1zHewBfJfngD36L2wpvPD7yxP3X9sGt34w38Z7df6Gi8gUf3HS2M
N/CyqucDb+DP3Pdk60/LVzHewEvm2ZtyaXhh4w08qXTk+sk/jhhv4KWVJwxv
4E9IP7zFyzc03sBry354A9+g9sIb+DHxA2/EPU6n7Zu+ujvw9teB21+P7hp4
++gguo9uE3j75WCXu3/RJPD2xUF0X1wj8Pa/wccrd23ZUOE24w38DYefNd6s
HpjkvX1r8JL0e/vTYIfs8fahQVj2e/vN4B+1F374TRq/p1Fy87vM31PcI/JO
to2n2jXuYv5e+yq5mu2umzcysdT/7zzvb23+HvHh+8++98dDoZDtgz5em2vx
spN5IwVGpBQt/m5N8wN57uTJ323P+Hcm2wfx3FPDmt7xeL6S5gfy3CYfTarZ
umQN8wPt/tnTb9xy5Epj8wN57qTOk3bUmdra/MDfFV8qn/37D5eWjO0Hzw0u
3CGpbaLtx+GB37bt+xUoObx9bD84p0jS7mU5I2deulS8xZ/NjYdsOnf4KnLH
V02/aGg81Lo/8WabvLkj7VZkKTAoa3Xj4ayeW/ZQlh9Ozontl2VvpMoHxbpu
mlssth/Ucw8fSbzn1lxVjIfseu6hHrUOLx/WwHioredeSF766YNXmxsPAxQ3
69mh8fTTNTuaPzzjRuKwpJ9yR967Pqb/6GaxeELWBflOtJmZJVIqNO/54tk7
Gi+DdA7S7YnSHRf2aRXbD+r3ry6Pl/o1OWT8lFDcuqnqycBDFun/rWP3JTu6
xPbF90v/pLFfVXove6HYflD6u6Y9d08546Gk9Nct+8uq5/+sbTz8L1PBectG
ZLd4DjzsUjxwwJPpvp+Q1MZ4qFe30NgRu3NEuqTFo7Z1MR6Ku/6ZPrLm5OTI
0ZuxffFjOncoOnRh3Y+vBdb+aDwzITJv4g+nl62s78XfEiLXVN8GHm6T/mj/
j+2LJ0r/L807Zh47Ka/xgP4Kaf15b2njoa70P3Xx/nl9OlU3HmY1y9No97KM
kTXVQksXb21gPJzR+cCDyT9cSCjY3HjoOCZv/plJmSMp0389sGRjO+NhiHsv
V8J//rG919iOTYyH0jo3eSxtfjhQz3iIxl2vh3styLLynUgNL750I/yA7k3D
w2Dpb9xwV4Gu02P74pLSH32/OYwH9A9Me48LinlxpBvhgdJPe2/RedARN45s
/6txkS7Sq2Pk0mvnjYfI7e65R8NVd35Wu8Bb1a29c3WOM3VfjzZzP6hk7Y3q
Px2uPG9O4QLTb7d2lZKeF7ONOVP6cmz/+6r0bFuTMq5aJIO1Cz1jLzxV+aWn
83hxyLPhT3SvnHbV0/pztefs9dXP1bB2Rd/vxfCDFQbnuVa9obXrT+enLQvf
4s4Hs1i7VujcsLarl5LT2rXOPXez6gXltHatkJ49O3P8fGFIbD+7VHpaK18d
+xfrfKCY6ttgT1Xp69mjRbVuT99u63Wyzis2rb48a2+TIrZev+R4+zM0+Xzf
5Tl/zWbr9Yc6x6iq+jDYyW+vLm3bv/j14XC837Iv1FX55NgTPce7GBrqeKtv
9tTU/3f6i/Kv3HegmtkTPf86Fxo09Lc8ox5K8vyu2P1ZWwel/9yei+kG1Nxj
9vC7X/lj2BM9n0oX9HT9s5nZk1XnLNF1oaHZQz9amv3TvkXXVDd7ZiuPZaDu
7WKP+n9wf92lO7qdX2v2ZJf+pW5dS2/+Cb+t09bHEwXNP/H1Y3+H6HwSROeT
tmb/aZ2XDnfzT7OY/x+dr4K1br6qZ/bznJzHf6r/3bzKZj/6g/k5P2l0I9l4
RH++0tlT3/o1u9n/ivS/OeLElulPljT7+T2jOjDYXze6LgRuXege27/8oXNJ
N/8ktTb7J0XXnWCn/DRvHQzqu3mspvmT+v+C7m5dK2Pt0noUdB62N/zjo39Y
u7R+BSuankhKuZDH2sVzZ9ap8Ob1mbdbe3huSHVmmDe0zgZd3Dre0vxqrctB
GbfudzAe5CcE76b5CavvNB7kVwS9nF/RwXiQ/xNcdH5Is8Dzl4Kjzm+pZzzI
zwmOuf4ciw/w3KdfW1kx2HnQeOC5w0bf2a7SEwWNB5774thcFTfkrmw8ZNVz
l7j+XN/850V67inn1zUzfvh1/Xy47WcD+W+2j4CfLH1zF525IF/Q5cWk1PEN
YvsOzlUrpq3X73Qxfj6J+qvB485fbRV4fnXwpvNv7zB+OkT94WBap6v3vxRU
NX6y6rmnL7/wyLwLp4yfP/Tc4u+veOiePMWMH56bz/nn1QPPrw6i/nxj40d+
eDDe+f+tjBe7R5Bv3p5XJ3a2dk2R3xV5M7FzytzYOWMZ+WnN5QfSLvXbyGzX
bysYvk76ym65OrL86XK2XnSRf1KicGLLgcfa2fp1Xv7MI+n7tg03bR4755L/
0+S+fsMP1Gpo9jTQ7w35YxZPkPx8Nz8kGf6n/K5q8rvY9+FHJeaZnrpxcAHD
J5MHJP8N+wfL32hb6OoXtfK2MPvzyj+p0a3cyEajG5n9PfX8G8+933BjnVpm
/3z5OQ/Kz8FOftu5+bm44QfkL42Uv4SdOfTce/fetuudnbkNLy+/K5DfRb/K
L/k+kqddl+RvHKy8oXHWsQ2tXY2k79F3Z7a91r+mtWtadN0MP+zWzfLWrvXy
c6hDiP2PSb5Ymr89Mb/ht8pfmix/Cfv5vak8ef7+QH7XHvld2N8sOp7Co5wf
UsHs36Q8iIn7rrcd9XZJs39Z1A8J75zw+b1PH8pv9m+Un1NXfg52zpH8qlGV
kn7ZktHwg/KvXnL6b5rdq/Xc3bp/B35O/lV3+Vecm0d//7G6MYz3b/TcjXou
4x07G8hOxvvbkt+gdoHvkZ1L5QcyD6yRnSPFD/gx2dlH/iR8DlN+yq7UB6++
XfiG7evmR/WHfpuU+nHL1jdC8PmU/LrM8uvg7XvJ33u0af/rWZdZv39I/uHK
1Z/NqN5+fwje3tNzx+keH/hi+YEfyA+M53NJcqr777TxiZ31j0efC5/YefmV
qJ3w9rXkU9Uu8Edl5wD5sfD2huysnG644wd8iexcLn+Y9Sgqvyy0+LcVm1a9
dhK/MSij9aGN/Gra+4ryXD4qe+qbx9LvMH4qa3zvkP/JeJ8q+cGSh4cr1dy4
C+1w63XMf1omv/d1+b20N2N0nIZud/ujUoaPlv/cR/4z7Z2h5453+6xyhmPn
EDefVDceovk4R0M9lvQeWrGh+W/BIfnbW9y8VN94KK48t4c7zH2i0PLLxkN6
+b1L5PfCQ0HJ95E8PGyJzquhXm5ezWc8vCB/uLf8Ydq7U/IL2+Sa1HRqNcPb
SN9ZN8/XsPZi5zi3v65jeAbZWdqtF3ZeI7/uSugPt09vZHhf+fmBW3eaW7se
Uf7eDOdvZDQ/YWt0vQva5p/YcdCq26xd1fV7RH4y9u+Q/BwX96hr+Evyt2u5
9be+2T9Bz62+pfuILhdDhp+Q3z7SrePNzP6ov5E++MHFYexcJmgj/7+Q8wfa
xuLPev6tzn8oY/YXkz98h/xh7OR3l4tfxfyfCfKrx9UrNv9ajZDv70Wcv7f8
7ogX7410VF4TdmaSfGfJ2z6deIPisfRD4nWjnH9b3PBumkdrK04ITlwr7PYF
RQwfonjaE4qn2b5D+Q/HlF9BXhb3tD77fNlXo9uli8SvR+kjhZSngTz4HC+v
44LnFzGfIp/grVP4aW/L7wLH/+kifwb+yce7NcPS0+PmNbX1BXzH8jG9b6/U
0NZr8EVz7ppU77Gatl6DD/X8KPA9aec1bW4zHuLrKOY0efIrDihPA36Q3+Ly
o67buhP/faXsxg/y8IMe5HMpb4T+hvzP0o8e5DN4PON3lZQfxbjw/Ulw3x+D
f/Jkn83QaPlLz9Qx/q1edLa/6+4vUt34B984rdarza6VNf7Bv/T8PfATrn/m
M/7Bi7h+mMnkyes4qrwReEO+fcbx4cbFLhv/yFOHGd6Qz+Dxj/yzymNBHhy/
y87v5F+NSejSYWX/EsYP+FP3VWj7ZOnCxo/VX/n00YGVb+QxfsCreP4k+NWX
J8w4fmsG4wf8Qdeuq2Y/+Noe/zs2tO8548HPP6FdVifQ4wF5+LHzQcmvkf54
Pyr2/SOLv0l+mOy0eVv4FbXLzg2FV/L8VfBXxJudG3o8W5xf7egvPx+84S3R
eGYHxUV5j43kX328Mc6/svsNzdz7LWT7ffCB7rm5bV8Mfr7n6XU9ryTYfh+8
mOffgtd//Jcn7j28yfwT8FkT12176aXd5vdmlX91TP4Y+MPyr8q6dTartR89
k7tlqlS5+XHrD+TDXFAeDu8Refxh9CB/Wfk8lhcq+anSjx7kb0qP5YtK/nW1
y9YF4rriweL8wgvPjPe3wc+JZ8sXFT5A78XyRYU313vkveDHviU/Fhy/rp/8
OnjeJb9ukPxA8FZqRzPFS20fqnybJ5XnAz/kp6d4PCO/XflCFofnnsHlXFOf
/Gmf8Yz8DY9nq3PeZkekwsJD5seC/+DyYTKbvwT+rufPg69y83lp4xk8Ke/K
EetqVTaewSe79aKW8fO7/Ma75GeCvyi/8XXFaeHB6ofXr7N4+dubrN/iT86T
Hwt+3IsDww96rosfizcKPyT9yJMXdM3jE/l9h7KM+/XFWHwcfLPzHwoYnzO8
/gOf4Aucf1Ld2wfdCP3i/Jn6xid4Qef/BMaP1V8/tqjKZ/Pes34FftVrL3iX
o1F52tVf8eFzR4bc3aJATtsvtJNdFZ3/mc/84ROyq1SaH/tD98DL8w8WK/8B
+/lNkrznJwedFUf18uGDM8rr8PI9IqeVJ097yRPI4q1f3BOs2eeLZ1tlyWTy
4Jk9ee5dPeTuv2cwefBM3rqJ/+zfXwD/WH615bF4fgL9n3lysfIewRnXfyoP
MD4ekj74RXlx9H/wssqjo13g58ZF8+6wn3stl71+Al6/1jtXD7Tabv2K+1YX
PXnw98auLVv0tgMmT5z5vDe/ca9hlu53IA/Oe7F1UHn+E3W/wNY14Zt1H8HW
L+GZPD1x3+2tX9D0gOdU3j567Du8Xj+x73kpHw958Ctee+37WcpDQx78kidP
vlMr5V8hD37B4/+A4nWPhz9qXfqvszZfET+8W/FD5B9WPOqt26a2OPL2MZMn
PrZV8THmt5clf0pxNvAk6Ys0u33WhVXn7PwVP6RJ8tKrzz+xz/QTz1mtuBN6
OFetJr8F/LDiOdsyJM+c/ESil1cWO28Ff1fjpbyXf0tcYsqm4H+zPnjN7Byv
/f5Pv436Nc/7Ww2voXOllj89VePgyX9CvBfyJS6NbXNw3+F0sX6o/ezHU6+V
bV8lnY3rq4qTT0qLb6wqaH57E/1mUN059HCO/8wzqx9/4Msr1h+e0D7u+Ltl
Exo2uWx4DeUbzFK+Qfy8dzpc9UzOEV2GXzK/sY3+fZqLp2Uze7YornvQiz9z
vt9e/Sc+brA/vOPu3r0a3B7Dlyue3ODh8J4cS84Zjr+9T/kD8fu1zeH/qd/C
f2v9++/SD/669NeRfvoV9h+S/fH3TfaFdwinX9WX/tHiAX5q6zn71J8tPqM4
7TNePJm8gt4aLxYH0D6iTacjQwtWjY3reYoP55q6ZNR3zU8YTvz2XuUtgL+i
cfeqxik8FJX+TtIPniz92aXfzk9l/0zZD06cfLRw9CQqvnrqRJESK/Ic8ub5
06GFJf65vV+5/baOfKh5D/8TnHHp46s0z8d/P3dJ8gTqA3jzLXlrH33wefbc
4zLF7hUq/+2epfd1mPBdRsMvKu+uivLubJ5Xft3EP+6a+mS3jDbPh//DnkT5
CT4+V+uLj2fz5G28KN+sU+KNy1eqxuzh/DRd0cUNBozNYHgO5cttU76cxd+0
vyzd9L2RI3LE/JPZsieDZw/nsD6+WOuaj5f4D/mF/yHPuaofH+iqefKC5knL
x9Y8+b7mSdpFXHeK8jps3dS8vXdLdN7mudy/9/vVwv/oh8SBb3jrZoLyH7b8
2SLTg4lrbf4nT+N01ryPPNh7kz13htbr655+8i58fPZ/yGeSv+TvR04q36Bc
jVDhkeE/zR7yJXYOujtT3nb7zJ7v5Q9c8/STd+Hj4f+Q17j7F079B7+fU2fD
x6mb4fcT7vX7PHAf339ubfn5vv7HvPkBnHviPs59cN8e6iX4eETx6vQeTrzU
xxcp7urjxFF9/GP5+alee4k/+Pgn8mduejhxCR8Py89P8XDOcXyc++v+eKF+
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
PjRB+/H4fMXzoXHad7NugpcKous+6yZ4WH7Cag/fKZx1H75rKA5p90uFkzeL
f8W4GNK4yANztp63+Rn5ytKDvNVv3pr7jVwvnjN/zOriC+dcHryU/ATmDfrV
O28tbn6j9BmbN8BPz7iRftaeMzZvgL8teeYNW8clH58vej7URfEK/Bbwe+RH
5fDw5sKp+2Z1+/7KfOOPFqfC1Iey+hzK06A+FHiS5OPzBlNC0bzBzAH7U/Pr
lM/A/APeSPh7Hl5bOPeE0f+PzkG4Jww+YnP3FaNST4WpowE+Vjh16Gx/pHUT
v8jOWXRvPd6fTwm1n/5rjc09j9h8GF+PJDZPxtdLPhPOQz0szfOHS0Xz2bx8
v8gtujc9gXp5fMdG96Of1D6ddeFRxZ/RAz5e++WlmifBc2m95vyI9XeX8q/Q
A35A++sXZY/tF3ROAW/gOXV/3Or469/vS1x6oc0d2az+vsWlNT+THwL+neZn
6kChp5vyfDjHt3qB0u/lW0Yqi8935aeBjxefK735pI7mgde8+aGMh/Pee2s+
4Z4w7z2TzsHJzwFfrv0F9/Mt30b5OfH54edDyxRXZJ8CPlX7oDMePlo4/RCc
fsi9bvveguJL3Ou2e6KKRy3QuTzrfpLiQszb4CdbRv2lGvF5m0GbFn3Tn3gp
NbQ8nv/glsPR76HQf8Df1z3cV+L7fzBF322J33enhKprPLK/5v3Wcnmwhe0c
h/5fSXEMTz6o6eRz23dBwMPhfE1XX0oJsd8BH1iqWOu6x7KRX2jnPty3pS6k
fXdIeSncG6c/dHbnm5Ui1M8F/+vSA4cvZKtg39nF/tZp+UJN7pT9sXFdUOOa
7w6CV9B3H/g+LuP0ibR8pM1d7Du14HNd/lIb+04heETnlRO8vKN/lHeUzcs7
Kqm8oxJe3lE35R2xrwFvofPB2V78jXtD8EB//tid+9czP9DulchPoL30k1Yu
f7JZQHvB27hzwwYB7QUvr3N56j4QN3Dfj0toZ9/TBY/meTaz78uCR/P96lu9
UfCXFV+aHXe+kBD8rjg/eVP2naW0/NVcXe17veDRfNc29v1aO+92+bGBfc/V
4l0un7aW3Q8H76HvCZIvxLjel3aOOfQu+x6wfcfJ5QN3su/jgkfzh1vYvAT+
qcs3bmDfVQV/y+UnV9S4u2r7r5767rzyKi1fbo7La6pt3yO0fZzLr25q3ydm
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
VOShipH/A/EKqUs=
   "], {{
     {RGBColor[0.880722, 0.611041, 0.142051], EdgeForm[None], Specularity[
       GrayLevel[1], 3], 
      StyleBox[GraphicsGroup3DBox[
        TagBox[{Polygon3DBox[CompressedData["
1:eJxFnAfcV+P7x79nn6OQmaRoKLJXGRlZGZERUlJSWSWyRwgZGaFhRUlLSWZG
SvYqorI3mQlRtv6f9/O5f6//6/Xcz3Wd+3uf+6z7XPNznWa9Bx5xelyr1Z7M
a7VEdGfRtUQf18a7aluIbyP6jlob8ZuLLlbbXPxmou+pbSl+C9Fe2ndv8bWi
Vntd243FNhbdO6rVvhe/o9pr2t5QtJHonjrwM/qtrdosbWfqX0P0KbVUfH3R
npqzg/iPxL+h8fPjuulre6i/keh3ornabPX/pAnmaNxq6l9f9Ak1rq0UXaS2
mfjWovPVmojfWHR5Was9JP55zdFcB31Y/HD1txD/iPibxF+ped/WObYUfTx3
/5Y6icsLj39BfeM1zyzx88V/qH3rafxJohM15hT136z+eZprI/FNRI/Q9nbi
F3C+4p/Xia7Q/K1FX9C+e6p1Uf8OGvOX6JFq24v/k7H6bQ+1TXluiZ/bavr3
jFo98RuIzlWrL35D7qHO4SSuS/su0jmV2re36Ktqkfjuoq9ww8V3E31ZbZU2
jxXtpX1P5j5o34XaLjTmBNFjdK5ni39b/FHiB4lfIP4wjT9c4y/U+MHqf0n9
G4lOVTtG1zZJ9HCNOUJjLtKYUn2na0yidpz6e6n/GvVfr/4z1JeqvaJ9jhV9
XPNPF3+8fpsmuobGdVf/k+p/Ude5jvZdXfQltXXFryn6gtra4uuJlho/V/su
177Par/d1NbXb8/qt9VFNxJtrt+fU397tZm5n+8WOq+91b+r+nZRezXx2mso
eqx+66rjj6xqtZVsq7+T6POJ36NKdIVaV/EH86A0z4ua4wexH2i/C8W/L3p7
6TGX6ZhPqD0qfivNfY/67xf/jPqG6bwXaXwr0U6a5x7xzdXGqjVTu1Hj3tcx
9uA9Fr1a+/RkDWiOlzS+v8acznG1/73cc9FMraX4K3UOd2jM7Wo3abuetodp
7Bma535tj1O7S9sPa85pyAGd21XijxffRfNP1e+t1UZqO9ecm4ofqjmmacyd
6muu8YX6W6n/KtaYjjNA/MDwvHnuG2meZZHXwxk1P3vWwJni30zdd4TmuFr7
nqz+PtxT7TOGdVZ5fbPOl6iv0u/nq52r7XdTr+FjdC2Hat/p6h+v1jXzPEeq
/1/tc7S2H9Q8nUUHqn++9rtWc56gfQ9T3xXijxPfTdcyVHwP8d1Zs5rzJI0/
UduHJ6ZdNP5F7d8bmSf+afG/c/6i63KvxV/MvdU8E5GlmmeM5mjKfdP2G9rn
RvHLNHYdjflUx1hbNGXN6Pc+2vcm9Q1Uu0zjPlJ/fdGTRR/LLdM2EL+N2nPi
79L4rcU/K36M+DV1nfPFf6yxW6ot1zxtRFEGA9Q20FztRN/hvVP7Wuf3tsZ/
oTETdK9eYx2Jv0L9DcTvIv4gjb9FYxup/aFjbSR6Idet1lj8BaLfcT08d9ET
eZbivxX/PfeF5y36p1oT8ReJfqoxD4hfXXSSjjFax2qmY96lvo1ZS9qeJrqZ
2ijxpxR+5mM1dh2dzxD1r6nWV/uPFF2hOU/TmPM15h6erfqHcn3qP1X956l/
nPo/1vbq6j9FtF/hNXiH+k/RnJeqfw3kh/o76vcbdS93F3+A+OHi9xR/oPib
xF+ne9VW+14vekFm2b6h6Cep5ziNa0x9jgNEe2Y+5y9S66ydte8OoudklvuN
RD8qrQvQCdvpWNuy7sTvWPjd747eEL+7+ON4vprrTfGTNU9b9e8l/nj1P5NZ
FjUW3b6wPkIv3Sh+P/E/iLbiXeWeaN9Nxb/EvRXfEpkr/m50mvb5hjUj+pza
g+ofon2baMxT4kdpzLPqnyH+UuSGjveWjttCdAuNeUP9kxLr2IfUZmt7J43b
U7SH9musMU+IH5FYT7O2b1Nfa/QWzxHdjj4TP57zEf+k+JHi5+U+hyboFB1v
IXpTtIW2f9A5b5xbpj6qNg+Zq30XiE7Rvm8mvrdbYXuobYPeFx2hfU7lnHWO
8zTH4MhrpY+2L1L/faK9C7+nU0TXjK0fc7UmOvYFou/pOO+orSa+H+9CbH2K
fn1d/LmR9fQM/faL5jlU9HXt20d9z3PP1DLxvVLLH3Trv8hS0aGx9eLi1HKw
T2qZid5Ejx6ZWcbOY93pWt5X/+qiV6JPNUdXnfNzus5NxG+CLZbb9opz67Vm
vIPYLVrf64nfnfcisy23vuivpe2rvdU/VPwG4q8SvVnz7i/+BPVfo+3W4q8V
HRD0cUPRUyLbHqepvZ7aLugpemZmvbyB6GvajsX34J2NbLf0F/lNc7UUPUDz
nxbZthkQngfPpZ5oI+0zE3tM5/+5xr0lfm3N+VVmPboKPaNxV4g+r+s7S/xY
jZkn+lFmnRtj+2h7nPrni66lsZPFX4mtIX6K+KHYI+Lv49rFX1h4/T/Ceiws
/6eK/7O0fkRPnqf+67XPuMo6Yqr6r9a+F6j/AfHvcB2F369H0XWZdVl90XPV
P0z7jNW+ZWZdfI22z8GGQH+Kdihsn/fXvp8F2bKj6D7q30f8APV/oe1dxbcV
/VJtN/HtRKdrrp/EHyT6ubZ34R1lDWC7iL9Q/I9qB/HcRQ/BDtRvt+h8Zov+
gbwSPVD9ndFD6j9Y/GHibxb/rM75aJ3zY9qeoXtyoMYP0vksTcx3EF2p/gPE
n5lbl/Hs7uO44hui60XvLG23TEQGavtd8Q/wrDPrstaiW+u3n7SeW7H2c8uN
NXQOO2r8e+JnaPx24heLv1/89ryr4qdjt2u/mZxnZJ35i9qH+m1XjflMdCb3
Bpku/jF8HfGPi78lsa2PjN2ae6/+T3iO4tuJ/5i1IX538S3Et0QeYnPoOF+l
tsdYMxepv7/u203iZ4t+ruN/FttWOAmfhHlE38xsF3yu/TaMrePWxj5gbXNu
okv12/rqO1v0B7X1xA/incPu0ZjTdaxHMtsC56tvoPYZwj3WvXons67/Fdmc
2WZ4WPTv1Hr5UtEBGn+z5nlG9K/Uts1gZJLabeq/QPOfrt9uEf+s6Eva/wh0
AOsmtww4Qf03iu8n/ivebx3nfY3ZXa3S9ofYGhpzJ/NqTKaxV5ces1L9b2n8
Xmo7a3uY+j8S/VP9zdT3XmQ7//fCvsBy7Xt3apm2VljDK8V3wi5Q/yXivxRt
pjYXe0Bjvlc7WvyB+Ika11T8Ms0zBv0uvqn6/yrsr/3NuktsNx6aWIehy27E
Nyl9PivQ24nlJO/Jj9o+SP23iH6q/o7q34Pfdf77qX9f1nrq9/dJ3b/2iXX3
XGyMMA/zTU49dg7PqLB/uZqO+Zfm+VNtDutAdA+1nSLT2aI7Ro4F4MsUoq1i
33P2vwybIbJOH5da9rbR/D8n9gs6iy5LbDMfIvqd2lHIZ/xxzXNOuIYPE9sk
uyb28zuI3w25lNrO2Vb8Ko37JLLfhN21lPGiX/GcxO8jenDqfceznjX2cLWf
a7bHlnHfRJfgA4jfV/S6wnGJqLD99qP49qLf6LfDxO/P3Kll5gTRr7XdWfx+
3OPUvvlWut5rtM93tVpdYOLIyPoa//bWwjr5aNEbdK1d1fqxzhL7LkeIjiws
GzvzXur3y9HlkWXjCuQt77rab9w30cX6/QK1jhpzpeiBYfwQ0VTtKGwL0UsC
j3/6X9Dp16nvWrW+6n+HOcI8o3k/OU9d01Jtn8A7ou0fRU+M/Ns/2I3ib9Ca
2Tz2e8T2+HDP98VmL+3PNxWdrpexCzIR31B8IX4Oa1zzbKMx7cXvUFo27Sg6
Wf0XaJ6RvIOVde2l6v8kt334vvhrU/uX5+m+3RnZl0R2rJlax12q/jal7f4t
RK9W/wj1n8uzTu0fnJ9YV+IvtC6sczeP7H9Nqmyj76Z9r6/8vj0tfoJ+O0dj
ti8du+B+cM+IdXCfRhX237GjHhQdon3XQMeJv0L8+tjK4scjmzR+fY2/Uv0N
safVv0T7dVaboGOMKXzPuYdjC/uVLcXfK/4s8duU9kcacO8Lx0ywhe5Ezxf2
W7l2dDrr8Pqg93kPruWc9Vs3HauH6Pmi54V3cJV+ayO6nvovFr915LjH5TrH
G7TvctHfCscZWop+qf0OURuFXBMdr7ZA/FjRu9VGRNYXm0T21y5J7df21z29
LLXfNkD8rZHjD+izYcEO4X3cQnN8inxTu1jjr1T/aYnfQ97H/ZHH+D6R4ySz
CuupxhxTvz2jMbdjd5U+l6fVP0pznql2pbbXLH3uc9Q/RXTLyPYczwo77brE
zwdb6/rEvjSy+gbxg1nDkWOAt6j/XvVfjj8ufrz4IeIncf8i245NiatEjomw
LjjOJVy7+g9Wu0r9G4leE9lPHqkxEzTmCo05S/3HxfaHG5S+X3N13Imsl7Bm
mogOi+xv/55Yb3YV/SOxXXys6H+l1wZr5GW1uyPHcP5NbX9uonX/SuEYD8+X
YOwYkWaiSzM/63Gi/xaOnayj+U7K7W8iM0fntrX7cp9zH/dE8b/q2H1rjrEs
K+x/3MZ6KG1Lvyb+B/12DLIOPze3PEfn/pZY73cR/amwT3OH6KuF41FtsBkK
v9ebiL5YWD5sLPp24efSSnRR4Rga4xcWvre8+3+Xji1gV69b2pZejM1Q+Dlu
ik7I/G6OFz0vt+44tPCavTes2+n6/f6w/p8N9kwT3tfE9g+xNZ7R6Mj2Gc/0
tsh22DmJZRQxsecL801Fz048DzE05Bry7UbsNZ3n8dhj+Nqp42bH4Cton4vF
1xftqPFdxN+nc344dTwW/7GsbF9h578bdEQXbX8U9AK+5Qup410Ha9/rc+up
HoV9WGTgIN6B3M/0eHRK7nhXc2x2tTuIKeg4sVov8Y+IvhL82bM1LtF2b/U/
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
2gM//I3oU6XtJc4BG6lVkBu/ad9Pc+OiP9CY+rnxG+BhwbVGxCwr49v/h4Hq
EvQIOpp45+Ag0wbmxlmB0SJHQuyB3O8emWMSYOHJL+NXkzdfW+2PyHleYtVx
iJHtldmuBP8OXoacBbmLtTT+98g55V0z29rg6NEDUdAXtaAb0Atg+zcnB1YZ
K76HxrYUf1TuawdXPrRwbBdsGljxJep/QmM758b9zhR/mPiNxT9WGmf+Rc0Y
xrlhHfLug2/n+I9ji+WuBXi49PpMEq9/cJLwYCX3yY0lA0fcNnfefyfRHXNj
O/dKjB++S+fcSOecaTtNXBtDbQrvI/4DOPZva8aLgZ8Dm3Gz9vm+NIZxp8p5
QfyQVfhGiXOaYK17hfwpuOjeiePE4LGXlsZCttW+P5XGKu4m/ufSeMb2lfFD
4A3AQR4V8Algp3cunJsBU7Z+7hqZa/X7FPHXiH9GcywrjVFtVxmvQl4Mf2VC
buzT7NJ2B/YHNtuCoBvQC+9m9n3Iid2svttix5GJOWGTIAcvKp03mw+OqXSe
gnwZGBjybugddBU89j9+E/NQY9KuMIYNLNs49Y2JbeeAj0GHXFwaQ0Oe7qTS
GB/8+eZhvrvCnJ1CP+PQP/cEHUfNETw5uBWRj8H8yFBkaUPdg8m5cadzNf9r
uTH/b2JH5Ma+gokGm01+ESzSL6UxzntVxt+A9wADPSM3JvkFfk+Mo/4v9fPg
uUSZ6x0n8x5rzKzcmO1XS+Ort4qM9wGzDS4IjNb03JjV50vXB1IXNkJjnlL/
JPEvc39y471fK103SJ3gKGLq6r9V/HOlMT0TasZ5z859bq+r/83c+ay3eFaJ
8aW3a8yC3Fimt9X/ivjHxM9D5ifGLTdV3+u56x0WqP/l3Pj2+dhrubHHb2CT
5p5zYemaH/Jl74m/LzdeGnzx4tw1HYu454mx0JtiL+SuGwJz/W7uepB3NOa9
3PUX74p/J3dtyGLsysqYTmTvZ7nrKT4sXSOJHm0S7F5q0v7KbHOCEfknxOKI
++wjugvvf2o7BBsV3MYfyPzE8h5dsGvlvN05pW0n6kOR3di9r4m/uXTuDLsI
+4jYBTU84N+mhnVVL9i3/xETrJzjJ16Ti9+5cs1Vw8L27UqNeU1921Su6ytZ
I5Wx8pn4rSvj4Av0RuW86Wbab9tQH1gVtmnmaP6fiblWxrjn6v+4NL6+IzVE
ag1SY5C+Ll1LehQ2Qukar6Mrx1SJixJD213b9VPX2aH3f1b/ZqJ9E9ue1I5N
DM+aa+lGbUNqjMex5AlS4yW6iz8nNSbkxMr4dd6R3pVrJ1jnfSrX5PC+HF45
rsR9PqxyTV0r8cdUIf5Vuh6jJfo6d9ySOAh24JEa0zd1vd4R4k9MjfE+oXLt
BO9vr8o1Fbx3PSvXWvAegRXeq+Y6q0M171bi/8hdX4AfAWb2jxAr37k05hvb
fdfStSforqmiHXPj7X8W7Ve5Zon38bjKOHhk8n65a17QWfuLby7+J9EelbHs
yPbjK9dCILt24J4kxmJtL/6/xLUn24n/NzHm59IqYIsL64WrasbOoIOG1oy1
2bxynUZcOC6HzgLbgn8B7v9u0QaV65y/xG9I7W9QOwg+Hxm+bm4sCjYsOewt
Ktd4pMSWKtf5oK/3rlzzvI3696lcN7htYX1KbBN8EJhJZDc4XvQjWDUwa+AS
V0a2fX4pjA3i3MDG7KbzuKMyzh/b5oXC9QvkbcAxdisduxtRGvNG/mbPzDoX
LB+YPuqGDlT/0sK1aeAMhhfGzoED7qDxCyvbcPVF365sTzzAs6tcu4UNQ2yc
OBQ+Gu8K+CUwEuBg8BWos/ikdI3mgZUx4vid1LGcrfm61fxeU5+CTcL8+Ed5
4uPim3yIjSLaMtjxyE+w6fis1Lpg/3+L7hNtU7mWJiksE5GNyHPs+WbYppXr
x6kXI699Vu76YmTFiMK2J/UB1MU8od8PYL7SdduHVK5RIve1gHehdJ1xl8r4
c2LG1FB3qFz3vnXhWidwjW8UxuvjB1PbfHnuGnZkF/KYWlRqUofkzrkjA6lR
wrePdJz9K9fOYUN+Ubqm/NDKdZ7Ei3fJ7CthD2Kn9q1cs4fe7JT7mwMrc9cR
4INTO0vdBL75LOLDQW9iD1BTwPv+XOZaAzDzTzGmcg4b2w8cHrlo8Dtg+Ikn
3J+6FoB4wrTUmH/wPNODLQSefTDvR+WY3ZmlbU1szr1T44HwB8A7vlw5HvFo
aYzl08TvKtfM/g/v003n3F77rhI9OnftFXb4W5X1Gd8xwMf+IKyfF3PX7fJc
js1dh/WfaNfc9Vn/5q6VIm7ycmasYxI7V0ztKLiBHpxHYizrcPILueu2/sld
N0ENxVR0RmKZtpv4e1N/r2H/zFjKODaGn7qkr2r2JaZU/ibCHqX9gS/CvpMr
yyDixi/pGM/XLE/4RgD5lXaZ6xap6Z6fuf4QTMbhmWsaiZ9Qy31f5Vr3DqUx
zNQD8k0C8IQE2/lWAThn6hpeEs/HIsAQUrNbJ3cj10PXyd3I32MAww2We3Tq
bz7cKnoSGFRkp/rba3s0uYGsVudAEhsiRnSQtm8Hz5oap8c3H3aIXLvDtwzI
tUzOrMfAnVDTCT6T2BvfWqB+Hz9/HOunMF4BXBW6jtpMajTxHerw7JVrpvAZ
nysco5sXZGOLxHqK8xxYuU4VWw5fG598W93vDrm/L7FU9NTKtbvYfv0r18di
H55WuW4Wu/r0yrXB2JYDKtfiYn/ulvtbCl+x1nJ/PwH9QgzhV65XdGblHOq+
4tvn/t7CEuRB5dpgbNRTKtcMY4ueUbmmDtuSulDqQ38UPbuyrKT+jpgAsYDt
RQ/O/b2RFaIH5f7eyG+iZ1Wu08PmPLdy7Rx27HmVa+qoEzmzcs0etuigynWA
2KsXVK7TwxadGmwA3tnzK9fsEQeYXYX1pPv/SuU47COlfVV80Xa5a7TAAYwq
/Z0FMPDUgS/KXSOP3uyTu24R2X5i8G3R4wuCTAaH+UXw/8Gs9eOaa7Yh++au
o0RHU29M3fGeqWutsc8b6L6/WjkujN9NPSF1hR1S1ypTs7wX6yM3zhC7nXxE
3Tc1Sse9ia2fXrp2l3q3r0X3yv3Nlh9y1+1iY98nOrdyPqyoXFNHzLGt+vfM
/S2X70VnVf7Gx5HqPyT3N2F+z127jqybgm2RuJ4L+flYZcxBWjmuTXx7Umpc
MvhkaunnVM4FYofzfYY+NWPSqdUHO7JzZszSX+L3zowLokYebAJ1K/iJizLn
/sjr4bdS30ud73uZc3bUvyCvqS/elFhf5noTahWpWaRuhXpG6hqp2yefD16I
b7UQf8EfoM6Ielvqbqltoebln9TfU1ge3k3yd9Rtzc6M7yQmhY/TMeSiyAfy
PQ5qCj7ObJtTm0mNJrY5tZnUaGKbU+tKzSu1l/jzYGjBhoKN4N1cEnIwX2eu
+UH3oQPJxRBfI1dDDTNx1nEhz0gOjNwQ+b5bYvtT5DLIARFfJY9J7nBm5rXL
GuY7H3zbAfzN7pm/rQAup33mPMtVYY2BpQczDyafOvFN1D88s61CfJ1vaaC3
0F8HZMZHHSI6ozKmCBn8QOX8JtjQfTLj+sCM7psZ906ODR1NjTy5OvKK4LoP
1faIyjirIvY2OFv8I/wkcFOrgr4Dzw0GiHo0YnTYlfdXjr9hk06rjMUFw4nc
o374p+BnUedCPopv1VC3Qv6K79NQ2wJOEfuM3Cg5KvQ1+uTXYAthc4LnoqaD
+N5vke1mMHvLwzqnfgHMH/cFewK7AlwxmMCfg24FZ0g9QNvMdc7gHsCaYpev
DM+I/CDr64XK9boDwjOlvpVcPfW+4GyRMRMq5/37xfbjiFFjt94jelHlWgLi
veTuT9aYB7NQaxP5vQZXBIYKLBXfXCBXDbaP+jJidUM15rDEOA38emxF8jZ8
VwacBvUZfMNmabD/qcXjG0xvhzVAvRLvMuuZ7zgQn8duRs+CFR1fGS9B7hA8
BfEibCHqe94Iti41evUynzPvCxgPcn7IMfAYPcO+1HwR77mq8vd3FoW1R80C
1/105e9ZgHsB+4tsB3N9b2X8x7Eh1gGepGuwGY5PHGcg7gGGBFwCMQjq2ogb
XV25xhab5ZrK7yfvKRgBvsXwRtCV1BqDISJmCr4C/ANxRXBWYKsmZK5rpsYZ
3C3fyZod4g98c4FvL5yW+dsN5LrBdVMvSV3kapnjiviSxACJSVBXwLd8qMek
jrLK/F0SZO9ZmWOVxAeRseSOyYFSy0ndB/kYMIbEn8GtX1v5e0zElH/N/C2D
uu/zZK7PQq5frjEXVv62ETFqMF07xbYPidMRr8O+BWdFbgx8Ot+JAGMFnpN6
7e0j23zgkcAHUNcFPgrs03eZ4/vE+cGlg7MCH/V9ZuwTeV/qFbD5sP2Iy4F9
IodHbRz15sRziOvwDaxB4R3E1+f7TnznCb8I/4g6UOocsbHRp3x7hbw82FFw
ichGdCuYwxaxYxfUcFKDRKwA/PBasWNK4FHRJ8Mq+4f4iXxfZKPK38Ai3gJu
EJweOrFZ5W+QoZfBLlIDz3PfpPL32vC5mlf+PhqxFPCia2tMN96vyt9uwx5r
EexmvkUGFrpB7JhP08rfxsJOo24F3Mv0ENfqUHNdFLEsagOpEQQbic4lJgMe
ktpy1g+YRrC4YHJbVf72HP4OsS8wWdQasoZYS/gO1H2AMeGbB/jF1CLcUBkH
C74a3Ejryt+zw4eiBg18FnU21MdRs43eoUaSax1Vuc4LTHPHzDUg4AzAYvAN
gWdj24SbVv4WHv4U35YBlwiGEdwmuGLwxY0rf5uM+BI1vMQZiDcMD3EMco4N
K3+vDbsdLCgYUWqQN6z8/TJiTdQxoQvQCXzDgbz8EaWxgtvF9sWouQNnTg0Q
NZLEue8i/lE5J4EPskHl751he4NTBbd5b+ZvR5BXoo6J7/OAvQS/CaYUbDMY
Z2II1JbybYa1Kn97Dh+BelLi62Mq1+7hk2LPgK1F/qMHNqv8rUD83/Uqf6cP
u5HvcpDnA3+xTuXvAGKLrl35O4D4FOtX/rYddin+2Xqxfdv/AyMPPdI=
           "]], Polygon3DBox[CompressedData["
1:eJwtnHccVtMfx+/z3HHOk6IhezWsRDRkixTJlpGShqTs7K00iLITGWmIiOzR
spJIZW+SNIyfvdfv8+5z/ziv53zvOffcdc53fD7f8zTpe8YRp1eTJCnyJMn0
+7t+5+nACaoflibJDTFJXpXcV42H15LkS/0OqyTJWTr2hPr+rPICA6jvViqn
q/8IyUfr0GVFkgSds6/6T9J5z6neXH2aq225yp46dp7km1XfWn1GSh6usqXq
t6mco7b/NMYeam+v+jY6/0e136C2JipDVf9T139Z1ztdfXqoz7W6/s6qv6n6
q+o/X+1D1f6Tjj2h/r9qvO1U31btW6h9e/VvrPae6jdW8iv6HS65v/r8pD55
SJKuqu+reku1X6QxrpQ8Ttf/nfFUblH9YJ1zt879VPJlkk+WPEj1a3S9wZKP
UtutOv9i3p/Ov13H/lD9M5XLVW+o/qeq/hbvRPIrkv/SORdKHqr+Y3XsN9VP
ol3yBZLfLd/XjZKnVvwN19bz/KR6Vcdv0/Xe1rHbNNboxO/rZT3PnWr/W/Xx
ah/G+1TbFB3L1fdEyedKPl/yO6ofr+c+V/XvVf5SvafK2ap/p/Kn6mfp+Q5Q
/7b6fVPj9dY5Z0k+U+2LVO9W+HtPUP1qtR+i+zu66rl1qORnJK9Qewe1Xyy5
i46/onMPVPlK9dk6fkLFc/I33d+/Gm939d9ZbVur/z+Sd5Pcjvkn+ZLc3/9l
nXOp6k9r/C8l761xLlJ70PMfJ/kg9d9B8t86f1fuX/KWklfonAd1rYk6fy3e
h8oQtd8sub/qK1UeVvu7kj9n/mvcm1S/S8fek7yvxv9B/R/mu2q8Z3X9lZL3
kXyJ5ELt3SV31fW2lzxB8sk6/1ide5jkA3V8geTjVL5W/QS111Tvp/OPUHtr
3e8iXUuHk51U/06lqepN1Xejcn5tqv49mX86douuv1j1nXXsF500Qu1bqT5e
5Vy1f6/zm+n8ZqpvrPOnSh4nuca3l3yajo+UvIX6X6FjP5Tfk3W8ido30+9z
attV5Q61r9Q1nlf9ND3PFLWfovbh6r+Zjl2i9lMlj5C8ueTLJD8i+Vnmtu6x
neRTdP763JvqPXT+1br/rdV/PvNC8k2SF6pvPd6R6qt0nUclR74R30f3t57q
DdR/XfX/XfL2kreT3FTyV5I3kry+5MaS75d8m+Q6ul4vyQ0kf6zxTtT4r2m8
huo3h7Va9fv+n/qNkTxA8lvl+txY8lWs+dT6YRPVR6kMlPyd5OtUX4jORCfp
+e5R/WOde5eu11BjfqaxLtY99Ff7Bmq/hvWj+q7l+myu/reqnM0zqf8y9b+R
9a8xDtWDd5f8sOrHqP8gnb8efXXecZLrqf8Hah+gMY/S+T9L3hZ9q/pmap8k
+WrUt/r3lPyL5BaSt1H75pLv0vifV/3MP2jstdX+oeST1Odn9RmoY415Np3f
Xf2PUf/+2A+1HSt5LfV/T3I39Xkp93fh++zOmtE5q9W+oeTGOv6G+kfWg+Sj
JbeSXD/1XH99jZHS+9cYs1T/W6WN5Pc1xvlqelXjbaq2b1SeUtt1ifXxoerT
SvVFGqcT+klyG8md0NPMB/V5Qv2P1LHxqt+u+/9I8jGSL1ffw1V2VH2xzu+s
/l+rz5Nqv0LH7lT9XPW/UfLnGm83tR8t+UTJ/+W2l4v1e4PkS9V/KbpM47VW
vaPql6J/cuv6c3SsF/MleP3XV7+D1P6T2p9X+5469qPqO6a+/9XlGP8L1pcL
1NZV/TfX7+uSr0dnZ/5mfLtC9alqX632xzXefjr/NtW/1nU2Vn1DvovaU/Xv
gj6W3EJyJvlA9Jfk7ST/pv4tJbeQ3ERyR8lbSH5B8n6Sq8H2YG/J20r+Ru2b
SN5Y8vqSf9A15+r6/1b9zb9V+6Zq35S5z/fR+XXQtbrfIyXPiJ6/ddXvLcnf
6/w5kttjg1S/Wf0PVb2zzj9Q7Q9LvlLym2obJ/l1/Y5R/7y0R7trvBaSb9Dx
e9X+BfZVbRuonK/6t9gMtd+le7qH+aBjbdU2W6Wx5JrGH6i2Y3S9HdF/OvYa
urHi77tSZYTqXaueH8yfJuq/DH2tc19FB/I98Dmw5+ozXW07MKdU76jyJtdD
ZzJHJW+vtqU6tqPq56hsI/lTyTuovr7KHqo3q1rn7qfyNvoGHwebEW0L8FlO
1vUL3XOPqufaHNVbqX19yQ3w0dT+WvD1LmddqH2D3HNvSx07K7d9ban6Zzq2
EzaAa1Z8DHvbR9esX7UPgy9zikqDqn0ifKM3VQrV12aN5dYv6EZ03p2qN1cZ
IPkIjT2jZvu7cdXvdABzNPe330LHBjLXNd4Z2CvJh+Z+n5uzHrk/1S/I/b25
31aqH6/xj6v6nJ6qn5D53NPQ96o3U58ZqrfmmqpPRIeo3kLH6qr+gO7hHdWf
4Hvg0xb+XsPUdp/ud1Hh9z9K8v2SW+j3Q8l7VewDTcjtKzbDR+NbqryPP4u9
Vn0SfkDVc2KI6tuqfKD25vi4qm+n8pHkrSQPVn2qyrHoQ/W/l2+j8rHat+Ub
5H4HvIsdqx6Pb8a7eKlqH/lIvYPjVb9fbTN1v230u1ztbXVsJM+r0gt7qPF/
VP+K+i9T+0OSLwyeg8zF/1Q65X7HjL+dzrlI9dYqX0j+RvIWejejUt/Pn6yn
zHOaub1K7RtiqyV/gu9X6uglmddu3ap96IWSM3wzdLbkI3LXz9KxxZnXJGsT
GzJE4+0kuZ/kC/GRdb+n5PZPsEG8b2wMtgb7eEVhHxJfEp/wmMI+Ib7hLtgk
fAPVd1fpgA8a7IPii+KDHls4RiFWwUftXtjHxNfE5zu7sM+H73es5MGFYwpi
C3Rsf8ln655eZL0l/r476JnuV/sSYhq1b6b3H/W8Kf6Wrt9R50/Ddqr9LbWv
hR+d2qfBt/lGfeajHyXfoPomOr83+hq/le9ds9+B/3FisM5Gd+8vuW9hG4At
QKf3K2wDsAXYiBOZ69gjlfb4F5Ino/N0f7MSz5/WrGH8IsbT+G1r1glrY5+Y
P9HxJHHlo2prKXldnd9D5z4ieRn6hO+FT6FjKzLrKnRWn9z6i3iEuOQx/Be1
b1SxzsBfPy3zeMRYxFqrVBqqvqGO9eP+ouMb4pzH8Xdy+1bY+K/L9T+9YpuA
bWhX+rTEcF8Ra9bs0+LjfoPuUhmM7ucdBPsE+AbYhx8lP45OymxvZkq+RP3v
UN8JKnMk76H+55cx8fdq273mGPkmyd9J3kXyGal9Nny39qWPjk/9P7VfoDIW
+6DyaPl+eXc3q8wI9inxLUfh76htf91PlXhM8gzd162p1//fFdufj3SN19Q2
Gr9H516TW95T59ykeiP130f1DlX733tpzJ2wN6U+vJp3VvWYjD0WGyd5/cT6
jPF2lrxS7e2wJTyj5Cnl9bbU72MV97lW9VtyXwsbgC04KFpfojefUf/huefe
HvjIjB1tK+j/q57/DB17oeJ74F7S3Lr4Hskfomtz14npB+t+P0InS54sOVO9
rcbbqOo59LjGe1THNqz4mz9dzqcNy/bJaj9fx15SfT8du1X1i1XmoSslj8M3
yR1LHlk+M/oJW4BNx7ZzDudulVifY8/a4T+XPsz+ut5uql+P36Lnf1C/J0g+
VucfoPs/Xt+wb9U+B77HfbmxEo49pPrq4Pu7MLc/xDvj3b1Rsf1jXMbnnWH/
r1PZVfLciu0v98/3elry1rntCPbkGMn76/pn4ANIvlryatV7R8uP5PY/+kk+
rXx3c9Et0fPl6tJ+slbOxF6rPIbtjNYv6Jln1d45+n64r6eI/zVfj5E8rbRn
P5X6gDVGvMQ7593zDrFPxCnEK5E5nzqmJLYEDJtd8xxnrr9V8fzrltq/71Ep
4x98uNK/+UT1XaJ9Mb7f7+V8a1767/hSJ6WOBcZVHT/OU7kC28Z8yvyMPOtl
if3R5aW+Y03j0/aI/n58x1m6v0fU/mPiMV7OHR8Tm16iYzeq/mJm32BU1fFs
9+j75b6PKfEWsDowO2KIYdHxEHHRy+i6aP8OP29Uub5al+sZX4F1vlPpb2Hb
0Z/4vrxz3j3+Cd+jn67xg9qXRusb9M50bKF+c3Q1PklmXUk8RcxE7PS85L8S
9zlI8uTUuuLfiv3bORrvF9X3UNs0jfeCfi/hfRIjEZMEvx/e0xVqfzI3dsma
Ze2OU58vVX9EZfPM/uHAqu3TYWCfud/dSZLngf1Fx0/EUfOIH/CRJC9Re9Pc
a4C1MLVqfAh9xVoBowCrWKryYWIMCSzpU9ZdqV8uxU+JxuvA7V6sWV/gS/EN
Nla9Xm5flHM+K8fjWr+qtAILi/bVmW9/6Nnn5I71punYstz+Bb7j3thA5lrh
98V7e17XeywzVnp51fH6i7nrrOcnM78/1uvlifHfs6LjK+KsF3T+rrrmeZKf
zY33PofO43vzjVLjJ+PK77sot37EV+2g9o1y3+9FZf+p6vtM7vE6SZ6S2UfH
Vw861kv1A9Dhqh+u+3lU8na6n0aS10Gn615uI84h9iJm4Hw97yvgH+gl3d/t
ap8ruTU+uI69qvb5krdSfZDaF0peAB5C3FazD4Yvtj1xB/pF11jE2Ng+yW+o
fbHaW6r9dMnnBuNt9SXvXbOP9oLaW2X23ZaA54FP8VyS35X8DveL3pO8FHxI
8q6SL5D8kuRHJTeVvI/k98FXJLeRPFjyB2AikttKPlvye5Lf5fkknyV5st7P
//R+muv4OZIfYD3qHUwB58VX0fGl6r+b+l8o+VFsIGtX5+ysY5+q/RPJ7VU/
T+2fSf5U8i7gMDW/B97HXSr/6FgTyYuJfdCpudcIawWM9cvceCbYGvhkVfX7
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
           "]], Polygon3DBox[CompressedData["
1:eJwl13m8z1Uex/Efv3t/95IlmRKK7lgi1EzZ9y2VraKZwgwzKfVAFJpEmyLG
mlCNMcLIVqhkJ8neQiZLlotIJktpQpuY56fvH+97z/t1Pmf5nu/5nvP55d3b
t0OfgqlUaiNl04lMKrUmnUpdSUX4pvypnFRqU4FUqjE2NyuVmsD/jm5Q/he2
TtwOcaWwLOw+bDD2GrYgN5Wq6X9T7DZsIZ8j7hTfnNpgA9SfpPf4MlQUaxbj
0lr+KiqGNeev0/YN5b9jBUx4C1+D3sFewCYZ/ym+Oi3CxmETsCf5DJ3km1Fr
df31Vwg7x7elztizWC52NuZGnbAh2AvYrdagEXa7/m6L56cKWcm4Mf5Gcefo
Q75szBtryxf0zIe1HRXPYc77tcvGjmKvYMWxw9g07IpM8mzxjNP5lXQgnYwb
448Td0HMbv46qi6uE98cb2cuM6mFuNGxJtpuFlOZUjSPn03H1M/kq2k3K8YU
Wwrr5f90bAZdr/zbrGT9Yh03YDmFUqkV5rqcWmAjxfyC7xJTNfrD7uHP006+
SswRu5u/SJ9FDNXAOvNnaAtfKt471pr/gT7my1M5rD3/PX3EXx3C2vGnaUPs
FfoNdgv/LW2M9aTLsVv5jDm/Zb59PUtJz3in5/0GXy/mEioprlW8I89yiK9J
9bDu2Fn6gC8d7xNrw6fFfc7XovrYfVgWdpivTQ2w+7Fs7AhfhxpiPbDpWHFz
6G0unc3pgrkMx3tjW7AudASrL66RNnW1vQVrwF8S753fxz8hfi7fTOxI/VSm
Rdgh7J/6G6b8V+wvVNDzT8GGY935eymNPa3t/qinCur6aVuCCuq/XnYSv4j/
Stwj2AkahU3V15KcZC3ri2tAP4kpiqXE5Mf3p+51/ih+P7+LBsbe1bYIftFz
7I9vEpvHL81J+o4x+tFx7Sphlyrn6H+uuu1xZuCPYqdoDDZNfyew/vxJGo29
ij2TmzxTWtt8GsJ/Qd3F7KTH1I3NJM8S4x7HHqb/iplvnCFYN+26UgFrNRB/
HjsmZjv2GL+eSvLPe5Y5ca7pqw82zGG6WcxSdWf5Dfqbou3P/NN0GjuDbcPy
xD0XY/Nb8LJxtupvqf5Wxt7DrsImYsuwVXG2YFdjk7Dl2GpsM1YGexFbgi3H
lmKf8jfGvsRGxdrRJ8YsT6Pj3OWfoEnmci7WBh/ML8tJ1jLWdECsLbY8J1nz
WPu/0dfYJiqtPN4Yi/W3Ir4/rFS8C2whNiien9LadsXbG+O8mF3YAvWXY82x
n7G7sPPYOmwK1gb7Sp+r9fU1X1hdY/6IuPXKU/FL8S/4H/Ht8a1pW0Fdx0yi
KDfCGtN+/T2dk8wr5vcS9gxfBu+Gvce3019Z/so4o+PM0Mch73QKdgcV8xw9
8TfFZdsbJcUN1ban/i5g48SsySTnd2n/y1BRccWoonKlOAfV7fG/UZxPyvGn
ABUWk6I/6efP2ck+/EfscWPcrCrfGKvxQmLy8f1YbXOpqlwceyiTnMsrxayi
XGyx+WyNe4KuV3dHfL/YtjiH6QbsduwnY+Qbr4Z20/U5jC8c57uYvfxgdXPi
TqAi/DdZyR56PZMoyqexb+nH2Bdx3ypv1d9469cfa4V9J24RPhm/DeuA/Yyt
xVpjpbGDOcl5VokfQU2xddhk7Kc4N2L8+A6wF2Mfm2MTcSWwctgE7NG457HL
sHzsbW3Lm2ce/Rt7m94Xc03cNeJb4mOwpuLOaneOxuYmOUfkHlMi16HvYi6R
q2B5/Mv0P2yPMd7UtoJ2z1Kj3OT+iXtoqphX6QxWLeaCjTXu+DjL+XX4ZbHm
2Gx18+O+wypmJXs89vrm2IfxjWDvUjdjleIr0z3G6yjufnGV+CrUCStHT2LX
xp0S57021bGHqR5fl/Zh1fjeVCfa0ULlLvrrE/c5n0c94u7E7lJ3Db82voU4
67FZ6rbGuY51Uf9QVnLPLYj3k0n2TuyhPfSDmInYhMg91A9SN9v/Bvjj2pbJ
Tt7B8DiDxAxQvhv7I/0S5zDWC9scdygdxlZTWrmPuYww55lxB1JPcZvwTvS5
mI40Tz+zspNz5g/GaIwN5StmJ+9vL1Y73qdyVexBqsW3jfwq9okx7oxzgm+J
j4n67CSnujnO+8inspJcL3K+AnzDGEfbepHDqWsU+zvOT75SOnkvI/nWeFtx
LbA7xLWJdtQEqx/5M9aEr0qvYyPizME28VXoNew5bHTccTnJnRl3Z258R/Ft
xl7BukQOJe6eWBv+AXyCuDP8UrE9+FXxHaaTnD9y/5Pi8uglbQdiQ8T2jXw/
cgltnspOzrwd2LU0M3JpcSPjvuCX629vOlmDWIua2IrYf+nk2eIZa2EjIq8x
3gztWlId/rh3+a6YKyJnE9ck8gjjFolzj/Y6X97S15fKKyPHTifnapyvR2lF
/JZJJ79vGvKPiP2I2ZCV7Ot+/EuZJB+JvORBOhY5A7Zcu8LpX1ObVIO4e2gZ
n5v+NaVO1ef3xfclYAlwEDsU5wNWGBuEvYLNjmeI3z6R46STO7c4vzt+H2EL
sd3iPov8N/KfODOwDdgmbE98r9g7WD52IO4RrA62KJ3cBXEn7MXqYYuxA9jB
yM+xm7AF2C5sd+Tn2I3YfGwntgvbhl2LTY93jn2ATYz7w/pmRe5Ll1j38dhF
63eXuB7xuyu+3UxyJq3WviMdxHph7bH5cbZHbhi5RibJXyOPfYC+jHwjvrd0
ku9G3ntT5IM5ye+Y+D3Tiury74sroTw0zhxxC/S1BiuEPY69jM3BPsVqYHOw
bdh2bGucldi0dPJbd0vkC3EeY7Owj7Ft2EDqatxVeAc6EDlTnKnKM8RtFveh
mB3Y77E3sB3YTmxybrIXi8W+Ufc9/x+qrjxb3FZxn8T+o7vjt3bkderOifk/
Afj/Kg==
           "]]},
         Annotation[#, "Charting`Private`Tag$22102#1"]& ]],
       Lighting->{{"Ambient", 
          RGBColor[0.30100577, 0.22414668499999998`, 0.090484535]}, {
         "Directional", 
          RGBColor[0.2642166, 0.18331229999999998`, 0.04261530000000001], 
          ImageScaled[{0, 2, 2}]}, {"Directional", 
          RGBColor[0.2642166, 0.18331229999999998`, 0.04261530000000001], 
          ImageScaled[{2, 2, 2}]}, {"Directional", 
          RGBColor[0.2642166, 0.18331229999999998`, 0.04261530000000001], 
          ImageScaled[{2, 0, 2}]}}]}, {}, {}, {}, {}}, {
     {GrayLevel[0], Line3DBox[CompressedData["
1:eJwl0stLVFEYAPBvssc0jTZqRUSM+AeUiwhKchG4KyJaTq1chLnIjYhuQ8iV
EEUtWhU1FJk2zYMaHwSFuLYZxx4+CvwXXLXodxHmzO/7zrnf+e499/YOjd66
n4qIGaN0ICKJx3hRcPlwRE4+yB7e5Hne4QCHeZ3jvM0pjvAxnxiT4lec5hs+
4xyLrLPKVX7j7pGImp6f9f6eXMem/F1bREM+yybfcz1ZZ4vz3OAH/mDnIXuo
q6v/Ke+z/564bq7kml/mPvI3y9xkhVuscps17vCEvRbVLaj/k/RgS/7Xnmvy
Br9yhRV+4uvkXvmURT7kS74wJsSPeI8PWEjOmtd4l1dY4DneYD45U+fSr2dZ
7+Pyt/wiz7vHDvlZtvMMszzNYzzFDC/Y55+ao+LnByMuqb0q77aeTt6LeNlc
l1yryFFJdNDjR5bKIkO/SPtTEictLqX2v5n/I/ZIoA==
       "]]}, 
     {GrayLevel[0.2], 
      Line3DBox[{1593, 1923, 951, 1592, 2320, 1763, 1594, 2321, 1764, 1595, 
       2322, 1765, 1596, 2323, 1766, 1597, 2314, 2324, 1767, 2196, 2315, 2508,
        2197, 2037, 2056, 1768, 2118, 2487, 2101, 2102, 2038, 2183, 956, 2182,
        2181, 2217, 2513, 1769, 1598, 2325, 1770, 1599, 2326, 1771, 1600, 
       2327, 1772, 1601, 2328, 1773, 1602, 2291, 2329, 1774, 1924}], 
      Line3DBox[{1604, 2226, 2372, 1603, 963, 1605, 2330, 1775, 1606, 2331, 
       1776, 1607, 2332, 1777, 1608, 2292, 2333, 2039, 1778, 2023, 2469, 2103,
        2104, 2040, 2057, 1779, 2119, 2488, 2105, 2106, 2041, 2186, 2227, 
       2504, 2185, 2184, 2218, 2228, 2503, 1609, 2334, 1780, 1610, 2335, 1781,
        1611, 2336, 1782, 1612, 2337, 1783, 1613, 2338, 1784, 1614}], 
      Line3DBox[{1616, 2229, 2373, 1615, 2230, 2374, 1617, 1841, 976, 1618, 
       1842, 2339, 1785, 1619, 2268, 2340, 1786, 1620, 2441, 1925, 2042, 1787,
        2024, 1397, 1926, 2043, 2058, 2059, 2025, 2470, 2107, 1927, 2044, 
       2189, 2190, 2506, 2188, 2187, 2231, 2505, 1621, 980, 1622, 2341, 1788, 
       1623, 2342, 1789, 1624, 2343, 1790, 1625, 2344, 1791, 1626}], 
      Line3DBox[{1628, 1843, 2232, 2426, 1627, 1844, 2233, 2427, 1629, 1845, 
       2234, 2428, 1630, 1846, 988, 1631, 2429, 1847, 1928, 1792, 1632, 2430, 
       1848, 1931, 1793, 1930, 2311, 2496, 1849, 2198, 2152, 2153, 2026, 1471,
        1933, 2199, 2155, 2442, 2313, 2027, 1934, 1935, 2235, 2443, 1633, 
       1937, 2028, 2236, 2444, 1634, 2345, 1794, 1635, 2346, 1795, 1636, 2347,
        1796, 1637, 2348, 1797, 1638}], 
      Line3DBox[{1640, 1850, 1851, 2446, 1639, 1852, 1853, 2447, 1641, 1854, 
       1855, 2448, 1642, 1856, 2375, 2269, 1643, 1099, 1929, 1857, 1644, 2431,
        1858, 1932, 1859, 1645, 2312, 2432, 1860, 2154, 1861, 2120, 2179, 
       2501, 2121, 1862, 2200, 1863, 1473, 1646, 1864, 1936, 1865, 2497, 1647,
        1938, 2029, 1939, 2445, 1648, 1945, 2376, 2294, 1649, 2514, 2222, 
       2223, 1650, 2349, 1798, 1651, 2350, 1799, 1652}], 
      Line3DBox[{1654, 1866, 1867, 2449, 1653, 1868, 1869, 2450, 1655, 1870, 
       2377, 2270, 1656, 2070, 1871, 1940, 2378, 2271, 1657, 2071, 2272, 2477,
        1941, 1872, 1658, 2072, 1110, 1942, 1873, 1659, 2478, 2073, 1874, 
       2156, 1875, 2122, 2180, 2502, 2123, 1876, 2157, 1877, 2131, 2491, 1660,
        1878, 1943, 1879, 1453, 1661, 1944, 2030, 2379, 2293, 2158, 1662, 
       1946, 2031, 2380, 2295, 2202, 1663, 2225, 2316, 2515, 2224, 2201, 1664,
        2351, 1800, 1665, 2352, 1801, 1666}], Line3DBox[CompressedData["
1:eJwNy1syAmAYxvHXjBy2EKGU1ZAKDTnUWICwhUo519SMC0U3rlmDTbh22kVm
/C7+8zzP//2+9HG9dDIVEetozkTszkbsYTAf0bAr+ob+ORfRsvftvP1lX9jb
cgd5bPLfss0n5QJeuUd/DtDhF7k+N5FDbkmmcOlWSEQs6yP+VNZxxb97f6af
48ktLVfwwF+7Z/RVPLtl5Rv/J2/cDrkxCtwal8Mtf8SV9SLfk13c8T+yxFXd
7+1fe8uu2V37YzriRe/p/1phJ04=
       "]], Line3DBox[CompressedData["
1:eJwV0L0uQwEYh/H3JA1K67PsphpEoj56FZYzGhtJTWz0LpqUAaNFqY86qnRw
Be5ERMyW+p3hyf99npyc03S1cZweJRGxh/OJiJvJiM1ixLTtooEan7G3OMAW
L9k7dKYizrCPD72s9VDla9jWfvks7rGuPWtj+8hLds4+INEzbGh9fmLn7RMu
9FPeQsbLNil4V/578u9gkH/HXnp2wf2CJob406/0RfcrDpFqn1rbLvE3fLl3
tIr7Hd98ly+7R/jhdb7ivvZ//QNfPCXD
       "]], Line3DBox[CompressedData["
1:eJwNzN0uAnAcxvGfl8JlOKQZdR8WDb3p1dhiy71oJUJK6wY4NJejzJx3ZH0O
vnt+3+fZ/7/dvM21VyLiEKNkxM1GRHkr4m8z4pVf8xL/5UPe4kX+w1/4XBZ4
XjbRwLO+Lr/0SRy7a6jiybam+0CGT/yXlgcY2Fb179jnb7b2esSj/so9xp6+
Zw886Hd5CiPbv+zqd2Tfdi4rOEJC/4my+95WkEXkdVl56X1PP3Of6S54l3/z
U97gd3zBT/iUd/gSAdooWg==
       "]], 
      Line3DBox[{1700, 2237, 2396, 1699, 2360, 1815, 1701, 2203, 2361, 1816, 
       2204, 2205, 2206, 2033, 2471, 1817, 2163, 2164, 2165, 2362, 2034, 1818,
        2148, 2149, 1460, 1979, 1819, 2147, 2495, 2150, 2151, 1980, 2170, 
       1820, 2207, 2509, 2171, 2172, 1982, 2063, 2238, 2474, 1981, 1900, 1984,
        2064, 1032, 1983, 1901, 1986, 2475, 2065, 1821, 1985, 1902, 1988, 
       2476, 2066, 1822, 1987, 2287, 2363, 1823, 1989, 2288, 2364, 1824, 1990,
        2459, 1903, 1825, 1702}], 
      Line3DBox[{1704, 2239, 2397, 1703, 2240, 2398, 1705, 1035, 1706, 1978, 
       2365, 1826, 1707, 2297, 2366, 2035, 1827, 2169, 2499, 1904, 2036, 1828,
        1992, 1508, 1905, 2216, 2173, 2174, 1994, 2462, 2175, 1906, 2178, 
       2176, 2177, 2500, 1996, 1907, 1998, 2241, 2433, 1997, 1908, 2000, 1039,
        1999, 1909, 2367, 1829, 2001, 2289, 2368, 1830, 2002, 2463, 1910, 
       1831, 2003, 2464, 1911, 1832, 1708}], 
      Line3DBox[{1710, 2242, 2399, 1709, 2243, 2400, 1711, 2244, 2401, 1712, 
       1044, 1713, 2460, 1991, 1833, 1714, 2461, 1993, 1834, 2004, 2308, 2485,
        1995, 2045, 2067, 2068, 2005, 1383, 1912, 2047, 2069, 2434, 2299, 
       2006, 1913, 2049, 2245, 2435, 1715, 1914, 2246, 2436, 1716, 1915, 1048,
        1717, 2437, 1916, 1835, 1718, 2438, 1917, 1836, 1719, 2439, 1918, 
       1837, 1720}], 
      Line3DBox[{1722, 2247, 2402, 1721, 2248, 2403, 1723, 2249, 2404, 1724, 
       2250, 2405, 1725, 2251, 2406, 1726, 2510, 2208, 2209, 1727, 2317, 2465,
        2007, 2046, 2008, 2108, 2124, 2489, 2109, 2009, 2048, 2010, 2110, 
       2472, 1728, 2011, 2050, 2012, 2466, 1729, 1919, 1920, 2440, 1730, 1921,
        2407, 2290, 1731, 1176, 1922, 1732, 2369, 1838, 1733, 2370, 1839, 
       1734}], Line3DBox[{1736, 2252, 2408, 1735, 2253, 2409, 1737, 2254, 
       2410, 1738, 2255, 2411, 1739, 2256, 2412, 1740, 1565, 2210, 1741, 2511,
        2211, 2013, 2051, 2014, 2111, 2125, 2490, 2112, 2015, 2052, 2016, 
       2113, 2473, 1742, 2017, 2053, 2018, 2467, 1743, 2257, 2413, 1744, 2258,
        2414, 1745, 2259, 2415, 1746, 1070, 1747, 2371, 1840, 1748}], 
      Line3DBox[{1762, 2022, 1298, 1761, 2425, 2267, 1760, 2424, 2266, 1759, 
       2423, 2265, 1758, 2422, 2264, 1757, 2319, 2421, 2219, 2221, 2220, 1756,
        2512, 2214, 2215, 2055, 2117, 2116, 2486, 1755, 2114, 2115, 2054, 
       2213, 1575, 1754, 2212, 2420, 2318, 1753, 2419, 2263, 1752, 2418, 2262,
        1751, 2417, 2261, 1750, 2416, 2260, 1749, 2468, 2020, 2019, 2021}]}, 
     {GrayLevel[0.2], 
      Line3DBox[{776, 952, 2320, 777, 963, 801, 2374, 975, 813, 1088, 2427, 
       986, 825, 1096, 2447, 1195, 997, 836, 1105, 2450, 1211, 1007, 846, 
       2381, 1113, 1223, 1016, 857, 2389, 1127, 1243, 1022, 2354, 868, 1028, 
       2360, 879, 2398, 1034, 890, 2400, 1042, 901, 2403, 1050, 914, 2409, 
       1061, 927, 2416, 1073, 940}], 
      Line3DBox[{778, 953, 2321, 779, 964, 2330, 802, 1083, 976, 814, 1089, 
       2428, 987, 826, 1097, 2448, 1196, 998, 837, 2377, 1106, 1212, 1008, 
       847, 2382, 1114, 1224, 1017, 858, 2390, 1128, 1244, 1023, 2355, 869, 
       1554, 1555, 1029, 2361, 880, 1035, 891, 2401, 1043, 902, 2404, 1051, 
       915, 2410, 1062, 928, 2417, 1074, 941}], 
      Line3DBox[{780, 954, 2322, 781, 965, 2331, 803, 1084, 977, 2339, 815, 
       1090, 988, 827, 2375, 1098, 1197, 999, 838, 2378, 1107, 1213, 1527, 
       1528, 848, 2383, 1115, 1225, 1529, 1530, 859, 1455, 2391, 1129, 1245, 
       1024, 2493, 870, 1491, 1262, 1486, 1030, 2471, 881, 1263, 1036, 2365, 
       892, 1044, 903, 2405, 1052, 916, 2411, 1063, 929, 2418, 1075, 942}], 
      Line3DBox[{782, 955, 2323, 783, 966, 2332, 804, 1085, 1086, 2340, 816, 
       1091, 2429, 1092, 1186, 1099, 1198, 1100, 1200, 1351, 2477, 1108, 1214,
        1109, 1216, 1357, 2479, 1116, 1226, 1117, 1454, 1448, 2492, 1456, 
       1130, 1246, 1131, 2356, 1369, 1310, 1248, 1487, 1249, 2362, 1488, 1311,
        1264, 1265, 2366, 1312, 1277, 2460, 1278, 904, 2406, 1053, 917, 2412, 
       1064, 930, 2419, 1076, 943}], 
      Line3DBox[{784, 1536, 1537, 2324, 785, 1182, 1183, 2333, 1322, 1184, 
       2441, 1185, 1325, 1093, 2430, 1094, 1188, 1101, 2431, 1199, 1102, 1202,
        1352, 1110, 1215, 1111, 1218, 2451, 1358, 1118, 1227, 1119, 1359, 
       1229, 2453, 1370, 1132, 1247, 1133, 1371, 2481, 1251, 1143, 1459, 1144,
        1460, 1266, 1154, 1492, 2499, 1155, 1313, 1280, 2461, 1281, 905, 1558,
        2510, 1559, 918, 1565, 1566, 931, 2420, 1572, 1573, 944}], 
      Line3DBox[CompressedData["
1:eJwV0EsrhGEYBuCHGWqyYuM0xYxiSiY0f4FyWDC2Tlk6lsMWv8JeslVknAuF
1dQsWWP8Anuub3F138/zvt/ie3MrW+XNhohYpi0VMdIcMUojaVJUMxGFpohV
1mhng1P7dTnINjt0sscuRcYY5yQd8eT+nX6bfGu+lw8c2p+b3/RXLvUJeWY/
KZ/N03KKF31GzlLV52SZmn7k/ry+wKd5SS5yYV83V/SrZOaGR/tr+evsXX7w
p3/LL/LU+aGFivsHcp/h5F+9TRfH9h0yS3fyfs56Zc0+J3voI0/J2YAs0E+R
IVrt/wESTS9e
       "]], Line3DBox[CompressedData["
1:eJwV0MsrpWEcwPHHOKZkNhokVtIkpaTJP+IvkIXL5hw2jsuGKUy5M5hxv/sD
lNuCcrBgjjLFZmaBlPtKzdrnXXz6vs/z/J7Te96SukRNPCOEkORzZgg/skJ4
YIICmhhmOzuERi0nziQJCmlhhB0zzVpBK1MkKaKddeej2kYlHfykk2IOuGWf
jVgIv/SRY/emddPekeZ8DCGlW9Yz+sSJmVlN2TvTXDOn0V3r33roPK3n1rVc
EOeOP9F7OL/Qe+s5fWaeN+srzfN7aTOXnv/bW9AXFvnAv2jeeb65v55jLPHK
Mp9ooIt6quhmhV33vmkpvYzRw1f6WGXPzHf9wgDj9FPNYPQtnK/pEGXcRP+F
6+hbe6d3EtRHhw==
       "]], 
      Line3DBox[{790, 958, 2325, 791, 969, 2334, 807, 980, 819, 1192, 2444, 
       991, 830, 1193, 2445, 1002, 841, 1481, 2379, 1207, 1480, 1011, 851, 
       1368, 2384, 1121, 1235, 1531, 1532, 862, 2494, 1457, 1135, 1257, 1338, 
       1339, 2458, 873, 1146, 1272, 1342, 2475, 1343, 884, 1157, 1286, 1039, 
       895, 1166, 2436, 1047, 908, 1174, 2440, 1056, 921, 2413, 1067, 934, 
       2422, 1079, 947}], 
      Line3DBox[{792, 959, 2326, 793, 970, 2335, 808, 981, 2341, 820, 992, 
       2345, 831, 2376, 1208, 1003, 842, 1552, 2380, 1209, 1550, 1012, 852, 
       1535, 2385, 1122, 1236, 1020, 863, 2392, 1136, 1258, 1533, 2507, 1534, 
       874, 1147, 1273, 1344, 2476, 1345, 885, 1158, 1287, 1040, 2367, 896, 
       1167, 1048, 909, 2407, 1175, 1057, 922, 2414, 1068, 935, 2423, 1080, 
       948}], Line3DBox[{794, 960, 2327, 795, 971, 2336, 809, 982, 2342, 821, 
       993, 2346, 832, 1588, 2514, 1589, 1590, 1591, 2515, 1548, 1551, 1549, 
       853, 2386, 1123, 1237, 1124, 864, 2393, 1137, 1259, 1138, 2357, 875, 
       1148, 1274, 1149, 2363, 886, 1159, 1288, 1160, 2368, 897, 1168, 2437, 
       1169, 910, 1176, 1177, 923, 2415, 1069, 936, 2424, 1081, 949}], 
      Line3DBox[{796, 961, 2328, 797, 972, 2337, 810, 983, 2343, 822, 994, 
       2347, 833, 1004, 2349, 843, 1013, 2351, 854, 2387, 1125, 1238, 1126, 
       865, 2394, 1139, 1260, 1140, 2358, 876, 1150, 1275, 1151, 2364, 887, 
       1161, 1289, 2463, 1162, 898, 1170, 2438, 1171, 911, 1058, 2369, 924, 
       1070, 937, 2425, 1082, 950}], 
      Line3DBox[{798, 1180, 1181, 2329, 799, 973, 2338, 811, 984, 2344, 823, 
       995, 2348, 834, 1005, 2350, 844, 1014, 2352, 855, 1239, 1309, 1240, 
       866, 2395, 1141, 1261, 1142, 2359, 877, 1152, 1276, 2459, 1153, 888, 
       1163, 1290, 2464, 1164, 899, 1172, 2439, 1173, 912, 1059, 2370, 925, 
       1071, 2371, 938, 1298, 1299, 1300}], 
      Line3DBox[{939, 1072, 2468, 1296, 926, 1060, 2408, 913, 1049, 2402, 900,
        1041, 2399, 889, 1033, 2397, 878, 1027, 2396, 867, 2353, 1021, 1242, 
       1241, 2388, 856, 1015, 1222, 2452, 1112, 845, 1006, 1210, 2449, 1104, 
       835, 996, 1194, 2446, 1095, 824, 985, 2426, 1087, 812, 974, 2373, 800, 
       962, 2372, 775, 951, 1178, 1301}], Line3DBox[CompressedData["
1:eJwV0L8rxHEcx/H3de7OqdvYpBTKj4GBDDehzMRmcCIbZWbBwj9gsAp3m2RC
UYpMl406Ntn8isHk8Rmevd7v1/Pzvft8v50Lq9MrmYio4CQbMdwUMZiP6MMA
6sWIfnnA9XITuYge7KLK7cg9roMbN3dhG8fcVjrHtXFj5k1dSb7gGRtcibvR
N+xZPOERa1yBq3Fl+495SS5imcvYR82vsiLncersHPeHEXudm03308/IKf0n
jsyHqOGcq8pJ/RtuzWeeu5ZXKOsauEzv4mx7ujfWMaR/wL3+N90RLb5VEd3p
t3DHfeu/0KwvoFV/gQ/dO/K6HPb97z8qdTPq
       "]], 
      Line3DBox[{946, 1078, 1577, 2421, 933, 1066, 2467, 1295, 920, 1055, 
       2466, 1294, 907, 1046, 2435, 1165, 894, 1038, 2433, 1285, 1156, 883, 
       1032, 1341, 1271, 1145, 872, 2457, 1026, 1337, 1256, 1379, 1378, 2484, 
       861, 1019, 1335, 1234, 1367, 1366, 2480, 850, 1010, 1451, 1453, 1452, 
       840, 1001, 1474, 2497, 1103, 829, 990, 2443, 1190, 818, 979, 2505, 
       1524, 806, 968, 2503, 1521, 789, 2513, 957, 1518, 1587}]}, {}, {}}},
   VertexNormals->CompressedData["
1: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
pHJeo77+W913o6rRCRez2xviKLi3j75P2C0RfVxhtLviSTXapsSVGP+Sgu0t
PVknNmWiLbTfsWGl/Y6NCO13bGa8O7IC33Ti4IefMgLf1GAP3e1NQvL9yGfO
31kso/2dRaFxcg7gJvacxQdw+6r3Wg5we7Rt8DLgvElf/xHgLNP3ksRZu7g2
wvZnJ3ppnyaxMXQAf74du5x5YSqqp/397ALa38/K0v5+tk888LB48SBW+SN2
589EKd7VzH751tl2JEH7ew172t9r2NH+XuPW5jwxyM+H6+XyID+xR9tqyM/N
rc45kM+tV5O7IJ81vUWHIJ/NawsFEk71o7R9P7gPRnbjoEKhCoveBCRA+7vd
/85dA+3c3e35ejLk/Aj2U+j+atCeh+V3fHPKu9aIzrX9/BzbO4JFbBp1eL/W
YPbxvDWxZ8rQEcfo3c4Gw3jx2JUdzgatWC2tYMOqC7n/83svxrRzx1wmlgJ8
wj3jtQn4hG+ErRz4RITNkOSfcyLGJP/U0L02AP7Z/P7CKPBVpvL9BuAr3Z4F
msBXMw8Pkfw2MaW6FvjNyTVUHPhNNFRE6e4NCta7GXDK9loWFqFWp2mz1yB1
itLQpxoKXqToNRAeVI59Cq8MmLMWoBVVLHbUsREsdbb7+5tX9fj7nXuv7i/K
RMtovwMjSvsdmBra78DkeR55BnVBtv1bGNSFXt3WS1AXVllSJqCOiPTFPYA6
coCpJwfqyIr2k2TdKb+aQ9adcepRTag73V2/zkOdkrmxJg/q1DLDQi+oU/aR
dmRdc5VKXwR1Tflj6VmoayZu8ju3L6ViQ/f2Q+FyabhlJmjLD+mPSHwX2694
eSrGgm+MVw4V4wvLfoV8NnmHVmjsmfIkdHVMhZLbEaNqzNlYF53BmvI/vzPT
TfudmSO/7DDU8aq1yvj/oey943r+wv/hFFJKQyEyGop2aWjoVGgo0VKkzKJh
lIxQJJQGMlpE2kMqpaJxWlRKu6ShvbdECPf7ejm5P9++P/fvcf/l4eo8rtc5
17nOdT2vcc4b/Phmuc/W4MfnKPs4gN/PeWPVCn4/f/zCbfD7oR3LpgAncLYb
RgFO8I4J/Aw44WXc9UbAFaI9THmAK4Re3BwAXCF3wofCIcnTCc6AQ9rXVFQD
DnnryUrhlhLFy6GAWw4cFysG3KIauZPCOY5i072AcxzpVrgBzmHctJOew2gU
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
elhv4N6VL2G9je0SmbDeQ0Se3Vu+IljvtorwTbBe/fAscVgv6cfAs/sx8OPY
3SDPb9v31wH/g18fCgF/0qeBZ/dpEPuAZ9sH2b1xgqBXz9MmMkGvjJQeHwO9
2pY7xxn06kUuO6VXshxGRqBXuR8nV4HdO/60zIvPPfSv3Sum6If/0mdwyFb1
b5xgnzMCNh/S0Qn8a5+VKLqTajqhz/jxd7bFc6AufHqJdgLUhTWGeTZDXfh8
a60BnNPDr4ZOwTktu+J3CM7p3URu6LvDacNPhqDv7rLTuhDou9vx5uuaQBla
3NjambNUMxXPteQcPPHoLWI0dqPms2unWy07Dvo7n3/Rz87/xAF0LhEeJzuz
B/9X+o4OGwWo79ekiuyB+v7p5u0qUN8X+qWqDPaHpSXBDezPgpWOX8D+ZAcp
z1VIHMHpa6VPQb+cyjzLSOiXY3J9ftWzYgR3eIiEuQVmYN+ji7a+E65ETu1b
qe8yzjlSu39pyN/vTuV781O4hdBn9iXq4NAaoKuL5nAGTT/6v9LJ/qr6xEyE
/Xd/31H0/X/pM/jnjZ8A9GkgyfcM5mAn9wrWU30aq+0VwQ4j10BWyg6zy3Y+
BTspWDWoAePFzaKOwHg9q+ZsGM850nwExvc6yTXCeJeQ86kw/l96Reafo/l/
Xtf/ot/+rQ59ifjQsYVUX+JIvz7Vl3gv+841kLOyoNMDkDOXMgMCOY9R8rTP
iamWrAd5zvjrL3/knBNN6DP8p1i6BGD8EqIPM+OJnvylz+wXlqb6RXHbmHwn
6K1R2weqX/T8xH0+0Nst+rvTQW8vVQy2gd4yUPrpmOMYdaUK9HMGDyz4o7d/
6TP81ajz5Zjzvn18O5yvof8L/V/n9F96/i/9+Zfc/jVPDVlL6l4we6A83eHP
/++94H/R/3VO/6X//9LnEMMMHtBn5dtvFwWlhv3V53/R8/2uCEI+UMr7YFl3
c8Tf+P1f9PgXtvKQD+m+bJGiXRj5Nx9SukeOygPM0GfGn1zhLwZxfYUazhqt
DP8b1yez6i6B+HSGPjOfDwX3eYFeXGdxcVPAk7/0aop++C/9/3Ze/qW3/9IT
oej0ipNX+pCmPGsZ5CV6uSfuQl7CkssD/AVSq6j8Jk7zF4cTL1L+YiZPeJHc
d6Ob/+e+23utK9Avh77cVr0K+KewxJjql9O7HQJ4Eq0ua2YB/KOz8xiFJ/m9
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
fr/x3U1Uv1+q8q7lPO0jKDsh+8KQeCx+tuTj+vculah2hy3E6cjNuYiK0+dI
nabi9GbfD1R/pv5rHRGIl+c9zab6MC/epmOHvMFnWe254NfMBvXcqXi/8BLk
H1AEU+UnyD9suHaVyj9wxYZDfyyK/562DuJrBzZhF4iv3ehlII+B+tccYIc8
xoKX+lQeY4TcH79C7o9/IffHtSTOcIG9nWdv6AL2dsq1XBns7afXotC3g+Lm
36H6dh4lpx0F+/x40XEYjyrSdlPjD6cganz7q8v8MD56z0PKnr8vlaH6fBL4
j4I9R0ImWpQ9X6ltTdnzwskLVP+kRFySD8hT4rgZ1W859ZaDhyZPnDOtfQPk
eW0X0waQpyuxJynEnhQTexJO7EMSsQ+fiX2wulUVRtMH5Kfnfgz0IXKL4UbQ
h9+hLg/t33eg2uheFaiD++QteQF1cBK/IC8Sv+wi8cuhCfsAGJ+YE6QG488u
aaDGJ3ZKscK9FRyQGAd5xcw7DtS9FRKnoCESpzwmccpNQp+JXyIJfeEfPfxf
+ec5SxZDfgklNvhSdSjp5XIhkF9aGUP146Fp25tfQR9uoBUM0I93xOAL9B+i
Ft4sqv+w6SXvd9C3TyQfdZ7ko56TfNScTxMXQM+1fpo+Bj2X9Ren+jYlrdlB
/sjy3JAnyL/gBzcl/5l7uCvIPVx5cg/3GDoE+o/v95pT+s//yZXS/7m9x8Ce
o2g2RnuQ/4o3nZQ9l7ybKV97f5TmJ2/U8XzPwRG70lTppl8hVGoHcTfyY7up
CXH347rfQxB3C1blwnjcdFyyFsbf8XtFjb/C/Uq7xGsUs2oN2Xnxp2PGjIUb
rOTzUfWF7XHz/Ufx2t7SXVzHsjC6rbP10INsdJbct3Wcdd/2K4Pwd+/xXqQh
Xd0GfSmsk/dPQF+Kise9+CrXTjScGbr6h3o/fhe/Zj6+mYLExb5Ke/0/rZ15
OJVb1MBTkQoN0uAakyHJlGhQO9Sl0m3QSEqX5iJug27KkDKUoowdYykRKpEh
2oQkpVQqlIzh4BzKkITvrPeu44/zPf3xPc/37/vsZ7/73Xu9a6291m/vtYK3
b/Jbfjooopnq+LVNtt2RRqY17mR4Ib/n7kLAC9mn5bKAF+L/17/wvzbD/5pf
H3Y91od1xfqwRUanvgCP1D5+vS7wSFplogHAI6n7mzwAfin1yM1C4JdkZN92
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
    "]],
  Axes->True,
  AxesLabel->{
    FormBox["\"x\"", TraditionalForm], 
    FormBox["\"a\"", TraditionalForm], 
    FormBox["\"g[x,a]\"", TraditionalForm]},
  AxesOrigin->{Automatic, Automatic, Automatic},
  BoxRatios->{1, 1, 0.4},
  DisplayFunction->Identity,
  FaceGrids->None,
  FaceGridsStyle->Automatic,
  Method->{"DefaultBoundaryStyle" -> Directive[
      GrayLevel[0.3]], "RotationControl" -> "Globe"},
  PlotRange->{All, All, All},
  PlotRangePadding->{Automatic, Automatic, Automatic},
  Ticks->{Automatic, Automatic, Automatic}]], "Output",
 CellChangeTimes->{{3.7464301594155383`*^9, 3.7464301879113865`*^9}},
 CellLabel->"Out[70]=",ExpressionUUID->"af856d45-9a65-4e4c-943a-f5242d299291"]
}, Open  ]],

Cell[TextData[{
 "Can you tell what the ",
 StyleBox["PlotRange ",
  FontWeight->"Bold"],
 "option does? Copy the code below and look at the function without it."
}], "Text",
 CellChangeTimes->{{3.746430193975316*^9, 
  3.7464302263755317`*^9}},ExpressionUUID->"b74f630b-3f00-4072-9c77-\
b5b03bc1bbdd"],

Cell[BoxData[
 RowBox[{"(*", 
  RowBox[{"your", " ", "code", " ", "goes", " ", "here"}], "*)"}]], "Input",
 CellChangeTimes->{{3.7464302314369726`*^9, 
  3.7464302378446827`*^9}},ExpressionUUID->"6ad89f37-2fac-4b75-a956-\
afe027e865ea"],

Cell["\<\
A 3D-plot is one way of showing how the factor a influences the graph of \
g[x], anther one is using an interactive feature of the Wolfram Language. \
This is especially true if you are dealing with more than 2 variables.\
\>", "Text",
 CellChangeTimes->{{3.746430240078917*^9, 
  3.746430317452191*^9}},ExpressionUUID->"3af70925-6cad-4bac-a305-\
cb1460c4c41e"],

Cell[TextData[{
 "Instead of changing a in a ",
 StyleBox["Plot3D ",
  FontWeight->"Bold"],
 "function, it is put inside of a ",
 StyleBox["Manipulate ",
  FontWeight->"Bold"],
 "function.\nTip: If you want to see which brackets include what, simply \
click on a function multiple times. Everything inside of it will light up in \
blue."
}], "CodeText",
 CellChangeTimes->{{3.7464303683015857`*^9, 3.74643043343377*^9}, {
  3.746430672930934*^9, 
  3.7464307140943575`*^9}},ExpressionUUID->"67f001a1-1f71-4e86-bc26-\
292a8f6c8935"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Manipulate", "[", 
  RowBox[{
   RowBox[{"Plot", "[", 
    RowBox[{
     RowBox[{"g", "[", 
      RowBox[{"x", ",", "a"}], "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"x", ",", 
       RowBox[{"-", "5"}], ",", "5"}], "}"}]}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"a", ",", 
     RowBox[{"-", "5"}], ",", "5", ",", "0.1"}], "}"}], ",", 
   RowBox[{"SaveDefinitions", "\[Rule]", "True"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.7464303232188635`*^9, 3.746430357704234*^9}, {
  3.7464304826302204`*^9, 3.7464304848108234`*^9}, {3.746483215305107*^9, 
  3.7464832259321823`*^9}},
 CellLabel->"In[2]:=",ExpressionUUID->"01efd967-e1af-413d-8060-8f884fb42049"],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`a$$ = -5, Typeset`show$$ = True, 
    Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu", 
    Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
    "\"untitled\"", Typeset`specs$$ = {{
      Hold[$CellContext`a$$], -5, 5, 0.1}}, Typeset`size$$ = {
    360., {109., 114.}}, Typeset`update$$ = 0, Typeset`initDone$$, 
    Typeset`skipInitDone$$ = False, $CellContext`a$16706$$ = 0}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, "Variables" :> {$CellContext`a$$ = -5}, 
      "ControllerVariables" :> {
        Hold[$CellContext`a$$, $CellContext`a$16706$$, 0]}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, "Body" :> Plot[
        $CellContext`g[$CellContext`x, $CellContext`a$$], {$CellContext`x, -5,
          5}], "Specifications" :> {{$CellContext`a$$, -5, 5, 0.1}}, 
      "Options" :> {}, "DefaultOptions" :> {}],
     ImageSizeCache->{411., {157., 163.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    Initialization:>({$CellContext`g[
         Pattern[$CellContext`x, 
          Blank[]], 
         Optional[
          Pattern[$CellContext`a, 
           Blank[]], 1]] := $CellContext`a $CellContext`x^2 - 1}; 
     Typeset`initDone$$ = True),
    SynchronousInitialization->True,
    UndoTrackedVariables:>{Typeset`show$$, Typeset`bookmarkMode$$},
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellChangeTimes->{{3.7464304377219887`*^9, 3.7464304878967085`*^9}, 
   3.7464832383271832`*^9},
 CellLabel->"Out[2]=",ExpressionUUID->"2e40a9fb-aba2-4b14-9014-46ab4809309b"]
}, Open  ]],

Cell["\<\
Play around with the slider in the graphic to watch it influence the graph. \
This can be really helpful observing how one or more variables change a \
function, especially if it is a complicated function with many factors. It \
also works in 3D.\
\>", "Text",
 CellChangeTimes->{{3.7464305325809946`*^9, 3.7464306655678883`*^9}, {
  3.7464307240113573`*^9, 
  3.746430728719208*^9}},ExpressionUUID->"b7f152d0-9fad-4895-a4c5-\
5e1ffafcd079"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Non-numeric Visualizations:", "Subsubsection",
 CellChangeTimes->{{3.7464282339330006`*^9, 
  3.7464282421982527`*^9}},ExpressionUUID->"eb150b79-b01e-4dff-9528-\
47f70dac4b33"],

Cell["\<\
There are also ways to represent non-numeric data in the Wolfram Language. \
Word clouds for example. I\[CloseCurlyQuote]ve previously used them in \
assignments to represent qualitative answers to survey questions.\
\>", "Text",
 CellChangeTimes->{{3.74626948831209*^9, 3.7462695275092487`*^9}, {
  3.7462698595540752`*^9, 3.7462699412077503`*^9}, {3.746318369132471*^9, 
  3.746318491539199*^9}},ExpressionUUID->"2da6a16a-a467-4436-9435-\
40a2c653a822"],

Cell[TextData[{
 StyleBox["Import",
  FontWeight->"Bold"],
 " a text file of the Minerva\[CloseCurlyQuote]s website(just the front page) \
and create a ",
 StyleBox["WordCloud",
  FontWeight->"Bold"],
 " from it:"
}], "CodeText",
 CellChangeTimes->{{3.746269758977999*^9, 3.7462697934867296`*^9}, {
  3.746269845695137*^9, 3.746269874302599*^9}, {3.7464291718353767`*^9, 
  3.746429191453592*^9}},ExpressionUUID->"69ce081a-2b4a-4df3-8d94-\
343cd7928539"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"WordCloud", "[", 
  RowBox[{"Import", "[", "\"\<http://minerva.kgi.edu\>\"", "]"}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.746269672780453*^9, 3.7462697202814674`*^9}, {
  3.746320567048751*^9, 3.746320591303568*^9}},
 CellLabel->"In[61]:=",ExpressionUUID->"33a77cc9-4f49-43a1-9654-8177c00719b4"],

Cell[BoxData[
 GraphicsBox[{InsetBox[
    StyleBox["\<\"Minerva\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.19444444444444445`],
     FontColor->RGBColor[0.368417, 0.506779, 0.709798]], {0, 0}, Center, 
    Automatic], InsetBox[
    StyleBox["\<\"students\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.16111111111111112`],
     FontColor->RGBColor[0.880722, 0.611041, 0.142051]], {0., -49.}, Center, 
    Automatic], InsetBox[
    StyleBox["\<\"Experience\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.10555555555555556`],
     FontColor->RGBColor[0.528488, 0.470624, 0.701351]], {0., 42.}, Center, 
    Automatic], InsetBox[
    StyleBox["\<\"Global\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.15],
     FontColor->RGBColor[0.560181, 0.691569, 0.194885]], {5., 77.}, Center, 
    Automatic], InsetBox[
    StyleBox["\<\"learning\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.10555555555555556`],
     FontColor->RGBColor[0.772079, 0.431554, 0.102387]], {0., -88.}, Center, 
    Automatic], InsetBox[
    StyleBox["\<\"Admissions\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.08333333333333334],
     FontColor->RGBColor[0.647624, 0.37816, 0.614037]], {0., 112.}, Center, 
    Automatic], InsetBox[
    StyleBox["\<\"Undergraduate\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.061111111111111116`],
     FontColor->RGBColor[
      0.28240003484173815`, 0.6090799721266095, 0.7538800418100857]], {-23., -112.},
     Center, Automatic], InsetBox[
    StyleBox["\<\"Programs\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.07222222222222223],
     FontColor->RGBColor[0.28026441037696703`, 0.715, 0.4292089322474965]], {0., -132.},
     Center, Automatic], InsetBox[
    StyleBox["\<\"Development\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.061111111111111116`],
     FontColor->RGBColor[0.8996399512215667, 0.7463488834690629, 0.]], {0., 134.}, \
Center, Automatic], InsetBox[
    StyleBox["\<\"Program\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.07222222222222223],
     FontColor->RGBColor[0.736782672705901, 0.358, 0.5030266573755369]], {108., -121.},
     Center, Automatic], InsetBox[
    StyleBox["\<\"student\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.09444444444444444],
     FontColor->RGBColor[1, 0.75, 0]], {0., -157.}, Center, Automatic], 
   InsetBox[
    StyleBox["\<\"class\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.10555555555555556`],
     FontColor->RGBColor[0.922526, 0.385626, 0.209179]], {-117., 72.}, Center,
     Automatic], InsetBox[
    StyleBox["\<\"Academic\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.07222222222222223],
     FontColor->RGBColor[0.40082222609352647`, 0.5220066643438841, 0.85]], {0., 155.},
     Center, Automatic], InsetBox[
    StyleBox["\<\"develop\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.061111111111111116`],
     FontColor->RGBColor[
      0.5833680111493557, 0.4126186601628758, 0.8290799721266107]], {130., 24.},
     Center, Automatic], InsetBox[
    StyleBox["\<\"world\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.08333333333333334],
     FontColor->RGBColor[0.915, 0.3325, 0.2125]], {104., -79.}, Center, 
    Automatic], InsetBox[
    StyleBox["\<\"Read\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.08333333333333334],
     FontColor->RGBColor[0.571589, 0.586483, 0.]], {116., 63.}, Center, 
    Automatic], InsetBox[
    StyleBox["\<\"Career\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.07222222222222223],
     FontColor->RGBColor[
      0.9728288904374106, 0.621644452187053, 0.07336199581899142]], {-108., -78.},
     Center, Automatic], InsetBox[
    StyleBox["\<\"practical\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.05],
     FontColor->RGBColor[
      0.8857244243136628, 0.3764133635295058, 0.1393110607841571]], {-128., 36.},
     Center, Automatic], InsetBox[
    StyleBox["\<\"Aid\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.09444444444444444],
     FontColor->RGBColor[0.363898, 0.618501, 0.782349]], {-132., -39.}, 
    Center, Automatic], InsetBox[
    StyleBox["\<\"Tuition\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.061111111111111116`],
     FontColor->RGBColor[
      0.8439466852489265, 0.3467106629502147, 0.3309221912517893]], {136., -36.},
     Center, Automatic], InsetBox[
    StyleBox["\<\"challenges\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.03888888888888889],
     FontColor->RGBColor[
      0.6184987019729621, 0.39212575718243875`, 0.7412532450675947]], {133., 42.},
     Center, Automatic], InsetBox[
    StyleBox["\<\"knowledge\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.03888888888888889],
     FontColor->RGBColor[
      0.9637822400302223, 0.5764112001511111, 0.0977879519184]], {102., -98.},
     Center, Automatic], InsetBox[
    StyleBox["\<\"body\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.061111111111111116`],
     FontColor->RGBColor[
      0.838355547812947, 0.44746667828057946`, 0.0208888695323676]], {106., 85.},
     Center, Automatic], InsetBox[
    StyleBox["\<\"universities\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.03888888888888889],
     FontColor->RGBColor[0.5472001045252132, 0.43417993728487203`, 0.85]], {-114., 94.},
     Center, Automatic], InsetBox[
    StyleBox["\<\"financial\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.05],
     FontColor->RGBColor[
      0.9324333565611593, 0.5282889043741062, 0.0921900209050434]], {115., 103.},
     Center, Automatic], InsetBox[
    StyleBox["\<\"diversity\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.03888888888888889],
     FontColor->RGBColor[
      0.8878600487784333, 0.33792799024431336`, 0.2577332520359445]], {136., -53.},
     Center, Automatic], InsetBox[
    StyleBox["\<\"building\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.03888888888888889],
     FontColor->RGBColor[
      0.8613800418100862, 0.48092002787339083`, 0.02824203762907758]], {-105., 107.},
     Center, Automatic], InsetBox[
    StyleBox["\<\"Resources\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.03888888888888889],
     FontColor->RGBColor[
      0.8564488486273256, 0.42032672705901153`, 0.06612212156831418]], {-131., 50.},
     Center, Automatic], InsetBox[
    StyleBox["\<\"PROJECT\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.03888888888888889],
     FontColor->RGBColor[0.37977756485605163`, 0.715, 0.3025558265468435]], {-90., -128.},
     Center, Automatic], InsetBox[
    StyleBox["\<\"immersion\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.03888888888888889],
     FontColor->RGBColor[
      0.35558897405758294`, 0.5505288207539337, 0.8417067688690995]], {99., 125.},
     Center, Automatic], InsetBox[
    StyleBox["\<\"professional\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.02777777777777778],
     FontColor->RGBColor[0.7042770479220728, 0.358, 0.5530353108891188]], {6., 21.},
     Center, Automatic], InsetBox[
    StyleBox["\<\"experiences\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.02777777777777778],
     FontColor->RGBColor[
      0.9930578157165594, 0.7227890785827968, 0.01874389756528967]], {-96., -94.},
     Center, Automatic], InsetBox[
    StyleBox["\<\"meaningful\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.02777777777777778],
     FontColor->RGBColor[
      0.9840111653093676, 0.677555826546838, 0.04316985366470745]], {-138., -58.},
     Center, Automatic], InsetBox[
    StyleBox["\<\"capabilities\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.02777777777777778],
     FontColor->RGBColor[0.7513196300394465, 0.358, 0.48066210763162087`]], {-103., 118.},
     Center, Automatic], InsetBox[
    StyleBox["\<\"Press\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.05],
     FontColor->RGBColor[0.47401116530937026`, 0.47809330081437784`, 0.85]], {145., 0.},
     Center, Automatic], InsetBox[
    StyleBox["\<\"Immigrants\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.02777777777777778],
     FontColor->RGBColor[0.38354466123747527`, 0.5323732032575149, 0.85]], {-91., 130.},
     Center, Automatic], InsetBox[
    StyleBox["\<\"Apply\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.03888888888888889],
     FontColor->RGBColor[0.7748409210981391, 0.358, 0.4444755060028629]], {-141., 0.},
     Center, Automatic], InsetBox[
    StyleBox["\<\"challenge\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.02777777777777778],
     FontColor->RGBColor[0.2187618985811806, 0.715, 0.5074848563512248]], {60., 21.},
     Center, Automatic], InsetBox[
    StyleBox["\<\"Preparing\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.02777777777777778],
     FontColor->RGBColor[
      0.9603267270590103, 0.5591336352950514, 0.10711783694067224`]], {-146., 13.},
     Center, Automatic], InsetBox[
    StyleBox["\<\"learn\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.05],
     FontColor->RGBColor[
      0.6753413537738198, 0.3589675436319385, 0.5991466155654507]], {-142., -15.},
     Center, Automatic], InsetBox[
    StyleBox["\<\"skills\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.05],
     FontColor->RGBColor[
      0.9874666782805795, 0.6948333914028977, 0.033839968642435214`]], {143., -16.},
     Center, Automatic], InsetBox[
    StyleBox["\<\"needed\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.03888888888888889],
     FontColor->RGBColor[0.7132613816472081, 0.358, 0.5392132590042952]], {-120., -108.},
     Center, Automatic], InsetBox[
    StyleBox["\<\"designed\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.02777777777777778],
     FontColor->RGBColor[
      0.3103557220216354, 0.5867154223826917, 0.7874268664259625]], {-80., -140.},
     Center, Automatic], InsetBox[
    StyleBox["\<\"International\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.02777777777777778],
     FontColor->RGBColor[0.31827505306025683`, 0.715, 0.3808317506505822]], {97., 136.},
     Center, Automatic], InsetBox[
    StyleBox["\<\"Demonstrate\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.02777777777777778],
     FontColor->RGBColor[
      0.8607200975568693, 0.34335598048862614`, 0.30296650407188447`]], {89., -142.},
     Center, Automatic], InsetBox[
    StyleBox["\<\"complex\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.02777777777777778],
     FontColor->RGBColor[
      0.596786740995709, 0.404791067752503, 0.7955331475107271]], {35., -28.},
     Center, Automatic], InsetBox[
    StyleBox["\<\"Recently\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.02777777777777778],
     FontColor->RGBColor[0.529922539669161, 0.44454647619850335`, 0.85]], {-86., 142.},
     Center, Automatic], InsetBox[
    StyleBox["\<\"personal\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.02777777777777778],
     FontColor->RGBColor[
      0.8774935098648088, 0.34000129802703827`, 0.2750108168919853]], {-76., -150.},
     Center, Automatic], InsetBox[
    StyleBox["\<\"ethnicity\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.02777777777777778],
     FontColor->RGBColor[0.5019668524892619, 0.46131988850644284`, 0.85]], {80., 149.},
     Center, Automatic], InsetBox[
    StyleBox["\<\"educational\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.02777777777777778],
     FontColor->RGBColor[
      0.8745421494417032, 0.39318677583744527`, 0.11135537360425793`]], {86., -152.},
     Center, Automatic], InsetBox[
    StyleBox["\<\"platform\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.02777777777777778],
     FontColor->RGBColor[
      0.3383114092015346, 0.5643508726387724, 0.8209736910418415]], {-79., 154.},
     Center, Automatic], InsetBox[
    StyleBox["\<\"VIDEO\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.03888888888888889],
     FontColor->RGBColor[0.9810598048862722, 0.7553955338762525, 0.]], {-148., -96.},
     Center, Automatic], InsetBox[
    StyleBox["\<\"majority\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.02777777777777778],
     FontColor->RGBColor[
      0.8926354502560807, 0.366046824615879, 0.15658862564020168`]], {-76., -160.},
     Center, Automatic], InsetBox[
    StyleBox["\<\"new\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.05],
     FontColor->RGBColor[0.5407932311309059, 0.715, 0.09762679674248334]], {149., 84.},
     Center, Automatic], InsetBox[
    StyleBox["\<\"Intentional\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.02777777777777778],
     FontColor->RGBColor[0.7277983389807635, 0.358, 0.5168487092603637]], {85., 159.},
     Center, Automatic], InsetBox[
    StyleBox["\<\"residential\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.02777777777777778],
     FontColor->RGBColor[
      0.9986489531525362, 0.7507447657626809, 0.0036478264881522893`]], {82., -162.},
     Center, Automatic], InsetBox[
    StyleBox["\<\"cities\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.03888888888888889],
     FontColor->RGBColor[0.7678998606330495, 0.7317110956258943, 0.]], {-148., 106.},
     Center, Automatic], InsetBox[
    StyleBox["\<\"gender\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.02777777777777778],
     FontColor->RGBColor[0.7175796237092107, 0.7261199581899123, 0.]], {-34., -28.},
     Center, Automatic], InsetBox[
    StyleBox["\<\"education\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.02777777777777778],
     FontColor->RGBColor[0.47929071933511125`, 0.715, 0.1759027208462221]], {-79., 164.},
     Center, Automatic], InsetBox[
    StyleBox["\<\"Book\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.03888888888888889],
     FontColor->RGBColor[
      0.16397784358994957`, 0.7038177251280403, 0.6117734123079395]], {-120., -142.},
     Center, Automatic], InsetBox[
    StyleBox["\<\"Graduate\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.02777777777777778],
     FontColor->RGBColor[
      0.9046334610863751, 0.334573307782725, 0.22977756485604156`]], {-147., -120.},
     Center, Automatic], InsetBox[
    StyleBox["\<\"Francisco\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.02777777777777778],
     FontColor->RGBColor[
      0.8781534541180211, 0.4921023027453475, 0.04333810870621905]], {-142., 126.},
     Center, Automatic], InsetBox[
    StyleBox["\<\"character\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.02777777777777778],
     FontColor->RGBColor[
      0.8342400905885153, 0.4628267270590103, 0.0038160815296638794`]], {-131., 140.},
     Center, Automatic], InsetBox[
    StyleBox["\<\"different\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.02777777777777778],
     FontColor->RGBColor[
      0.9492067688690977, 0.5394711792460651, 0.10728609198218791`]], {122., 146.},
     Center, Automatic], InsetBox[
    StyleBox["\<\"intellect\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.02777777777777778],
     FontColor->RGBColor[
      0.969373377466199, 0.6043668873309952, 0.08269188084126262]], {-121., 152.},
     Center, Automatic], InsetBox[
    StyleBox["\<\"Shiao-li\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.02777777777777778],
     FontColor->RGBColor[
      0.9107287510704583, 0.33890687339431275`, 0.20182187767614543`]], {-119., -154.},
     Center, Automatic], InsetBox[
    StyleBox["\<\"Login\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.02777777777777778],
     FontColor->RGBColor[
      0.6670481226429111, 0.3638052617916352, 0.6198796933927223]], {155., -68.},
     Center, Automatic], InsetBox[
    StyleBox["\<\"location\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.02777777777777778],
     FontColor->RGBColor[
      0.922066817647527, 0.5213778784316846, 0.08286013588277422]], {141., -137.},
     Center, Automatic], InsetBox[
    StyleBox["\<\"lectures\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.02777777777777778],
     FontColor->RGBColor[0.9307395679624266, 0.7498043964402695, 0.]], {148., 134.},
     Center, Automatic], InsetBox[
    StyleBox["\<\"Contact\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.02777777777777778],
     FontColor->RGBColor[0.8493197142977551, 0.7407577460330839, 0.]], {-116., -164.},
     Center, Automatic], InsetBox[
    StyleBox["\<\"Profiles\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.02777777777777778],
     FontColor->RGBColor[0.4177882075393331, 0.715, 0.25417864494993975`]], {151., 116.},
     Center, Automatic], InsetBox[
    StyleBox["\<\"Buenos\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.02777777777777778],
     FontColor->RGBColor[
      0.9784200278733908, 0.649600139366954, 0.058265924741844846`]], {139., -147.},
     Center, Automatic], InsetBox[
    StyleBox["\<\"science\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.02777777777777778],
     FontColor->RGBColor[
      0.2198892179497479, 0.6590886256402017, 0.6788670615396974]], {148., -108.},
     Center, Automatic], InsetBox[
    StyleBox["\<\"open\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.02777777777777778],
     FontColor->RGBColor[0.7989994773739094, 0.735166608597101, 0.]], {42., 95.},
     Center, Automatic], InsetBox[
    StyleBox["\<\"receive\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.02777777777777778],
     FontColor->RGBColor[
      0.8633598745697435, 0.40996018814538476`, 0.08339968642435877]], {-22., 166.},
     Center, Automatic], InsetBox[
    StyleBox["\<\"Lusana\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.02777777777777778],
     FontColor->RGBColor[0.5788038738141875, 0.715, 0.049249615145579635`]], {-122., 162.},
     Center, Automatic], InsetBox[
    StyleBox["\<\"Search\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.02777777777777778],
     FontColor->RGBColor[
      0.8949268664259606, 0.5032845776173072, 0.05843417978336459]], {130., 156.},
     Center, Automatic], InsetBox[
    StyleBox["\<\"Follow\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.02777777777777778],
     FontColor->RGBColor[
      0.19193353076984873`, 0.681453175384121, 0.6453202369238185]], {154., -96.},
     Center, Automatic], InsetBox[
    StyleBox["\<\"diverse\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.02777777777777778],
     FontColor->RGBColor[0.6897400905885174, 0.358, 0.5753998606330502]], {126., -162.},
     Center, Automatic], InsetBox[
    StyleBox["\<\"array\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.02777777777777778],
     FontColor->RGBColor[0.6361597700445392, 0.7170733077827265, 0.]], {-91., -28.},
     Center, Automatic], InsetBox[
    StyleBox["\<\"matter\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.02777777777777778],
     FontColor->RGBColor[0.4567336004533182, 0.4884598397280091, 0.85]], {20., 167.},
     Center, Automatic], InsetBox[
    StyleBox["\<\"Future\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.02777777777777778],
     FontColor->RGBColor[
      0.6319174318193065, 0.38429816477207124`, 0.7077064204517338]], {-153., -130.},
     Center, Automatic], InsetBox[
    StyleBox["\<\"issues\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.02777777777777778],
     FontColor->RGBColor[
      0.845266573755366, 0.437100139366951, 0.03816643438841502]], {155., -78.},
     Center, Automatic], InsetBox[
    StyleBox["\<\"series\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.02777777777777778],
     FontColor->RGBColor[0.6672593867853922, 0.7205288207539324, 0.]], {-153., -140.},
     Center, Automatic], InsetBox[
    StyleBox["\<\"Seoul\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.02777777777777778],
     FontColor->RGBColor[
      0.6453361616656581, 0.37647057236169945`, 0.6741595958358548]], {128., 166.},
     Center, Automatic], InsetBox[
    StyleBox["\<\"Letter\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.02777777777777778],
     FontColor->RGBColor[
      0.8335801463353031, 0.3487839707329394, 0.3481997561078282]], {-155., -150.},
     Center, Automatic], InsetBox[
    StyleBox["\<\"Berlin\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.02777777777777778],
     FontColor->RGBColor[0.428777913273419, 0.5052332520359486, 0.85]], {-151., -162.},
     Center, Automatic], InsetBox[
    StyleBox["\<\"based\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.02777777777777778],
     FontColor->RGBColor[
      0.9038177251280404, 0.3492734123079395, 0.18454431282010084`]], {-156., 162.},
     Center, Automatic], InsetBox[
    StyleBox["\<\"Meet\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.02777777777777778],
     FontColor->RGBColor[0.7658565873730018, 0.358, 0.4582975578876895]], {-156., 150.},
     Center, Automatic], InsetBox[
    StyleBox["\<\"Kiron\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.02777777777777778],
     FontColor->RGBColor[
      0.5750747800184488, 0.4174563783225715, 0.8498130499538777]], {158., 144.},
     Center, Automatic], InsetBox[
    StyleBox["\<\"Aires\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.02777777777777778],
     FontColor->RGBColor[
      0.6536293927965667, 0.37163285420200276`, 0.6534265180085832]], {158., -157.},
     Center, Automatic], InsetBox[
    StyleBox["\<\"need\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.02777777777777778],
     FontColor->RGBColor[
      0.8510135028964549, 0.47400900193096995`, 0.018912152606809424`]], {158., 164.},
     Center, Automatic], InsetBox[
    StyleBox["\<\"2022\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.02777777777777778],
     FontColor->RGBColor[
      0.23716678280579248`, 0.645266573755366, 0.699600139366951]], {158., -167.},
     Center, Automatic], InsetBox[
    StyleBox["\<\"2019\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.02777777777777778],
     FontColor->RGBColor[
      0.8168067340273636, 0.3521386531945273, 0.3761554432877274]], {-165., -28.},
     Center, Automatic], InsetBox[
    StyleBox["\<\"local\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.02777777777777778],
     FontColor->RGBColor[
      0.26512246998569167`, 0.6229020240114467, 0.73314696398283]], {165., 51.},
     Center, Automatic], InsetBox[
    StyleBox["\<\"offer\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.02777777777777778],
     FontColor->RGBColor[
      0.6102054708420535, 0.39696347534213544`, 0.7619863228948663]], {-167., -38.},
     Center, Automatic], InsetBox[
    StyleBox["\<\"San\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.02777777777777778],
     FontColor->RGBColor[
      0.8064401951137368, 0.3542119609772526, 0.39343300814377197`]], {87., -29.},
     Center, Automatic], InsetBox[
    StyleBox["\<\"MIT\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.02777777777777778],
     FontColor->RGBColor[0.15725938678540247`, 0.715, 0.5857607804549424]], {-170., 0.},
     Center, Automatic], InsetBox[
    StyleBox["\<\"far\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.02777777777777778],
     FontColor->RGBColor[
      0.7896667828057927, 0.3575666434388414, 0.4213886953236787]], {-32., 20.},
     Center, Automatic], InsetBox[
    StyleBox["\<\"7\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.02777777777777778],
     FontColor->RGBColor[
      0.9052934053395919, 0.510195603559728, 0.06776406480563275]], {-30., -3.},
     Center, Automatic]},
  DefaultBaseStyle->{"Graphics", FontFamily -> "Helvetica"},
  Method->{
   "DefaultBoundaryStyle" -> Automatic, "DefaultPlotStyle" -> Automatic},
  PlotRange->{{-181.5, 178.5}, {-172.5, 172.5}}]], "Output",
 CellChangeTimes->{{3.746269699682497*^9, 3.746269728385783*^9}, {
   3.7463205785882416`*^9, 3.746320600585661*^9}, 3.746429215379792*^9},
 CellLabel->"Out[61]=",ExpressionUUID->"62f4ce84-2e00-4260-8dcc-8fb96a95069d"]
}, Open  ]],

Cell["\<\
Your turn! Import the text of your favorite website and create a word cloud.\
\>", "CodeText",
 CellChangeTimes->{{3.7462699799541464`*^9, 
  3.7462700458120794`*^9}},ExpressionUUID->"503f24e5-f613-475e-8eef-\
b4a292b5dc82"],

Cell[BoxData[
 RowBox[{"(*", 
  RowBox[{"your", " ", "code", " ", "goes", " ", "here"}], "*)"}]], "Input",
 CellChangeTimes->{{3.7463182049111533`*^9, 
  3.7463182214799585`*^9}},ExpressionUUID->"81038804-d6bb-43fe-bca3-\
027adc668f3b"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Real-World Data", "Subsection",
 CellChangeTimes->{{3.7464320794371233`*^9, 
  3.7464320891097236`*^9}},ExpressionUUID->"c02beaf6-4cec-4a2f-b124-\
8d7c651f578b"],

Cell[TextData[{
 "You can import Data using the ",
 StyleBox["Import",
  FontWeight->"Bold"],
 " function we saw above in various forms, like csv files, images, and many \
more.\nIn addition, there is some data already built into the language, for \
example using the function ",
 StyleBox["ExampleData",
  FontWeight->"Bold"],
 "."
}], "Text",
 CellChangeTimes->{{3.7462696701445074`*^9, 3.7462696705544214`*^9}, {
  3.7464308551850996`*^9, 3.74643108090481*^9}, {3.746432112301144*^9, 
  3.7464321663563166`*^9}, {3.7464324390975018`*^9, 
  3.746432460109198*^9}},ExpressionUUID->"0af949de-cf4d-482d-8ca8-\
7fff7d345477"],

Cell["Create a word cloud of ", "CodeText",
 CellChangeTimes->{{3.746432472539565*^9, 
  3.7464324765576916`*^9}},ExpressionUUID->"14c07ca0-ad69-44f4-aa01-\
15244557a267"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"WordCloud", "[", 
  RowBox[{"ExampleData", "[", 
   RowBox[{"{", 
    RowBox[{"\"\<Text\>\"", ",", "\"\<AliceInWonderland\>\""}], "}"}], "]"}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.746432168000085*^9, 3.74643218646482*^9}, {
  3.7464322507730155`*^9, 3.7464323258226023`*^9}, {3.7464323596245117`*^9, 
  3.7464324214487066`*^9}},
 CellLabel->"In[88]:=",ExpressionUUID->"0c3f5c61-bee8-4cec-aafc-2da0830bc7d3"],

Cell[BoxData[
 GraphicsBox[{InsetBox[
    StyleBox["\<\"Alice\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.2713178294573643],
     FontColor->RGBColor[0.368417, 0.506779, 0.709798]], {0, 0}, Center, 
    Automatic], InsetBox[
    StyleBox["\<\"said\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.24564582704117588`],
     FontColor->RGBColor[0.880722, 0.611041, 0.142051]], {-7.5, -48.5}, 
    Center, Automatic], InsetBox[
    StyleBox["\<\"little\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.11728581496023356`],
     FontColor->RGBColor[0.560181, 0.691569, 0.194885]], {27.5, 27.5}, Center,
     Automatic], InsetBox[
    StyleBox["\<\"caterpillar\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.04933051444679351],
     FontColor->RGBColor[0.7132613816472081, 0.358, 0.5392132590042952]], {-4.5, 46.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"thought\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.058391221181918855`],
     FontColor->RGBColor[
      0.8439466852489265, 0.3467106629502147, 0.3309221912517893]], {10.5, 59.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"Queen\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.07047216349541932],
     FontColor->RGBColor[0.772079, 0.431554, 0.102387]], {-61.5, 36.5}, 
    Center, Automatic], InsetBox[
    StyleBox["\<\"Rabbit\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.07500251686298198],
     FontColor->RGBColor[0.528488, 0.470624, 0.701351]], {-44.5, 59.5}, 
    Center, Automatic], InsetBox[
    StyleBox["\<\"Duchess\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.0568811033927313],
     FontColor->RGBColor[
      0.6753413537738198, 0.3589675436319385, 0.5991466155654507]], {-0.5, 74.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"began\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.0568811033927313],
     FontColor->RGBColor[
      0.9324333565611593, 0.5282889043741062, 0.0921900209050434]], {60.5, 41.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"suddenly\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.04480016107923084],
     FontColor->RGBColor[
      0.9492067688690977, 0.5394711792460651, 0.10728609198218791`]], {-0.5, -77.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"moment\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.053860867814356186`],
     FontColor->RGBColor[
      0.16397784358994957`, 0.7038177251280403, 0.6117734123079395]], {74.5, -30.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"garden\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.04933051444679351],
     FontColor->RGBColor[0.5472001045252132, 0.43417993728487203`, 0.85]], {75.5, 24.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"large\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.06141145676029397],
     FontColor->RGBColor[
      0.9728288904374106, 0.621644452187053, 0.07336199581899142]], {55.5, 55.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"mouse\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.06745192791704419],
     FontColor->RGBColor[0.363898, 0.618501, 0.782349]], {73.5, -42.5}, 
    Center, Automatic], InsetBox[
    StyleBox["\<\"great\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.0568811033927313],
     FontColor->RGBColor[0.5407932311309059, 0.715, 0.09762679674248334]], {-82.5, 19.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"Away\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.052350750025168626`],
     FontColor->RGBColor[
      0.8878600487784333, 0.33792799024431336`, 0.2577332520359445]], {-79.5, -29.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"looking\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.04480016107923084],
     FontColor->RGBColor[
      0.596786740995709, 0.404791067752503, 0.7955331475107271]], {-0.5, 87.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"thing\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.053860867814356186`],
     FontColor->RGBColor[
      0.6184987019729621, 0.39212575718243875`, 0.7412532450675947]], {52.5, 68.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"quite\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.0568811033927313],
     FontColor->RGBColor[
      0.8857244243136628, 0.3764133635295058, 0.1393110607841571]], {64.5, -56.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"KING\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.06443169233866908],
     FontColor->RGBColor[0.915, 0.3325, 0.2125]], {-52.5, 74.5}, Center, 
    Automatic], InsetBox[
    StyleBox["\<\"please\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.04480016107923084],
     FontColor->RGBColor[
      0.3103557220216354, 0.5867154223826917, 0.7874268664259625]], {-18.5, -87.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"White\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.06141145676029397],
     FontColor->RGBColor[0.28026441037696703`, 0.715, 0.4292089322474965]], {47.5, -80.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"like\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.07953287023054466],
     FontColor->RGBColor[0.922526, 0.385626, 0.209179]], {-89.5, -0.5}, 
    Center, Automatic], InsetBox[
    StyleBox["\<\"way\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.058391221181918855`],
     FontColor->RGBColor[
      0.28240003484173815`, 0.6090799721266095, 0.7538800418100857]], {88.5, 10.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"voice\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.06141145676029397],
     FontColor->RGBColor[0.736782672705901, 0.358, 0.5030266573755369]], {41.5, 85.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"question\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.040269807711668174`],
     FontColor->RGBColor[0.15725938678540247`, 0.715, 0.5857607804549424]], {22.5, -93.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"came\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.06594181012785663],
     FontColor->RGBColor[1, 0.75, 0]], {-86.5, -44.5}, Center, Automatic], 
   InsetBox[
    StyleBox["\<\"went\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.06594181012785663],
     FontColor->RGBColor[0.647624, 0.37816, 0.614037]], {-40.5, 89.5}, Center,
     Automatic], InsetBox[
    StyleBox["\<\"looked\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.05537098560354375],
     FontColor->RGBColor[0.47401116530937026`, 0.47809330081437784`, 0.85]], {0.5, 99.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"just\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.06443169233866908],
     FontColor->RGBColor[0.571589, 0.586483, 0.]], {90.5, -7.5}, Center, 
    Automatic], InsetBox[
    StyleBox["\<\"croquet\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.03875968992248062],
     FontColor->RGBColor[0.4177882075393331, 0.715, 0.25417864494993975`]], {-52.5, -75.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"growing\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.040269807711668174`],
     FontColor->RGBColor[
      0.6670481226429111, 0.3638052617916352, 0.6198796933927223]], {-19.5, -98.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"found\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.059901338971106416`],
     FontColor->RGBColor[
      0.838355547812947, 0.44746667828057946`, 0.0208888695323676]], {-85.5, -58.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"going\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.0463102788684184],
     FontColor->RGBColor[0.428777913273419, 0.5052332520359486, 0.85]], {-56.5, -86.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"door\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.06292157454948152],
     FontColor->RGBColor[0.40082222609352647`, 0.5220066643438841, 0.85]], {-90.5, 51.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"think\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.053860867814356186`],
     FontColor->RGBColor[0.7678998606330495, 0.7317110956258943, 0.]], {40.5, 98.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"round\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.053860867814356186`],
     FontColor->RGBColor[
      0.8613800418100862, 0.48092002787339083`, 0.02824203762907758]], {78.5, -68.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"heard\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.053860867814356186`],
     FontColor->RGBColor[0.7748409210981391, 0.358, 0.4444755060028629]], {89.5, 65.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"know\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.059901338971106416`],
     FontColor->RGBColor[
      0.5833680111493557, 0.4126186601628758, 0.8290799721266107]], {-90.5, 65.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"high\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.04933051444679351],
     FontColor->RGBColor[0.9810598048862722, 0.7553955338762525, 0.]], {95.5, 36.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"getting\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.03875968992248062],
     FontColor->RGBColor[
      0.6453361616656581, 0.37647057236169945`, 0.6741595958358548]], {61.5, -93.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"hastily\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.040269807711668174`],
     FontColor->RGBColor[0.4567336004533182, 0.4884598397280091, 0.85]], {91.5, 50.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"house\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.0463102788684184],
     FontColor->RGBColor[
      0.9784200278733908, 0.649600139366954, 0.058265924741844846`]], {-41.5, 103.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"come\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.04933051444679351],
     FontColor->RGBColor[0.37977756485605163`, 0.715, 0.3025558265468435]], {79.5, 78.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"time\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.059901338971106416`],
     FontColor->RGBColor[0.8996399512215667, 0.7463488834690629, 0.]], {-87.5, -72.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"Hatter\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.04480016107923084],
     FontColor->RGBColor[
      0.8342400905885153, 0.4628267270590103, 0.0038160815296638794`]], {-57.5, -100.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"got\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.052350750025168626`],
     FontColor->RGBColor[
      0.35558897405758294`, 0.5505288207539337, 0.8417067688690995]], {-70.5, 88.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"long\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.0463102788684184],
     FontColor->RGBColor[0.7513196300394465, 0.358, 0.48066210763162087`]], {82.5, -81.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"table\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.04933051444679351],
     FontColor->RGBColor[
      0.23716678280579248`, 0.645266573755366, 0.699600139366951]], {77.5, 87.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"good\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.041779925500855734`],
     FontColor->RGBColor[0.38354466123747527`, 0.5323732032575149, 0.85]], 
    {-90.5, -15.5}, Center, Automatic], InsetBox[
    StyleBox["\<\"eyes\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.04329004329004329],
     FontColor->RGBColor[
      0.8745421494417032, 0.39318677583744527`, 0.11135537360425793`]], {95.5, -53.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"soon\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.04933051444679351],
     FontColor->RGBColor[
      0.8168067340273636, 0.3521386531945273, 0.3761554432877274]], {25.5, -102.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"head\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.05084063223598107],
     FontColor->RGBColor[
      0.9637822400302223, 0.5764112001511111, 0.0977879519184]], {73.5, 99.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"glass\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.040269807711668174`],
     FontColor->RGBColor[
      0.26512246998569167`, 0.6229020240114467, 0.73314696398283]], {-87.5, -84.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"poor\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.04329004329004329],
     FontColor->RGBColor[
      0.7896667828057927, 0.3575666434388414, 0.4213886953236787]], {-19.5, 33.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"curious\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.03875968992248062],
     FontColor->RGBColor[
      0.8633598745697435, 0.40996018814538476`, 0.08339968642435877]], {-41.5, -27.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"witness\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.040269807711668174`],
     FontColor->RGBColor[
      0.8774935098648088, 0.34000129802703827`, 0.2750108168919853]], {63.5, -103.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"say\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.04782039665760596],
     FontColor->RGBColor[
      0.9052934053395919, 0.510195603559728, 0.06776406480563275]], {-94.5, 78.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"grow\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.040269807711668174`],
     FontColor->RGBColor[
      0.922066817647527, 0.5213778784316846, 0.08286013588277422]], {-73.5, 100.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"dear\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.04933051444679351],
     FontColor->RGBColor[
      0.8564488486273256, 0.42032672705901153`, 0.06612212156831418]], {-90.5, -98.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"March\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.041779925500855734`],
     FontColor->RGBColor[0.7277983389807635, 0.358, 0.5168487092603637]], {-0.5, 110.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"cried\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.04480016107923084],
     FontColor->RGBColor[0.2187618985811806, 0.715, 0.5074848563512248]], {-5.5, -111.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"tone\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.04480016107923084],
     FontColor->RGBColor[0.6897400905885174, 0.358, 0.5753998606330502]], {-102.5, 29.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"near\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.04480016107923084],
     FontColor->RGBColor[
      0.8607200975568693, 0.34335598048862614`, 0.30296650407188447`]], {30.5, 111.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"took\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.04782039665760596],
     FontColor->RGBColor[
      0.6536293927965667, 0.37163285420200276`, 0.6534265180085832]], {-33.5, -112.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"called\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.04329004329004329],
     FontColor->RGBColor[0.47929071933511125`, 0.715, 0.1759027208462221]], {-32.5, 112.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"hearts\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.03875968992248062],
     FontColor->RGBColor[0.6672593867853922, 0.7205288207539324, 0.]], {25.5, -114.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"added\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.040269807711668174`],
     FontColor->RGBColor[
      0.845266573755366, 0.437100139366951, 0.03816643438841502]], {61.5, 110.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"POOL\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.040269807711668174`],
     FontColor->RGBColor[0.7658565873730018, 0.358, 0.4582975578876895]], {57.5, -113.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"feet\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.0463102788684184],
     FontColor->RGBColor[
      0.9038177251280404, 0.3492734123079395, 0.18454431282010084`]], {-60.5, -112.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"bottle\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.040269807711668174`],
     FontColor->RGBColor[0.9307395679624266, 0.7498043964402695, 0.]], {-63.5, 114.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"key\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.041779925500855734`],
     FontColor->RGBColor[
      0.969373377466199, 0.6043668873309952, 0.08269188084126262]], {-107.5, -27.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"hand\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.04329004329004329],
     FontColor->RGBColor[
      0.9930578157165594, 0.7227890785827968, 0.01874389756528967]], {-99.5, 87.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"low\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.04480016107923084],
     FontColor->RGBColor[0.8493197142977551, 0.7407577460330839, 0.]], {107.5, 77.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"Oh\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.05537098560354375],
     FontColor->RGBColor[
      0.9874666782805795, 0.6948333914028977, 0.033839968642435214`]], {91.5, -96.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"Dodo\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.03875968992248062],
     FontColor->RGBColor[
      0.9986489531525362, 0.7507447657626809, 0.0036478264881522893`]], {-100.5, 97.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"court\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.03875968992248062],
     FontColor->RGBColor[0.7042770479220728, 0.358, 0.5530353108891188]], {105.5, 88.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"make\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.040269807711668174`],
     FontColor->RGBColor[
      0.9840111653093676, 0.677555826546838, 0.04316985366470745]], {-87.5, -110.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"day\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.03875968992248062],
     FontColor->RGBColor[0.529922539669161, 0.44454647619850335`, 0.85]], {106.5, 19.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"face\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.041779925500855734`],
     FontColor->RGBColor[0.7175796237092107, 0.7261199581899123, 0.]], {-90.5, 108.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"birds\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.03875968992248062],
     FontColor->RGBColor[
      0.3383114092015346, 0.5643508726387724, 0.8209736910418415]], {101.5, 98.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"cook\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.03875968992248062],
     FontColor->RGBColor[
      0.9603267270590103, 0.5591336352950514, 0.10711783694067224`]], {85.5, -111.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"size\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.04329004329004329],
     FontColor->RGBColor[
      0.8781534541180211, 0.4921023027453475, 0.04333810870621905]], {107.5, -79.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"wish\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.040269807711668174`],
     FontColor->RGBColor[0.7989994773739094, 0.735166608597101, 0.]], {90.5, 110.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"Hare\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.040269807711668174`],
     FontColor->RGBColor[
      0.8926354502560807, 0.366046824615879, 0.15658862564020168`]], {-112.5, 13.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"half\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.04329004329004329],
     FontColor->RGBColor[0.5019668524892619, 0.46131988850644284`, 0.85]], {111.5, -20.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"idea\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.03875968992248062],
     FontColor->RGBColor[
      0.9107287510704583, 0.33890687339431275`, 0.20182187767614543`]], {114.5, 2.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"EAT\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.03875968992248062],
     FontColor->RGBColor[
      0.8064401951137368, 0.3542119609772526, 0.39343300814377197`]], {116.5, -7.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"tried\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.040269807711668174`],
     FontColor->RGBColor[
      0.6102054708420535, 0.39696347534213544`, 0.7619863228948663]], {112.5, -31.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"cat\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.0463102788684184],
     FontColor->RGBColor[0.6361597700445392, 0.7170733077827265, 0.]], {-115.5, -13.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"foot\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.03875968992248062],
     FontColor->RGBColor[
      0.8949268664259606, 0.5032845776173072, 0.05843417978336459]], {109.5, -42.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"cats\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.040269807711668174`],
     FontColor->RGBColor[
      0.8335801463353031, 0.3487839707329394, 0.3481997561078282]], {-117.5, 0.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"hall\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.040269807711668174`],
     FontColor->RGBColor[0.5788038738141875, 0.715, 0.049249615145579635`]], {-0.5, 120.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"arm\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.040269807711668174`],
     FontColor->RGBColor[
      0.5750747800184488, 0.4174563783225715, 0.8498130499538777]], {-6.5, -27.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"fan\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.041779925500855734`],
     FontColor->RGBColor[
      0.9046334610863751, 0.334573307782725, 0.22977756485604156`]], {118.5, 27.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"ran\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.04329004329004329],
     FontColor->RGBColor[
      0.19193353076984873`, 0.681453175384121, 0.6453202369238185]], {-0.5, -121.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"felt\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.03875968992248062],
     FontColor->RGBColor[
      0.2198892179497479, 0.6590886256402017, 0.6788670615396974]], {18.5, 120.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"tell\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.041779925500855734`],
     FontColor->RGBColor[0.31827505306025683`, 0.715, 0.3808317506505822]], {116.5, 38.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"set\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.040269807711668174`],
     FontColor->RGBColor[
      0.8510135028964549, 0.47400900193096995`, 0.018912152606809424`]], {-51.5, -15.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"bit\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.041779925500855734`],
     FontColor->RGBColor[
      0.6319174318193065, 0.38429816477207124`, 0.7077064204517338]], {-115.5, 40.5},
     Center, Automatic]},
  DefaultBaseStyle->{"Graphics", FontFamily -> "Helvetica"},
  Method->{
   "DefaultBoundaryStyle" -> Automatic, "DefaultPlotStyle" -> Automatic},
  PlotRange->{{-129., 129.}, {-128., 126.}}]], "Output",
 CellChangeTimes->{{3.746432290634241*^9, 3.746432306114518*^9}, {
  3.7464323732847605`*^9, 3.7464324255769897`*^9}},
 CellLabel->"Out[88]=",ExpressionUUID->"8e84a2e3-57a2-413e-8d3e-fc3f7c043fbf"]
}, Open  ]],

Cell["\<\
Wikipedia is also a great source of data. Of course you can do much more than \
creating word-clouds, but that\[CloseCurlyQuote]s for another time.\
\>", "Text",
 CellChangeTimes->{{3.746432826000317*^9, 
  3.746432873089082*^9}},ExpressionUUID->"3c87e218-5157-41cd-b555-\
b4596192036c"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"WordCloud", "[", 
  RowBox[{"WikipediaData", "[", "\"\<Seoul\>\"", "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.746432739732151*^9, 3.746432759779276*^9}, {
  3.7464327908485203`*^9, 3.7464328111582317`*^9}},
 CellLabel->"In[91]:=",ExpressionUUID->"794ae968-0066-430e-b352-c72f2a4ce824"],

Cell[BoxData[
 GraphicsBox[{InsetBox[
    StyleBox["\<\"Seoul\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.2621722846441948],
     FontColor->RGBColor[0.368417, 0.506779, 0.709798]], {0, 0}, Center, 
    Automatic], InsetBox[
    StyleBox["\<\"City\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.11052135750557202`],
     FontColor->RGBColor[0.880722, 0.611041, 0.142051]], {-17.5, 28.5}, 
    Center, Automatic], InsetBox[
    StyleBox["\<\"university\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.059511500195308015`],
     FontColor->RGBColor[0.40082222609352647`, 0.5220066643438841, 0.85]], {11.5, -30.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"international\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.060890144987477315`],
     FontColor->RGBColor[0.647624, 0.37816, 0.614037]], {5.5, -46.5}, Center, 
    Automatic], InsetBox[
    StyleBox["\<\"Korean\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.073297948117001],
     FontColor->RGBColor[0.528488, 0.470624, 0.701351]], {41.5, 24.5}, Center,
     Automatic], InsetBox[
    StyleBox["\<\"metropolitan\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.045725052273615036`],
     FontColor->RGBColor[
      0.16397784358994957`, 0.7038177251280403, 0.6117734123079395]], {-0.5, 47.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"Capital\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.059511500195308015`],
     FontColor->RGBColor[0.915, 0.3325, 0.2125]], {-0.5, 61.5}, Center, 
    Automatic], InsetBox[
    StyleBox["\<\"district\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.07605523770133958],
     FontColor->RGBColor[0.560181, 0.691569, 0.194885]], {-0.5, -63.5}, 
    Center, Automatic], InsetBox[
    StyleBox["\<\"largest\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.058132855403138714`],
     FontColor->RGBColor[
      0.9728288904374106, 0.621644452187053, 0.07336199581899142]], {-61.5, -30.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"population\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.045725052273615036`],
     FontColor->RGBColor[
      0.8613800418100862, 0.48092002787339083`, 0.02824203762907758]], {-14.5, 74.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"Dongdaemun\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.038831828312768546`],
     FontColor->RGBColor[
      0.8335801463353031, 0.3487839707329394, 0.3481997561078282]], {-0.5, -77.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"Gangnam\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.04434640748144574],
     FontColor->RGBColor[
      0.35558897405758294`, 0.5505288207539337, 0.8417067688690995]], {64.5, 37.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"dynasty\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.04710369706578433],
     FontColor->RGBColor[0.47401116530937026`, 0.47809330081437784`, 0.85]], {-67.5, 36.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"Korea\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.07191930332483168],
     FontColor->RGBColor[0.772079, 0.431554, 0.102387]], {51.5, 59.5}, Center,
     Automatic], InsetBox[
    StyleBox["\<\"world\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.0746765929091703],
     FontColor->RGBColor[0.922526, 0.385626, 0.209179]], {-62.5, -47.5}, 
    Center, Automatic], InsetBox[
    StyleBox["\<\"headquarters\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.03745318352059925],
     FontColor->RGBColor[0.529922539669161, 0.44454647619850335`, 0.85]], {-59.5, 56.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"government\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.038831828312768546`],
     FontColor->RGBColor[
      0.26512246998569167`, 0.6229020240114467, 0.73314696398283]], {74.5, -28.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"major\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.055375565818800127`],
     FontColor->RGBColor[0.28026441037696703`, 0.715, 0.4292089322474965]], {50.5, -58.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"companies\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.03745318352059925],
     FontColor->RGBColor[0.7042770479220728, 0.358, 0.5530353108891188]], {75.5, -38.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"located\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.052618276234461525`],
     FontColor->RGBColor[
      0.5833680111493557, 0.4126186601628758, 0.8290799721266107]], {40.5, 74.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"museum\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.051239631442292224`],
     FontColor->RGBColor[
      0.8439466852489265, 0.3467106629502147, 0.3309221912517893]], {-59.5, -61.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"South\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.0636474345718159],
     FontColor->RGBColor[0.363898, 0.618501, 0.782349]], {-0.5, 87.5}, Center,
     Automatic], InsetBox[
    StyleBox["\<\"language\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.04021047310493785],
     FontColor->RGBColor[
      0.19193353076984873`, 0.681453175384121, 0.6453202369238185]], {-0.5, -88.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"foreign\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.04434640748144574],
     FontColor->RGBColor[
      0.8878600487784333, 0.33792799024431336`, 0.2577332520359445]], {55.5, -72.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"including\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.04158911789710715],
     FontColor->RGBColor[0.2187618985811806, 0.715, 0.5074848563512248]], 
    {-56.5, -74.5}, Center, Automatic], InsetBox[
    StyleBox["\<\"buildings\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.04158911789710715],
     FontColor->RGBColor[0.6361597700445392, 0.7170733077827265, 0.]], {-67.5, 66.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"Hangang\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.038831828312768546`],
     FontColor->RGBColor[
      0.922066817647527, 0.5213778784316846, 0.08286013588277422]], {-46.5, 85.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"average\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.04021047310493785],
     FontColor->RGBColor[
      0.3103557220216354, 0.5867154223826917, 0.7874268664259625]], {44.5, -86.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"quality\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.04434640748144574],
     FontColor->RGBColor[0.7132613816472081, 0.358, 0.5392132590042952]], {40.5, 88.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"Joseon\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.052618276234461525`],
     FontColor->RGBColor[
      0.838355547812947, 0.44746667828057946`, 0.0208888695323676]], {-48.5, -87.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"downtown\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.04021047310493785],
     FontColor->RGBColor[
      0.8745421494417032, 0.39318677583744527`, 0.11135537360425793`]], {-0.5, 100.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"Yongsan\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.038831828312768546`],
     FontColor->RGBColor[
      0.6102054708420535, 0.39696347534213544`, 0.7619863228948663]], {-0.5, -99.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"Olympic\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.038831828312768546`],
     FontColor->RGBColor[
      0.9840111653093676, 0.677555826546838, 0.04316985366470745]], {92.5, -50.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"century\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.04021047310493785],
     FontColor->RGBColor[0.6897400905885174, 0.358, 0.5753998606330502]], {41.5, -98.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"Building\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.04158911789710715],
     FontColor->RGBColor[
      0.6536293927965667, 0.37163285420200276`, 0.6534265180085832]], {-48.5, 95.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"high\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.055375565818800127`],
     FontColor->RGBColor[0.736782672705901, 0.358, 0.5030266573755369]], {93.5, 51.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"National\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.04434640748144574],
     FontColor->RGBColor[
      0.9637822400302223, 0.5764112001511111, 0.0977879519184]], {-46.5, -100.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"Hyundai\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.03745318352059925],
     FontColor->RGBColor[
      0.8064401951137368, 0.3542119609772526, 0.39343300814377197`]], {48.5, 99.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"opened\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.04296776268927644],
     FontColor->RGBColor[
      0.23716678280579248`, 0.645266573755366, 0.699600139366951]], {89.5, -61.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"school\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.052618276234461525`],
     FontColor->RGBColor[0.8996399512215667, 0.7463488834690629, 0.]], {86.5, 69.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"traditional\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.04158911789710715],
     FontColor->RGBColor[0.8493197142977551, 0.7407577460330839, 0.]], {-53.5, 105.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"Airport\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.04296776268927644],
     FontColor->RGBColor[
      0.8564488486273256, 0.42032672705901153`, 0.06612212156831418]], {78.5, 85.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"Area\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.060890144987477315`],
     FontColor->RGBColor[1, 0.75, 0]], {-87.5, 78.5}, Center, Automatic], 
   InsetBox[
    StyleBox["\<\"market\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.04710369706578433],
     FontColor->RGBColor[
      0.9874666782805795, 0.6948333914028977, 0.033839968642435214`]], {87.5, -84.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"Palace\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.04848234185795364],
     FontColor->RGBColor[0.5407932311309059, 0.715, 0.09762679674248334]], {-90.5, 91.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"Subway\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.038831828312768546`],
     FontColor->RGBColor[0.7658565873730018, 0.358, 0.4582975578876895]], {-91.5, -83.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"highest\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.03745318352059925],
     FontColor->RGBColor[
      0.9986489531525362, 0.7507447657626809, 0.0036478264881522893`]], {80.5, -97.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"history\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.04021047310493785],
     FontColor->RGBColor[
      0.7896667828057927, 0.3575666434388414, 0.4213886953236787]], {87.5, 95.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"Park\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.060890144987477315`],
     FontColor->RGBColor[0.571589, 0.586483, 0.]], {-89.5, -98.5}, Center, 
    Automatic], InsetBox[
    StyleBox["\<\"Jongno\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.03745318352059925],
     FontColor->RGBColor[
      0.2198892179497479, 0.6590886256402017, 0.6788670615396974]], {76.5, -107.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"world's\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.04434640748144574],
     FontColor->RGBColor[0.37977756485605163`, 0.715, 0.3025558265468435]], {90.5, 106.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"league\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.038831828312768546`],
     FontColor->RGBColor[
      0.8926354502560807, 0.366046824615879, 0.15658862564020168`]], {-101.5, 0.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"Group\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.04021047310493785],
     FontColor->RGBColor[
      0.9930578157165594, 0.7227890785827968, 0.01874389756528967]], {-103.5, 10.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"global\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.04296776268927644],
     FontColor->RGBColor[0.9810598048862722, 0.7553955338762525, 0.]], {103.5, 0.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"Tower\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.045725052273615036`],
     FontColor->RGBColor[0.7678998606330495, 0.7317110956258943, 0.]], {-104.5, 21.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"station\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.045725052273615036`],
     FontColor->RGBColor[
      0.6184987019729621, 0.39212575718243875`, 0.7412532450675947]], {-0.5, 111.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"Various\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.04021047310493785],
     FontColor->RGBColor[0.7277983389807635, 0.358, 0.5168487092603637]], {-0.5, -112.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"Royal\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.04021047310493785],
     FontColor->RGBColor[
      0.969373377466199, 0.6043668873309952, 0.08269188084126262]], {102.5, 12.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"Chinese\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.04021047310493785],
     FontColor->RGBColor[0.47929071933511125`, 0.715, 0.1759027208462221]], {40.5, 109.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"years\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.04296776268927644],
     FontColor->RGBColor[
      0.9052934053395919, 0.510195603559728, 0.06776406480563275]], {-101.5, -19.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"center\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.045725052273615036`],
     FontColor->RGBColor[0.7748409210981391, 0.358, 0.4444755060028629]], {-105.5, -31.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"schools\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.04158911789710715],
     FontColor->RGBColor[
      0.8342400905885153, 0.4628267270590103, 0.0038160815296638794`]], {-42.5, -112.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"Incheon\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.04158911789710715],
     FontColor->RGBColor[
      0.9784200278733908, 0.649600139366954, 0.058265924741844846`]], {-40.5, 115.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"parks\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.04021047310493785],
     FontColor->RGBColor[0.38354466123747527`, 0.5323732032575149, 0.85]], {102.5, -11.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"gates\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.04021047310493785],
     FontColor->RGBColor[0.5019668524892619, 0.46131988850644284`, 0.85]], {102.5, 24.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"Hanja\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.038831828312768546`],
     FontColor->RGBColor[
      0.6670481226429111, 0.3638052617916352, 0.6198796933927223]], {-103.5, -42.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"modern\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.04021047310493785],
     FontColor->RGBColor[
      0.9046334610863751, 0.334573307782725, 0.22977756485604156`]], {39.5, -116.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"addition\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.03745318352059925],
     FontColor->RGBColor[
      0.3383114092015346, 0.5643508726387724, 0.8209736910418415]], {-100.5, -71.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"Seoul's\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.04158911789710715],
     FontColor->RGBColor[
      0.596786740995709, 0.404791067752503, 0.7955331475107271]], {57.5, 117.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"Church\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.04158911789710715],
     FontColor->RGBColor[
      0.9038177251280404, 0.3492734123079395, 0.18454431282010084`]], {-82.5, -112.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"River\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.04986098665012293],
     FontColor->RGBColor[
      0.9324333565611593, 0.5282889043741062, 0.0921900209050434]], {-102.5, 45.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"include\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.04158911789710715],
     FontColor->RGBColor[0.7513196300394465, 0.358, 0.48066210763162087`]], {-105.5, -55.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"citizens\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.038831828312768546`],
     FontColor->RGBColor[0.9307395679624266, 0.7498043964402695, 0.]], {-81.5, 115.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"large\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.04296776268927644],
     FontColor->RGBColor[
      0.8168067340273636, 0.3521386531945273, 0.3761554432877274]], {-104.5, 58.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"million\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.03745318352059925],
     FontColor->RGBColor[
      0.9107287510704583, 0.33890687339431275`, 0.20182187767614543`]], {-97.5, 102.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"built\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.04848234185795364],
     FontColor->RGBColor[
      0.6753413537738198, 0.3589675436319385, 0.5991466155654507]], {109.5, -109.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"Han\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.04986098665012293],
     FontColor->RGBColor[
      0.28240003484173815`, 0.6090799721266095, 0.7538800418100857]], {112.5, 35.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"known\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.038831828312768546`],
     FontColor->RGBColor[0.5788038738141875, 0.715, 0.049249615145579635`]], {-104.5, -9.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"home\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.04158911789710715],
     FontColor->RGBColor[0.428777913273419, 0.5052332520359486, 0.85]], {-109.5, 32.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"MALL\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.03745318352059925],
     FontColor->RGBColor[
      0.6453361616656581, 0.37647057236169945`, 0.6741595958358548]], {21.5, 120.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"Trade\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.038831828312768546`],
     FontColor->RGBColor[0.15725938678540247`, 0.715, 0.5857607804549424]], {117.5, -22.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"cities\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.04296776268927644],
     FontColor->RGBColor[0.5472001045252132, 0.43417993728487203`, 0.85]], {116.5, -35.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"urban\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.038831828312768546`],
     FontColor->RGBColor[
      0.8510135028964549, 0.47400900193096995`, 0.018912152606809424`]], {-0.5, -123.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"areas\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.038831828312768546`],
     FontColor->RGBColor[
      0.5750747800184488, 0.4174563783225715, 0.8498130499538777]], {94.5, -71.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"Lotte\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.04021047310493785],
     FontColor->RGBColor[0.7175796237092107, 0.7261199581899123, 0.]], {-7.5, 123.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"wall\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.04158911789710715],
     FontColor->RGBColor[
      0.8607200975568693, 0.34335598048862614`, 0.30296650407188447`]], {-27.5, -124.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"main\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.03745318352059925],
     FontColor->RGBColor[
      0.8949268664259606, 0.5032845776173072, 0.05843417978336459]], {-34.5, 125.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"2014\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.03745318352059925],
     FontColor->RGBColor[
      0.8774935098648088, 0.34000129802703827`, 0.2750108168919853]], {28.5, -127.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"2012\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.03745318352059925],
     FontColor->RGBColor[0.7989994773739094, 0.735166608597101, 0.]], {-52.5, -123.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"lines\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.038831828312768546`],
     FontColor->RGBColor[0.4567336004533182, 0.4884598397280091, 0.85]], {46.5, 127.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"2010\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.038831828312768546`],
     FontColor->RGBColor[
      0.845266573755366, 0.437100139366951, 0.03816643438841502]], {111.5, 80.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"Air\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.04710369706578433],
     FontColor->RGBColor[
      0.8857244243136628, 0.3764133635295058, 0.1393110607841571]], {119.5, 47.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"War\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.04021047310493785],
     FontColor->RGBColor[0.31827505306025683`, 0.715, 0.3808317506505822]], {120.5, 58.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"East\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.03745318352059925],
     FontColor->RGBColor[0.4177882075393331, 0.715, 0.25417864494993975`]], {120.5, -60.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"Bus\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.04021047310493785],
     FontColor->RGBColor[
      0.9492067688690977, 0.5394711792460651, 0.10728609198218791`]], {-117.5, 68.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"gu\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.03745318352059925],
     FontColor->RGBColor[
      0.8633598745697435, 0.40996018814538476`, 0.08339968642435877]], {-70.5, 46.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"line\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.04021047310493785],
     FontColor->RGBColor[
      0.6319174318193065, 0.38429816477207124`, 0.7077064204517338]], {123.5, -47.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"like\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.04021047310493785],
     FontColor->RGBColor[
      0.8781534541180211, 0.4921023027453475, 0.04333810870621905]], {67.5, -118.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"art\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.03745318352059925],
     FontColor->RGBColor[
      0.9603267270590103, 0.5591336352950514, 0.10711783694067224`]], {125.5, -8.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"mi\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.03745318352059925],
     FontColor->RGBColor[0.6672593867853922, 0.7205288207539324, 0.]], {-124.5, -19.5},
     Center, Automatic]},
  DefaultBaseStyle->{"Graphics", FontFamily -> "Helvetica"},
  Method->{
   "DefaultBoundaryStyle" -> Automatic, "DefaultPlotStyle" -> Automatic},
  PlotRange->{{-133., 134.}, {-133., 133.}}]], "Output",
 CellChangeTimes->{{3.746432773069934*^9, 3.746432816597843*^9}},
 CellLabel->"Out[91]=",ExpressionUUID->"26f4282e-f6d3-454b-8708-96a43bee9f71"]
}, Open  ]],

Cell["\<\
The Wolfram Language also gives you access to the \"Wolfram Knowledgebase\" \
which has data on various topics like countries, animals, movies, people, \
etc.  
Sometimes it is easier to input something like in plain English. To tell the \
Wolfram Language that you are inputting natural language, press [CTRL] + [=] \
\>", "Text",
 CellChangeTimes->{{3.746432114994198*^9, 3.7464321344702473`*^9}, {
  3.746432614097443*^9, 3.7464326337248626`*^9}, {3.7464344750844*^9, 
  3.746434481359464*^9}},ExpressionUUID->"d75ac2e5-dfa8-4522-b844-\
9f1d04a2d3b4"],

Cell["A field like this one will pop up", "CodeText",
 CellChangeTimes->{{3.746431101266151*^9, 
  3.746431108992159*^9}},ExpressionUUID->"486dd995-04bf-47da-ac29-\
ebb6edda170d"],

Cell[BoxData[
 NamespaceBox["LinguisticAssistant",
  DynamicModuleBox[{Typeset`query$$ = "", Typeset`boxes$$ = "None", 
   Typeset`allassumptions$$ = {}, Typeset`assumptions$$ = {}, 
   Typeset`open$$ = {1}, Typeset`querystate$$ = {}}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`LinguisticAssistantBoxes["", 4, Automatic, 
      Dynamic[Typeset`query$$], 
      Dynamic[Typeset`boxes$$], 
      Dynamic[Typeset`allassumptions$$], 
      Dynamic[Typeset`assumptions$$], 
      Dynamic[Typeset`open$$], 
      Dynamic[Typeset`querystate$$]], StandardForm],
    ImageSizeCache->{32., {7., 18.}},
    TrackedSymbols:>{
     Typeset`query$$, Typeset`boxes$$, Typeset`allassumptions$$, 
      Typeset`assumptions$$, Typeset`open$$, Typeset`querystate$$}],
   DynamicModuleValues:>{},
   UndoTrackedVariables:>{Typeset`open$$}],
  BaseStyle->{"Deploy"},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "Input",
 CellChangeTimes->{
  3.746431089211953*^9},ExpressionUUID->"83713868-085e-4d13-ba1d-\
4b4bbf1e1cf6"],

Cell["\<\
Enter what you want to learn about and click away to get the interpretation \
of your input\
\>", "CodeText",
 CellChangeTimes->{{3.7464311207117634`*^9, 3.746431126765592*^9}, {
  3.746431173533545*^9, 
  3.7464312081477976`*^9}},ExpressionUUID->"850d46da-9280-4751-8ea6-\
2bdd512ab092"],

Cell[BoxData[
 NamespaceBox["LinguisticAssistant",
  DynamicModuleBox[{Typeset`query$$ = "San Francisco", Typeset`boxes$$ = 
   TemplateBox[{"\"San Francisco\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"City\"", ",", 
         RowBox[{"{", 
           
           RowBox[{"\"SanFrancisco\"", ",", "\"California\"", ",", 
             "\"UnitedStates\""}], "}"}]}], "]"}], 
     "\"Entity[\\\"City\\\", {\\\"SanFrancisco\\\", \\\"California\\\", \
\\\"UnitedStates\\\"}]\"", "\"city\""}, "Entity"], 
   Typeset`allassumptions$$ = {{
    "type" -> "Clash", "word" -> "San Francisco", "template" -> 
     "Assuming \"${word}\" is ${desc1}. Use as ${desc2} instead", "count" -> 
     "8", "Values" -> {{
       "name" -> "City", "desc" -> "a city", "input" -> 
        "*C.San+Francisco-_*City-"}, {
       "name" -> "AdministrativeDivision", "desc" -> 
        "an administrative division", "input" -> 
        "*C.San+Francisco-_*AdministrativeDivision-"}, {
       "name" -> "NFLTeam", "desc" -> "an NFL team", "input" -> 
        "*C.San+Francisco-_*NFLTeam-"}, {
       "name" -> "MLBTeam", "desc" -> "an MLB team", "input" -> 
        "*C.San+Francisco-_*MLBTeam-"}, {
       "name" -> "VisualArts", "desc" -> "an artwork", "input" -> 
        "*C.San+Francisco-_*VisualArts-"}, {
       "name" -> "Movie", "desc" -> "a movie", "input" -> 
        "*C.San+Francisco-_*Movie-"}, {
       "name" -> "Periodical", "desc" -> "a periodical", "input" -> 
        "*C.San+Francisco-_*Periodical-"}, {
       "name" -> "MusicAlbum", "desc" -> "a music album", "input" -> 
        "*C.San+Francisco-_*MusicAlbum-"}}}, {
    "type" -> "SubCategory", "word" -> "San Francisco", "template" -> 
     "Assuming ${desc1}. Use ${desc2} instead", "count" -> "34", 
     "Values" -> {{
       "name" -> "{SanFrancisco, California, UnitedStates}", "desc" -> 
        "San Francisco (United States)", "input" -> 
        "*DPClash.CityE.San+Francisco-_**SanFrancisco.California.UnitedStates-\
-"}, {"name" -> "{SanFrancisco, AgusanDelSur, Philippines}", "desc" -> 
        "San Francisco (Agusan del Sur, Philippines)", "input" -> 
        "*DPClash.CityE.San+Francisco-_**SanFrancisco.AgusanDelSur.\
Philippines--"}, {
       "name" -> "{SanFrancisco2, Quezon, Philippines}", "desc" -> 
        "San Francisco (Quezon, Philippines)", "input" -> 
        "*DPClash.CityE.San+Francisco-_**SanFrancisco2.Quezon.Philippines--"},\
 {"name" -> "{SanFrancisco, Quezon, Philippines}", "desc" -> 
        "San Francisco (Quezon, Philippines)", "input" -> 
        "*DPClash.CityE.San+Francisco-_**SanFrancisco.Quezon.Philippines--"}, \
{"name" -> "{SanFrancisco, Cebu, Philippines}", "desc" -> 
        "San Francisco (Cebu, Philippines)", "input" -> 
        "*DPClash.CityE.San+Francisco-_**SanFrancisco.Cebu.Philippines--"}, {
       "name" -> "{SanFrancisco, NuevaEcija, Philippines}", "desc" -> 
        "San Francisco (Nueva Ecija, Philippines)", "input" -> 
        "*DPClash.CityE.San+Francisco-_**SanFrancisco.NuevaEcija.Philippines--\
"}, {"name" -> "{SanFrancisco, SurigaoDelNorte, Philippines}", "desc" -> 
        "San Francisco (Surigao del Norte, Philippines)", "input" -> 
        "*DPClash.CityE.San+Francisco-_**SanFrancisco.SurigaoDelNorte.\
Philippines--"}, {
       "name" -> "{SanFrancisco, SouthernLeyte, Philippines}", "desc" -> 
        "San Francisco (Southern Leyte, Philippines)", "input" -> 
        "*DPClash.CityE.San+Francisco-_**SanFrancisco.SouthernLeyte.\
Philippines--"}, {
       "name" -> "{SanFrancisco, Peten, Guatemala}", "desc" -> 
        "San Francisco (Guatemala)", "input" -> 
        "*DPClash.CityE.San+Francisco-_**SanFrancisco.Peten.Guatemala--"}, {
       "name" -> "{SanFrancisco, Heredia, CostaRica}", "desc" -> 
        "San Francisco (Heredia, Costa Rica)", "input" -> 
        "*DPClash.CityE.San+Francisco-_**SanFrancisco.Heredia.CostaRica--"}, {
       "name" -> "{SanFrancisco, Cordoba, Argentina}", "desc" -> 
        "San Francisco (Argentina)", "input" -> 
        "*DPClash.CityE.San+Francisco-_**SanFrancisco.Cordoba.Argentina--"}, {
       "name" -> "{SanFrancisco, Bohol, Philippines}", "desc" -> 
        "San Francisco (Bohol, Philippines)", "input" -> 
        "*DPClash.CityE.San+Francisco-_**SanFrancisco.Bohol.Philippines--"}, {
       "name" -> "{SanFrancisco, Pampanga, Philippines}", "desc" -> 
        "San Francisco (Pampanga, Philippines)", "input" -> 
        "*DPClash.CityE.San+Francisco-_**SanFrancisco.Pampanga.Philippines--"}\
, {"name" -> "{SanFrancisco, Atlantida, Honduras}", "desc" -> 
        "San Francisco (Atlantida, Honduras)", "input" -> 
        "*DPClash.CityE.San+Francisco-_**SanFrancisco.Atlantida.Honduras--"}, \
{"name" -> "{SanFrancisco, Legaspi, Philippines}", "desc" -> 
        "San Francisco (Legaspi, Philippines)", "input" -> 
        "*DPClash.CityE.San+Francisco-_**SanFrancisco.Legaspi.Philippines--"},\
 {"name" -> "{SanFrancisco, Antique, Philippines}", "desc" -> 
        "San Francisco (Antique, Philippines)", "input" -> 
        "*DPClash.CityE.San+Francisco-_**SanFrancisco.Antique.Philippines--"},\
 {"name" -> "{SanFrancisco, Lipa, Philippines}", "desc" -> 
        "San Francisco (Lipa, Philippines)", "input" -> 
        "*DPClash.CityE.San+Francisco-_**SanFrancisco.Lipa.Philippines--"}, {
       "name" -> "{SanFrancisco, Sorsogon, Philippines}", "desc" -> 
        "San Francisco (Sorsogon, Philippines)", "input" -> 
        "*DPClash.CityE.San+Francisco-_**SanFrancisco.Sorsogon.Philippines--"}\
, {"name" -> "{SanFrancisco, Tarlac, Philippines}", "desc" -> 
        "San Francisco (Tarlac, Philippines)", "input" -> 
        "*DPClash.CityE.San+Francisco-_**SanFrancisco.Tarlac.Philippines--"}, \
{"name" -> "{SanFrancisco, Albay, Philippines}", "desc" -> 
        "San Francisco (Albay, Philippines)", "input" -> 
        "*DPClash.CityE.San+Francisco-_**SanFrancisco.Albay.Philippines--"}, {
       "name" -> "{SanFrancisco, Antioquia, Colombia}", "desc" -> 
        "San Francisco (Antioquia, Colombia)", "input" -> 
        "*DPClash.CityE.San+Francisco-_**SanFrancisco.Antioquia.Colombia--"}, \
{"name" -> "{SanFrancisco, Putumayo, Colombia}", "desc" -> 
        "San Francisco (Putumayo, Colombia)", "input" -> 
        "*DPClash.CityE.San+Francisco-_**SanFrancisco.Putumayo.Colombia--"}, {
       "name" -> "{SanFrancisco, Cundinamarca, Colombia}", "desc" -> 
        "San Francisco (Cundinamarca, Colombia)", "input" -> 
        "*DPClash.CityE.San+Francisco-_**SanFrancisco.Cundinamarca.Colombia--\
"}, {"name" -> "{SanFrancisco, Managua, Nicaragua}", "desc" -> 
        "San Francisco (Managua, Nicaragua)", "input" -> 
        "*DPClash.CityE.San+Francisco-_**SanFrancisco.Managua.Nicaragua--"}, {
       "name" -> "{SanFrancisco, Veraguas, Panama}", "desc" -> 
        "San Francisco (Panama)", "input" -> 
        "*DPClash.CityE.San+Francisco-_**SanFrancisco.Veraguas.Panama--"}, {
       "name" -> "{SanFrancisco, FranciscoMorazan, Honduras}", "desc" -> 
        "San Francisco (Francisco Morazan, Honduras)", "input" -> 
        "*DPClash.CityE.San+Francisco-_**SanFrancisco.FranciscoMorazan.\
Honduras--"}, {
       "name" -> "{SanFrancisco, Chinandega, Nicaragua}", "desc" -> 
        "San Francisco (Chinandega, Nicaragua)", "input" -> 
        "*DPClash.CityE.San+Francisco-_**SanFrancisco.Chinandega.Nicaragua--"}\
, {"name" -> "{SanFrancisco, Choluteca, Honduras}", "desc" -> 
        "San Francisco (Choluteca, Honduras)", "input" -> 
        "*DPClash.CityE.San+Francisco-_**SanFrancisco.Choluteca.Honduras--"}, \
{"name" -> "{Aguacaliente, Cartago, CostaRica}", "desc" -> 
        "Aguacaliente (Cartago, Costa Rica)", "input" -> 
        "*DPClash.CityE.San+Francisco-_**Aguacaliente.Cartago.CostaRica--"}, {
       "name" -> "{Xonacatlan, Mexico, Mexico}", "desc" -> 
        "Xonacatlan (Mexico, Mexico)", "input" -> 
        "*DPClash.CityE.San+Francisco-_**Xonacatlan.Mexico.Mexico--"}, {
       "name" -> "{Telixtlahuaca, Oaxaca, Mexico}", "desc" -> 
        "Telixtlahuaca (Oaxaca, Mexico)", "input" -> 
        "*DPClash.CityE.San+Francisco-_**Telixtlahuaca.Oaxaca.Mexico--"}, {
       "name" -> "{Zacacalco, Mexico, Mexico}", "desc" -> 
        "Zacacalco (Mexico, Mexico)", "input" -> 
        "*DPClash.CityE.San+Francisco-_**Zacacalco.Mexico.Mexico--"}, {
       "name" -> "{Cuetzalan, Puebla, Mexico}", "desc" -> 
        "Cuetzalan (Puebla, Mexico)", "input" -> 
        "*DPClash.CityE.San+Francisco-_**Cuetzalan.Puebla.Mexico--"}, {
       "name" -> "{Atexcatzingo, Tlaxcala, Mexico}", "desc" -> 
        "Atexcatzingo (Tlaxcala, Mexico)", "input" -> 
        "*DPClash.CityE.San+Francisco-_**Atexcatzingo.Tlaxcala.Mexico--"}}}}, 
   Typeset`assumptions$$ = {}, Typeset`open$$ = {1, 2}, 
   Typeset`querystate$$ = {
   "Online" -> True, "Allowed" -> True, "mparse.jsp" -> 
    1.1368902`7.507263516374776, "Messages" -> {}}}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`LinguisticAssistantBoxes["", 4, Automatic, 
      Dynamic[Typeset`query$$], 
      Dynamic[Typeset`boxes$$], 
      Dynamic[Typeset`allassumptions$$], 
      Dynamic[Typeset`assumptions$$], 
      Dynamic[Typeset`open$$], 
      Dynamic[Typeset`querystate$$]], StandardForm],
    ImageSizeCache->{183., {9., 20.}},
    TrackedSymbols:>{
     Typeset`query$$, Typeset`boxes$$, Typeset`allassumptions$$, 
      Typeset`assumptions$$, Typeset`open$$, Typeset`querystate$$}],
   DynamicModuleValues:>{},
   UndoTrackedVariables:>{Typeset`open$$}],
  BaseStyle->{"Deploy"},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "Input",
 CellChangeTimes->{{3.7464311504576626`*^9, 3.746431171517712*^9}, {
  3.7464312105585794`*^9, 3.746431214813758*^9}, {3.746431812012594*^9, 
  3.7464318149469285`*^9}},ExpressionUUID->"77e49dea-5440-433f-ad77-\
49fd2a5c200e"],

Cell["\<\
Confirm that this is what you want or choose another option in the [...] menu\
\>", "CodeText",
 CellChangeTimes->{{3.746431239330885*^9, 
  3.7464312706764545`*^9}},ExpressionUUID->"6d77987f-2170-49b1-8c59-\
996fccbe4072"],

Cell[BoxData[
 TemplateBox[{"\"San Francisco\"",RowBox[{"Entity", "[", 
     RowBox[{"\"City\"", ",", 
       RowBox[{"{", 
         RowBox[{
          "\"SanFrancisco\"", ",", "\"California\"", ",", 
           "\"UnitedStates\""}], "}"}]}], "]"}],
   "\"Entity[\\\"City\\\", {\\\"SanFrancisco\\\", \\\"California\\\", \
\\\"UnitedStates\\\"}]\"","\"city\""},
  "Entity"]], "Input",
 CellChangeTimes->{
  3.746431112443905*^9, {3.746431820968966*^9, 
   3.7464318231623135`*^9}},ExpressionUUID->"2c771a27-8fb0-439c-bfba-\
bf0ea806abe8"],

Cell["\<\
San Francisco is an Entity of type city and you can get all kinds of \
information by following the expression with [\[OpenCurlyDoubleQuote]...\
\[CloseCurlyDoubleQuote]]
[\[OpenCurlyDoubleQuote]Properties\[CloseCurlyDoubleQuote]] will give you all \
the properties of an entity type that  you can learn about.\
\>", "Text",
 CellChangeTimes->{{3.7464313168032904`*^9, 3.746431356057204*^9}, {
  3.7464314851922436`*^9, 3.7464314923858795`*^9}, {3.746431790802081*^9, 
  3.746431793303151*^9}, {3.746431852364813*^9, 
  3.746431876240836*^9}},ExpressionUUID->"7480394c-b637-48ae-911d-\
09463a8e9643"],

Cell["Find out about the properties you can get about a city:", "CodeText",
 CellChangeTimes->{{3.7464314583886833`*^9, 3.7464315082290525`*^9}, {
  3.7464317748903446`*^9, 3.746431804733309*^9}, {3.746431879607709*^9, 
  3.7464318835291367`*^9}},ExpressionUUID->"bb067048-055a-4fd2-abd5-\
8dd0a70c7d7d"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  TemplateBox[{"\"San Francisco\"",RowBox[{"Entity", "[", 
      RowBox[{"\"City\"", ",", 
        RowBox[{"{", 
          
          RowBox[{"\"SanFrancisco\"", ",", "\"California\"", ",", 
            "\"UnitedStates\""}], "}"}]}], "]"}],
    "\"Entity[\\\"City\\\", {\\\"SanFrancisco\\\", \\\"California\\\", \
\\\"UnitedStates\\\"}]\"","\"city\""},
   "Entity"], "[", "\"\<Properties\>\"", "]"}]], "Input",
 CellChangeTimes->{{3.746431395508981*^9, 3.746431407575187*^9}, {
  3.7464318329381514`*^9, 3.7464318351065392`*^9}},
 CellLabel->"In[78]:=",ExpressionUUID->"3407915b-3ce5-4c2f-a807-8cd97a4a3789"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   TemplateBox[{"\"administrative region\"",RowBox[{"EntityProperty", "[", 
       RowBox[{"\"City\"", ",", "\"AdministrativeDivision\""}], "]"}],
     "\"EntityProperty[\\\"City\\\", \\\"AdministrativeDivision\\\"]\""},
    "EntityProperty"], ",", 
   TemplateBox[{
    "\"number of aggravated assaults\"",RowBox[{"EntityProperty", "[", 
       RowBox[{"\"City\"", ",", "\"AggravatedAssault\""}], "]"}],
     "\"EntityProperty[\\\"City\\\", \\\"AggravatedAssault\\\"]\""},
    "EntityProperty"], ",", 
   TemplateBox[{
    "\"rate of aggravated assault\"",RowBox[{"EntityProperty", "[", 
       RowBox[{"\"City\"", ",", "\"AggravatedAssaultRate\""}], "]"}],
     "\"EntityProperty[\\\"City\\\", \\\"AggravatedAssaultRate\\\"]\""},
    "EntityProperty"], ",", 
   TemplateBox[{"\"aggregate home value\"",RowBox[{"EntityProperty", "[", 
       RowBox[{"\"City\"", ",", "\"AggregateHomeValue\""}], "]"}],
     "\"EntityProperty[\\\"City\\\", \\\"AggregateHomeValue\\\"]\""},
    "EntityProperty"], ",", 
   TemplateBox[{
    "\"aggregate home value, householder 15 to 24 years\"",
     RowBox[{"EntityProperty", "[", 
       RowBox[{"\"City\"", ",", "\"AggregateHomeValue15To24\""}], "]"}],
     "\"EntityProperty[\\\"City\\\", \\\"AggregateHomeValue15To24\\\"]\""},
    "EntityProperty"], ",", 
   TemplateBox[{
    "\"aggregate home value, householder 25 to 34 years\"",
     RowBox[{"EntityProperty", "[", 
       RowBox[{"\"City\"", ",", "\"AggregateHomeValue25To34\""}], "]"}],
     "\"EntityProperty[\\\"City\\\", \\\"AggregateHomeValue25To34\\\"]\""},
    "EntityProperty"], ",", 
   TemplateBox[{
    "\"aggregate home value, householder 35 to 64 years\"",
     RowBox[{"EntityProperty", "[", 
       RowBox[{"\"City\"", ",", "\"AggregateHomeValue35To64\""}], "]"}],
     "\"EntityProperty[\\\"City\\\", \\\"AggregateHomeValue35To64\\\"]\""},
    "EntityProperty"], ",", 
   TemplateBox[{
    "\"aggregate home value, householder 65 years and over\"",
     RowBox[{"EntityProperty", "[", 
       RowBox[{"\"City\"", ",", "\"AggregateHomeValue65\""}], "]"}],
     "\"EntityProperty[\\\"City\\\", \\\"AggregateHomeValue65\\\"]\""},
    "EntityProperty"], ",", 
   TemplateBox[{
    "\"aggregate household income\"",RowBox[{"EntityProperty", "[", 
       RowBox[{"\"City\"", ",", "\"AggregateHouseholdIncome\""}], "]"}],
     "\"EntityProperty[\\\"City\\\", \\\"AggregateHouseholdIncome\\\"]\""},
    "EntityProperty"], ",", 
   TemplateBox[{"\"airport codes\"",RowBox[{"EntityProperty", "[", 
       RowBox[{"\"City\"", ",", "\"AirportCodes\""}], "]"}],
     "\"EntityProperty[\\\"City\\\", \\\"AirportCodes\\\"]\""},
    "EntityProperty"], ",", 
   TemplateBox[{"\"fuel spent in delays\"",RowBox[{"EntityProperty", "[", 
       RowBox[{"\"City\"", ",", "\"AnnualExcessFuelConsumedPerCommuter\""}], 
       "]"}],"\"EntityProperty[\\\"City\\\", \
\\\"AnnualExcessFuelConsumedPerCommuter\\\"]\""},
    "EntityProperty"], ",", 
   TemplateBox[{
    "\"total fuel spent in delays\"",RowBox[{"EntityProperty", "[", 
       RowBox[{"\"City\"", ",", "\"AnnualExcessFuelConsumedTotal\""}], "]"}],
     "\"EntityProperty[\\\"City\\\", \
\\\"AnnualExcessFuelConsumedTotal\\\"]\""},
    "EntityProperty"], ",", 
   TemplateBox[{"\"average annual delay\"",RowBox[{"EntityProperty", "[", 
       RowBox[{"\"City\"", ",", "\"AnnualHoursOfDelayPerAutoCommuter\""}], 
       "]"}],"\"EntityProperty[\\\"City\\\", \
\\\"AnnualHoursOfDelayPerAutoCommuter\\\"]\""},
    "EntityProperty"], ",", 
   TemplateBox[{"\"total annual delay\"",RowBox[{"EntityProperty", "[", 
       RowBox[{"\"City\"", ",", "\"AnnualHoursOfDelayTotal\""}], "]"}],
     "\"EntityProperty[\\\"City\\\", \\\"AnnualHoursOfDelayTotal\\\"]\""},
    "EntityProperty"], ",", 
   TemplateBox[{"\"area\"",RowBox[{"EntityProperty", "[", 
       RowBox[{"\"City\"", ",", "\"Area\""}], "]"}],
     "\"EntityProperty[\\\"City\\\", \\\"Area\\\"]\""},
    "EntityProperty"], ",", 
   TemplateBox[{"\"area code\"",RowBox[{"EntityProperty", "[", 
       RowBox[{"\"City\"", ",", "\"AreaCodes\""}], "]"}],
     "\"EntityProperty[\\\"City\\\", \\\"AreaCodes\\\"]\""},
    "EntityProperty"], ",", 
   TemplateBox[{"\"arterial street traffic\"",RowBox[{"EntityProperty", "[", 
       RowBox[{"\"City\"", ",", "\"ArterialStreetDailyVehicleMiles\""}], 
       "]"}],"\"EntityProperty[\\\"City\\\", \
\\\"ArterialStreetDailyVehicleMiles\\\"]\""},
    "EntityProperty"], ",", 
   TemplateBox[{"\"arterial street length\"",RowBox[{"EntityProperty", "[", 
       RowBox[{"\"City\"", ",", "\"ArterialStreetLaneMiles\""}], "]"}],
     "\"EntityProperty[\\\"City\\\", \\\"ArterialStreetLaneMiles\\\"]\""},
    "EntityProperty"], ",", 
   TemplateBox[{
    "\"average public transit trip distance\"",RowBox[{"EntityProperty", "[", 
       RowBox[{"\"City\"", ",", "\"AveragePublicTransitTripLength\""}], "]"}],
     "\"EntityProperty[\\\"City\\\", \
\\\"AveragePublicTransitTripLength\\\"]\""},
    "EntityProperty"], ",", 
   TemplateBox[{"\"number of burglaries\"",RowBox[{"EntityProperty", "[", 
       RowBox[{"\"City\"", ",", "\"Burglary\""}], "]"}],
     "\"EntityProperty[\\\"City\\\", \\\"Burglary\\\"]\""},
    "EntityProperty"], ",", 
   TemplateBox[{"\"rate of burglary\"",RowBox[{"EntityProperty", "[", 
       RowBox[{"\"City\"", ",", "\"BurglaryRate\""}], "]"}],
     "\"EntityProperty[\\\"City\\\", \\\"BurglaryRate\\\"]\""},
    "EntityProperty"], ",", 
   TemplateBox[{"\"city sales tax\"",RowBox[{"EntityProperty", "[", 
       RowBox[{"\"City\"", ",", "\"CitySalesTaxRate\""}], "]"}],
     "\"EntityProperty[\\\"City\\\", \\\"CitySalesTaxRate\\\"]\""},
    "EntityProperty"], ",", 
   TemplateBox[{"\"coordinates\"",RowBox[{"EntityProperty", "[", 
       RowBox[{"\"City\"", ",", "\"Coordinates\""}], "]"}],
     "\"EntityProperty[\\\"City\\\", \\\"Coordinates\\\"]\""},
    "EntityProperty"], ",", 
   TemplateBox[{"\"country\"",RowBox[{"EntityProperty", "[", 
       RowBox[{"\"City\"", ",", "\"Country\""}], "]"}],
     "\"EntityProperty[\\\"City\\\", \\\"Country\\\"]\""},
    "EntityProperty"], ",", 
   TemplateBox[{"\"county\"",RowBox[{"EntityProperty", "[", 
       RowBox[{"\"City\"", ",", "\"County\""}], "]"}],
     "\"EntityProperty[\\\"City\\\", \\\"County\\\"]\""},
    "EntityProperty"], ",", 
   TemplateBox[{"\"county sales tax\"",RowBox[{"EntityProperty", "[", 
       RowBox[{"\"City\"", ",", "\"CountySalesTaxRate\""}], "]"}],
     "\"EntityProperty[\\\"City\\\", \\\"CountySalesTaxRate\\\"]\""},
    "EntityProperty"], ",", 
   TemplateBox[{"\"total rate of crime\"",RowBox[{"EntityProperty", "[", 
       RowBox[{"\"City\"", ",", "\"CrimeRate\""}], "]"}],
     "\"EntityProperty[\\\"City\\\", \\\"CrimeRate\\\"]\""},
    "EntityProperty"], ",", 
   TemplateBox[{"\"total number of crimes\"",RowBox[{"EntityProperty", "[", 
       RowBox[{"\"City\"", ",", "\"CrimeTotal\""}], "]"}],
     "\"EntityProperty[\\\"City\\\", \\\"CrimeTotal\\\"]\""},
    "EntityProperty"], ",", 
   TemplateBox[{
    "\"average daily traffic delay\"",RowBox[{"EntityProperty", "[", 
       RowBox[{"\"City\"", ",", "\"DailyDelayMinutes\""}], "]"}],
     "\"EntityProperty[\\\"City\\\", \\\"DailyDelayMinutes\\\"]\""},
    "EntityProperty"], ",", 
   TemplateBox[{"\"elevation\"",RowBox[{"EntityProperty", "[", 
       RowBox[{"\"City\"", ",", "\"Elevation\""}], "]"}],
     "\"EntityProperty[\\\"City\\\", \\\"Elevation\\\"]\""},
    "EntityProperty"], ",", 
   TemplateBox[{"\"number of rapes\"",RowBox[{"EntityProperty", "[", 
       RowBox[{"\"City\"", ",", "\"ForcibleRape\""}], "]"}],
     "\"EntityProperty[\\\"City\\\", \\\"ForcibleRape\\\"]\""},
    "EntityProperty"], ",", 
   TemplateBox[{"\"rate of rape\"",RowBox[{"EntityProperty", "[", 
       RowBox[{"\"City\"", ",", "\"ForcibleRapeRate\""}], "]"}],
     "\"EntityProperty[\\\"City\\\", \\\"ForcibleRapeRate\\\"]\""},
    "EntityProperty"], ",", 
   TemplateBox[{"\"freeway traffic\"",RowBox[{"EntityProperty", "[", 
       RowBox[{"\"City\"", ",", "\"FreewayDailyVehicle-Miles\""}], "]"}],
     "\"EntityProperty[\\\"City\\\", \\\"FreewayDailyVehicle-Miles\\\"]\""},
    "EntityProperty"], ",", 
   TemplateBox[{"\"freeway length\"",RowBox[{"EntityProperty", "[", 
       RowBox[{"\"City\"", ",", "\"FreewayLaneMiles\""}], "]"}],
     "\"EntityProperty[\\\"City\\\", \\\"FreewayLaneMiles\\\"]\""},
    "EntityProperty"], ",", 
   TemplateBox[{"\"Gini index\"",RowBox[{"EntityProperty", "[", 
       RowBox[{"\"City\"", ",", "\"GiniIndex\""}], "]"}],
     "\"EntityProperty[\\\"City\\\", \\\"GiniIndex\\\"]\""},
    "EntityProperty"], ",", 
   TemplateBox[{"\"has polygon?\"",RowBox[{"EntityProperty", "[", 
       RowBox[{"\"City\"", ",", "\"HasPolygon\""}], "]"}],
     "\"EntityProperty[\\\"City\\\", \\\"HasPolygon\\\"]\""},
    "EntityProperty"], ",", 
   TemplateBox[{"\"FHFA home price index\"",RowBox[{"EntityProperty", "[", 
       RowBox[{"\"City\"", ",", "\"HousePriceIndex\""}], "]"}],
     "\"EntityProperty[\\\"City\\\", \\\"HousePriceIndex\\\"]\""},
    "EntityProperty"], ",", 
   TemplateBox[{
    "\"FHFA home price index annual average\"",RowBox[{"EntityProperty", "[", 
       RowBox[{"\"City\"", ",", "\"HousePriceIndexAnnualAverage\""}], "]"}],
     "\"EntityProperty[\\\"City\\\", \\\"HousePriceIndexAnnualAverage\\\"]\""},
    "EntityProperty"], ",", 
   TemplateBox[{
    "\"housing affordability index\"",RowBox[{"EntityProperty", "[", 
       RowBox[{"\"City\"", ",", "\"HousingAffordability\""}], "]"}],
     "\"EntityProperty[\\\"City\\\", \\\"HousingAffordability\\\"]\""},
    "EntityProperty"], ",", 
   TemplateBox[{"\"households\"",RowBox[{"EntityProperty", "[", 
       RowBox[{"\"City\"", ",", "\"HousingUnits\""}], "]"}],
     "\"EntityProperty[\\\"City\\\", \\\"HousingUnits\\\"]\""},
    "EntityProperty"], ",", 
   TemplateBox[{"\"number of larcenies\"",RowBox[{"EntityProperty", "[", 
       RowBox[{"\"City\"", ",", "\"LarcenyTheft\""}], "]"}],
     "\"EntityProperty[\\\"City\\\", \\\"LarcenyTheft\\\"]\""},
    "EntityProperty"], ",", 
   TemplateBox[{"\"rate of larceny\"",RowBox[{"EntityProperty", "[", 
       RowBox[{"\"City\"", ",", "\"LarcenyTheftRate\""}], "]"}],
     "\"EntityProperty[\\\"City\\\", \\\"LarcenyTheftRate\\\"]\""},
    "EntityProperty"], ",", 
   TemplateBox[{"\"latitude\"",RowBox[{"EntityProperty", "[", 
       RowBox[{"\"City\"", ",", "\"Latitude\""}], "]"}],
     "\"EntityProperty[\\\"City\\\", \\\"Latitude\\\"]\""},
    "EntityProperty"], ",", 
   TemplateBox[{"\"longitude\"",RowBox[{"EntityProperty", "[", 
       RowBox[{"\"City\"", ",", "\"Longitude\""}], "]"}],
     "\"EntityProperty[\\\"City\\\", \\\"Longitude\\\"]\""},
    "EntityProperty"], ",", 
   TemplateBox[{
    "\"total magnetic field strength\"",RowBox[{"EntityProperty", "[", 
       RowBox[{"\"City\"", ",", "\"MagneticFieldStrength\""}], "]"}],
     "\"EntityProperty[\\\"City\\\", \\\"MagneticFieldStrength\\\"]\""},
    "EntityProperty"], ",", 
   TemplateBox[{"\"median age\"",RowBox[{"EntityProperty", "[", 
       RowBox[{"\"City\"", ",", "\"MedianAge\""}], "]"}],
     "\"EntityProperty[\\\"City\\\", \\\"MedianAge\\\"]\""},
    "EntityProperty"], ",", 
   TemplateBox[{"\"median home sale price\"",RowBox[{"EntityProperty", "[", 
       RowBox[{"\"City\"", ",", "\"MedianHomeSalePrice\""}], "]"}],
     "\"EntityProperty[\\\"City\\\", \\\"MedianHomeSalePrice\\\"]\""},
    "EntityProperty"], ",", 
   TemplateBox[{"\"median home value\"",RowBox[{"EntityProperty", "[", 
       RowBox[{"\"City\"", ",", "\"MedianHomeValue\""}], "]"}],
     "\"EntityProperty[\\\"City\\\", \\\"MedianHomeValue\\\"]\""},
    "EntityProperty"], ",", 
   TemplateBox[{"\"median household income\"",RowBox[{"EntityProperty", "[", 
       RowBox[{"\"City\"", ",", "\"MedianHouseholdIncome\""}], "]"}],
     "\"EntityProperty[\\\"City\\\", \\\"MedianHouseholdIncome\\\"]\""},
    "EntityProperty"], ",", 
   TemplateBox[{
    "\"number of motor vehicle thefts\"",RowBox[{"EntityProperty", "[", 
       RowBox[{"\"City\"", ",", "\"MotorVehicleTheft\""}], "]"}],
     "\"EntityProperty[\\\"City\\\", \\\"MotorVehicleTheft\\\"]\""},
    "EntityProperty"], ",", 
   TemplateBox[{
    "\"rate of motor vehicle thefts\"",RowBox[{"EntityProperty", "[", 
       RowBox[{"\"City\"", ",", "\"MotorVehicleTheftRate\""}], "]"}],
     "\"EntityProperty[\\\"City\\\", \\\"MotorVehicleTheftRate\\\"]\""},
    "EntityProperty"], ",", 
   TemplateBox[{
    "\"incidents of murder and nonnegligent manslaughter\"",
     RowBox[{"EntityProperty", "[", 
       RowBox[{"\"City\"", ",", "\"MurderNonnegligentManslaughter\""}], "]"}],
     "\"EntityProperty[\\\"City\\\", \
\\\"MurderNonnegligentManslaughter\\\"]\""},
    "EntityProperty"], ",", 
   TemplateBox[{
    "\"rate of murder and nonnegligent manslaughter\"",
     RowBox[{"EntityProperty", "[", 
       RowBox[{"\"City\"", ",", "\"MurderNonnegligentManslaughterRate\""}], 
       "]"}],"\"EntityProperty[\\\"City\\\", \
\\\"MurderNonnegligentManslaughterRate\\\"]\""},
    "EntityProperty"], ",", 
   TemplateBox[{"\"name\"",RowBox[{"EntityProperty", "[", 
       RowBox[{"\"City\"", ",", "\"Name\""}], "]"}],
     "\"EntityProperty[\\\"City\\\", \\\"Name\\\"]\""},
    "EntityProperty"], ",", 
   TemplateBox[{
    "\"next daylight saving shift\"",RowBox[{"EntityProperty", "[", 
       RowBox[{"\"City\"", ",", "\"NextDSTShift\""}], "]"}],
     "\"EntityProperty[\\\"City\\\", \\\"NextDSTShift\\\"]\""},
    "EntityProperty"], ",", 
   TemplateBox[{"\"nicknames\"",RowBox[{"EntityProperty", "[", 
       RowBox[{"\"City\"", ",", "\"Nicknames\""}], "]"}],
     "\"EntityProperty[\\\"City\\\", \\\"Nicknames\\\"]\""},
    "EntityProperty"], ",", 
   TemplateBox[{
    "\"number of owner\[Hyphen]occupied housing units\"",
     RowBox[{"EntityProperty", "[", 
       RowBox[{"\"City\"", ",", "\"NumberOfHomes\""}], "]"}],
     "\"EntityProperty[\\\"City\\\", \\\"NumberOfHomes\\\"]\""},
    "EntityProperty"], ",", 
   TemplateBox[{
    "\"average daily peak period travelers\"",RowBox[{"EntityProperty", "[", 
       RowBox[{"\"City\"", ",", "\"PeakPeriodTravelers\""}], "]"}],
     "\"EntityProperty[\\\"City\\\", \\\"PeakPeriodTravelers\\\"]\""},
    "EntityProperty"], ",", 
   TemplateBox[{
    "\"peak period travelers per capita\"",RowBox[{"EntityProperty", "[", 
       RowBox[{"\"City\"", ",", "\"PeakPeriodTravelersPerCapita\""}], "]"}],
     "\"EntityProperty[\\\"City\\\", \\\"PeakPeriodTravelersPerCapita\\\"]\""},
    "EntityProperty"], ",", 
   TemplateBox[{
    "\"average daily peak period vehicles\"",RowBox[{"EntityProperty", "[", 
       RowBox[{"\"City\"", ",", "\"PeakPeriodVehicles\""}], "]"}],
     "\"EntityProperty[\\\"City\\\", \\\"PeakPeriodVehicles\\\"]\""},
    "EntityProperty"], ",", 
   TemplateBox[{
    "\"notable people born in city\"",RowBox[{"EntityProperty", "[", 
       RowBox[{"\"City\"", ",", "\"PeopleBornInCity\""}], "]"}],
     "\"EntityProperty[\\\"City\\\", \\\"PeopleBornInCity\\\"]\""},
    "EntityProperty"], ",", 
   TemplateBox[{
    "\"notable people who died in city\"",RowBox[{"EntityProperty", "[", 
       RowBox[{"\"City\"", ",", "\"PeopleDiedInCity\""}], "]"}],
     "\"EntityProperty[\\\"City\\\", \\\"PeopleDiedInCity\\\"]\""},
    "EntityProperty"], ",", 
   TemplateBox[{"\"per capita income\"",RowBox[{"EntityProperty", "[", 
       RowBox[{"\"City\"", ",", "\"PerCapitaIncome\""}], "]"}],
     "\"EntityProperty[\\\"City\\\", \\\"PerCapitaIncome\\\"]\""},
    "EntityProperty"], ",", 
   TemplateBox[{"\"polygon\"",RowBox[{"EntityProperty", "[", 
       RowBox[{"\"City\"", ",", "\"Polygon\""}], "]"}],
     "\"EntityProperty[\\\"City\\\", \\\"Polygon\\\"]\""},
    "EntityProperty"], ",", 
   TemplateBox[{"\"city population\"",RowBox[{"EntityProperty", "[", 
       RowBox[{"\"City\"", ",", "\"Population\""}], "]"}],
     "\"EntityProperty[\\\"City\\\", \\\"Population\\\"]\""},
    "EntityProperty"], ",", 
   TemplateBox[{
    "\"population by educational attainment\"",RowBox[{"EntityProperty", "[", 
       RowBox[{"\"City\"", ",", "\"PopulationByEducationalAttainment\""}], 
       "]"}],"\"EntityProperty[\\\"City\\\", \
\\\"PopulationByEducationalAttainment\\\"]\""},
    "EntityProperty"], ",", 
   TemplateBox[{
    "\"population by migration in previous 12 months\"",
     RowBox[{"EntityProperty", "[", 
       RowBox[{"\"City\"", ",", "\"PopulationByGeographicalMobility\""}], 
       "]"}],"\"EntityProperty[\\\"City\\\", \
\\\"PopulationByGeographicalMobility\\\"]\""},
    "EntityProperty"], ",", 
   TemplateBox[{
    "\"population by language spoken at home\"",RowBox[{"EntityProperty", "[", 
       RowBox[{"\"City\"", ",", "\"PopulationByLanguageSpokenAtHome\""}], 
       "]"}],"\"EntityProperty[\\\"City\\\", \
\\\"PopulationByLanguageSpokenAtHome\\\"]\""},
    "EntityProperty"], ",", 
   TemplateBox[{
    "\"population by marital status\"",RowBox[{"EntityProperty", "[", 
       RowBox[{"\"City\"", ",", "\"PopulationByMaritalStatus\""}], "]"}],
     "\"EntityProperty[\\\"City\\\", \\\"PopulationByMaritalStatus\\\"]\""},
    "EntityProperty"], ",", 
   TemplateBox[{
    "\"population by poverty status\"",RowBox[{"EntityProperty", "[", 
       RowBox[{"\"City\"", ",", "\"PopulationByPovertyStatus\""}], "]"}],
     "\"EntityProperty[\\\"City\\\", \\\"PopulationByPovertyStatus\\\"]\""},
    "EntityProperty"], ",", 
   TemplateBox[{
    "\"population by school enrollment\"",RowBox[{"EntityProperty", "[", 
       RowBox[{"\"City\"", ",", "\"PopulationBySchoolEnrollment\""}], "]"}],
     "\"EntityProperty[\\\"City\\\", \\\"PopulationBySchoolEnrollment\\\"]\""},
    "EntityProperty"], ",", 
   TemplateBox[{"\"population density\"",RowBox[{"EntityProperty", "[", 
       RowBox[{"\"City\"", ",", "\"PopulationDensity\""}], "]"}],
     "\"EntityProperty[\\\"City\\\", \\\"PopulationDensity\\\"]\""},
    "EntityProperty"], ",", 
   TemplateBox[{"\"position\"",RowBox[{"EntityProperty", "[", 
       RowBox[{"\"City\"", ",", "\"Position\""}], "]"}],
     "\"EntityProperty[\\\"City\\\", \\\"Position\\\"]\""},
    "EntityProperty"], ",", 
   TemplateBox[{
    "\"last daylight saving shift\"",RowBox[{"EntityProperty", "[", 
       RowBox[{"\"City\"", ",", "\"PreviousDSTShift\""}], "]"}],
     "\"EntityProperty[\\\"City\\\", \\\"PreviousDSTShift\\\"]\""},
    "EntityProperty"], ",", 
   TemplateBox[{
    "\"total rate of property crime\"",RowBox[{"EntityProperty", "[", 
       RowBox[{"\"City\"", ",", "\"PropertyCrimeRate\""}], "]"}],
     "\"EntityProperty[\\\"City\\\", \\\"PropertyCrimeRate\\\"]\""},
    "EntityProperty"], ",", 
   TemplateBox[{
    "\"total number of property crimes\"",RowBox[{"EntityProperty", "[", 
       RowBox[{"\"City\"", ",", "\"PropertyCrimeTotal\""}], "]"}],
     "\"EntityProperty[\\\"City\\\", \\\"PropertyCrimeTotal\\\"]\""},
    "EntityProperty"], ",", 
   TemplateBox[{"\"total public transit use\"",RowBox[{"EntityProperty", "[", 
       RowBox[{
        "\"City\"", ",", "\"PublicTransportationAnnualPassengerMiles\""}], 
       "]"}],"\"EntityProperty[\\\"City\\\", \
\\\"PublicTransportationAnnualPassengerMiles\\\"]\""},
    "EntityProperty"], ",", 
   TemplateBox[{
    "\"unlinked public transit trips\"",RowBox[{"EntityProperty", "[", 
       RowBox[{
        "\"City\"", ",", 
         "\"PublicTransportationAnnualUnlinkedPassengerTrips\""}], "]"}],
     "\"EntityProperty[\\\"City\\\", \
\\\"PublicTransportationAnnualUnlinkedPassengerTrips\\\"]\""},
    "EntityProperty"], ",", 
   TemplateBox[{
    "\"4 bedroom apartment fair market rent\"",RowBox[{"EntityProperty", "[", 
       RowBox[{"\"City\"", ",", "\"RentFourBedrooms\""}], "]"}],
     "\"EntityProperty[\\\"City\\\", \\\"RentFourBedrooms\\\"]\""},
    "EntityProperty"], ",", 
   TemplateBox[{
    "\"1 bedroom apartment fair market rent\"",RowBox[{"EntityProperty", "[", 
       RowBox[{"\"City\"", ",", "\"RentOneBedrooms\""}], "]"}],
     "\"EntityProperty[\\\"City\\\", \\\"RentOneBedrooms\\\"]\""},
    "EntityProperty"], ",", 
   TemplateBox[{
    "\"3 bedroom apartment fair market rent\"",RowBox[{"EntityProperty", "[", 
       RowBox[{"\"City\"", ",", "\"RentThreeBedrooms\""}], "]"}],
     "\"EntityProperty[\\\"City\\\", \\\"RentThreeBedrooms\\\"]\""},
    "EntityProperty"], ",", 
   TemplateBox[{
    "\"2 bedroom apartment fair market rent\"",RowBox[{"EntityProperty", "[", 
       RowBox[{"\"City\"", ",", "\"RentTwoBedrooms\""}], "]"}],
     "\"EntityProperty[\\\"City\\\", \\\"RentTwoBedrooms\\\"]\""},
    "EntityProperty"], ",", 
   TemplateBox[{
    "\"studio apartment fair market rent\"",RowBox[{"EntityProperty", "[", 
       RowBox[{"\"City\"", ",", "\"RentZeroBedrooms\""}], "]"}],
     "\"EntityProperty[\\\"City\\\", \\\"RentZeroBedrooms\\\"]\""},
    "EntityProperty"], ",", 
   TemplateBox[{"\"number of robberies\"",RowBox[{"EntityProperty", "[", 
       RowBox[{"\"City\"", ",", "\"Robbery\""}], "]"}],
     "\"EntityProperty[\\\"City\\\", \\\"Robbery\\\"]\""},
    "EntityProperty"], ",", 
   TemplateBox[{"\"rate of robbery\"",RowBox[{"EntityProperty", "[", 
       RowBox[{"\"City\"", ",", "\"RobberyRate\""}], "]"}],
     "\"EntityProperty[\\\"City\\\", \\\"RobberyRate\\\"]\""},
    "EntityProperty"], ",", 
   TemplateBox[{"\"daily rush hour length\"",RowBox[{"EntityProperty", "[", 
       RowBox[{"\"City\"", ",", "\"RushHours\""}], "]"}],
     "\"EntityProperty[\\\"City\\\", \\\"RushHours\\\"]\""},
    "EntityProperty"], ",", 
   TemplateBox[{"\"state sales tax\"",RowBox[{"EntityProperty", "[", 
       RowBox[{"\"City\"", ",", "\"StateSalesTaxRate\""}], "]"}],
     "\"EntityProperty[\\\"City\\\", \\\"StateSalesTaxRate\\\"]\""},
    "EntityProperty"], ",", 
   TemplateBox[{"\"time zone\"",RowBox[{"EntityProperty", "[", 
       RowBox[{"\"City\"", ",", "\"TimeZone\""}], "]"}],
     "\"EntityProperty[\\\"City\\\", \\\"TimeZone\\\"]\""},
    "EntityProperty"], ",", 
   TemplateBox[{"\"total daily traffic delay\"",RowBox[{"EntityProperty", "[", 
       RowBox[{"\"City\"", ",", "\"TotalDailyDelay\""}], "]"}],
     "\"EntityProperty[\\\"City\\\", \\\"TotalDailyDelay\\\"]\""},
    "EntityProperty"], ",", 
   TemplateBox[{"\"total sales tax rate\"",RowBox[{"EntityProperty", "[", 
       RowBox[{"\"City\"", ",", "\"TotalSalesTaxRate\""}], "]"}],
     "\"EntityProperty[\\\"City\\\", \\\"TotalSalesTaxRate\\\"]\""},
    "EntityProperty"], ",", 
   TemplateBox[{"\"average peak travel time\"",RowBox[{"EntityProperty", "[", 
       RowBox[{"\"City\"", ",", "\"TravelTimeIndex\""}], "]"}],
     "\"EntityProperty[\\\"City\\\", \\\"TravelTimeIndex\\\"]\""},
    "EntityProperty"], ",", 
   TemplateBox[{"\"unemployment rate\"",RowBox[{"EntityProperty", "[", 
       RowBox[{"\"City\"", ",", "\"UnemploymentRate\""}], "]"}],
     "\"EntityProperty[\\\"City\\\", \\\"UnemploymentRate\\\"]\""},
    "EntityProperty"], ",", 
   TemplateBox[{
    "\"unweighted sample housing units\"",RowBox[{"EntityProperty", "[", 
       RowBox[{"\"City\"", ",", "\"UnweightedSampleHousingUnits\""}], "]"}],
     "\"EntityProperty[\\\"City\\\", \\\"UnweightedSampleHousingUnits\\\"]\""},
    "EntityProperty"], ",", 
   TemplateBox[{
    "\"unweighted sample population\"",RowBox[{"EntityProperty", "[", 
       RowBox[{"\"City\"", ",", "\"UnweightedSamplePopulation\""}], "]"}],
     "\"EntityProperty[\\\"City\\\", \\\"UnweightedSamplePopulation\\\"]\""},
    "EntityProperty"], ",", 
   TemplateBox[{
    "\"total rate of violent crime\"",RowBox[{"EntityProperty", "[", 
       RowBox[{"\"City\"", ",", "\"ViolentCrimeRate\""}], "]"}],
     "\"EntityProperty[\\\"City\\\", \\\"ViolentCrimeRate\\\"]\""},
    "EntityProperty"], ",", 
   TemplateBox[{
    "\"total number of violent crimes\"",RowBox[{"EntityProperty", "[", 
       RowBox[{"\"City\"", ",", "\"ViolentCrimeTotal\""}], "]"}],
     "\"EntityProperty[\\\"City\\\", \\\"ViolentCrimeTotal\\\"]\""},
    "EntityProperty"], ",", 
   TemplateBox[{"\"ZIP codes\"",RowBox[{"EntityProperty", "[", 
       RowBox[{"\"City\"", ",", "\"ZIPCodes\""}], "]"}],
     "\"EntityProperty[\\\"City\\\", \\\"ZIPCodes\\\"]\""},
    "EntityProperty"]}], "}"}]], "Output",
 CellChangeTimes->{3.7464314110185413`*^9, 3.7464318451008673`*^9, 
  3.7464318856015215`*^9},
 CellLabel->"Out[78]=",ExpressionUUID->"6b7ac2c4-468e-41f1-87a1-a4d8bedc5c64"]
}, Open  ]],

Cell["Ouch, I hope I\[CloseCurlyQuote]m not stirring any open wounds with \
this one:", "CodeText",
 CellChangeTimes->{{3.746431980239746*^9, 
  3.7464319928615904`*^9}},ExpressionUUID->"9d501516-7449-4266-b318-\
346916552b59"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  TemplateBox[{"\"San Francisco\"",RowBox[{"Entity", "[", 
      RowBox[{"\"City\"", ",", 
        RowBox[{"{", 
          
          RowBox[{"\"SanFrancisco\"", ",", "\"California\"", ",", 
            "\"UnitedStates\""}], "}"}]}], "]"}],
    "\"Entity[\\\"City\\\", {\\\"SanFrancisco\\\", \\\"California\\\", \
\\\"UnitedStates\\\"}]\"","\"city\""},
   "Entity"], "[", "\"\<MedianHomeSalePrice\>\"", "]"}]], "Input",
 CellChangeTimes->{{3.746431680636385*^9, 3.746431760727282*^9}, {
  3.7464318904866495`*^9, 3.7464319647630477`*^9}},
 CellLabel->"In[81]:=",ExpressionUUID->"9e620a87-a3e2-4a11-bfec-eabd75a923c8"],

Cell[BoxData[
 TemplateBox[{InterpretationBox[
    TagBox[
     InterpretationBox[
     "\"769\[ThinSpace]600.00\"", 769600., AutoDelete -> True], 
     NumberForm[#, {Infinity, 2}, DigitBlock -> 3, NumberSeparator -> 
      "\[ThinSpace]"]& ], 769600., Selectable -> False],RowBox[{
     FormBox["\"$\"", TraditionalForm], "\[VeryThinSpace]"}],"US dollars",
   "\"USDollars\""},
  "QuantityPrefix"]], "Output",
 CellChangeTimes->{{3.746431730457369*^9, 3.74643176314369*^9}, {
  3.7464319162804556`*^9, 3.746431966950882*^9}},
 CellLabel->"Out[81]=",ExpressionUUID->"ba9f1b48-e113-40d3-9a1b-8fb75519a319"]
}, Open  ]],

Cell["\<\
Just imagine how powerful this kind of built-in data is if you want to \
compare different cities, countries, etc.
Not all the data is available for every city and you will run into problems, \
but it can be really useful and help you combine your own data with things \
like GDP, population size or other things you can come up with.
The Wolfram Language is great for math, but you can do some pretty cool \
Social Science or Arts and Humanities research as well. Get creative and let \
me know if you have an idea and want help working on it, \
it\[CloseCurlyQuote]s the best way for you to learn the Wolfram Language \
\>", "Text",
 CellChangeTimes->{{3.746431519621585*^9, 3.746431630380223*^9}, {
  3.7464319995032177`*^9, 3.7464320570789766`*^9}, {3.7466743113693805`*^9, 
  3.7466743800911236`*^9}},ExpressionUUID->"56896e48-8b22-4546-a8c2-\
0e65de0345cb"],

Cell["Return the population of a city of your choice:", "CodeText",
 CellChangeTimes->{{3.7464326895448484`*^9, 3.7464327214642076`*^9}, {
  3.746432884598383*^9, 
  3.7464329278392367`*^9}},ExpressionUUID->"9a5b5e21-ded0-4211-a467-\
c87a0b03c1ca"],

Cell[BoxData[
 RowBox[{"(*", 
  RowBox[{"your", " ", "code", " ", "goes", " ", "here"}], "*)"}]], "Input",
 CellChangeTimes->{{3.7464329296944*^9, 
  3.746432934675494*^9}},ExpressionUUID->"ec71bc14-97d6-48a8-85a4-\
cec2f45c92fd"],

Cell[TextData[{
 " I hope you got a little bit excited to use this new tool.\nStay tuned for \
more notebooks and help in learning aspects of the Wolfram Language that are \
most relevant/useful for the Minerva curriculum.\nIf you want to get more \
resources, you can find ",
 ButtonBox["An Elementary Introduction to the Wolfram Language",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://www.wolfram.com/language/elementary-introduction/2nd-ed/"], 
    None},
  ButtonNote->
   "https://www.wolfram.com/language/elementary-introduction/2nd-ed/"],
 " and a ",
 ButtonBox["Fast Introduction for Programmers",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["http://www.wolfram.com/language/fast-introduction-for-programmers/en/\
"], None},
  ButtonNote->
   "http://www.wolfram.com/language/fast-introduction-for-programmers/en/"],
 " online and pick what topics you want to learn about."
}], "Text",
 CellChangeTimes->{{3.746432937813511*^9, 3.7464329594089537`*^9}, {
  3.7464329898285685`*^9, 3.746433011111117*^9}, {3.7466618820617757`*^9, 
  3.7466619602111864`*^9}, {3.74666200536379*^9, 3.7466620375512953`*^9}, {
  3.7466741212275653`*^9, 3.7466742581040916`*^9}, {3.746674389401572*^9, 
  3.7466744393264265`*^9}},ExpressionUUID->"9651427c-f77f-49c8-854b-\
b147a02515d8"],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.746662014077033*^9, 
  3.746662014854134*^9}},ExpressionUUID->"56285189-70bd-41d8-a326-\
c7fe3e0fcd91"],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.746662011556038*^9, 
  3.7466620121321697`*^9}},ExpressionUUID->"899840c7-1a72-4602-ab61-\
bfef39d7530a"]
}, Open  ]]
}, Open  ]]
},
WindowSize->{1141, 781},
WindowMargins->{{Automatic, -20}, {Automatic, 6}},
WindowStatusArea->None,
FrontEndVersion->"11.3 for Microsoft Windows (64-bit) (March 6, 2018)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 198, 3, 67, "Section",ExpressionUUID->"acfe4bd9-fc63-44fd-80ef-e92470f61e5e"],
Cell[781, 27, 1291, 21, 144, "Text",ExpressionUUID->"6c5dc7f1-d768-4338-b040-dea4f05d7efd"],
Cell[CellGroupData[{
Cell[2097, 52, 287, 4, 53, "Subsection",ExpressionUUID->"d7d2f2f1-a693-41db-83c5-f0e809623ce5"],
Cell[2387, 58, 308, 7, 34, "Text",ExpressionUUID->"c79b1cfd-b3b0-4b0f-8203-2fd69fe6846a"],
Cell[CellGroupData[{
Cell[2720, 69, 253, 4, 28, "Input",ExpressionUUID->"f053157d-4eac-441d-8482-83a00dc6f4a4"],
Cell[2976, 75, 152, 2, 32, "Output",ExpressionUUID->"580e5bfa-40f5-41d6-bf2d-7ee83ebf076d"]
}, Open  ]],
Cell[CellGroupData[{
Cell[3165, 82, 204, 3, 28, "Input",ExpressionUUID->"953b7f8f-927e-4945-9300-687e31fb849c"],
Cell[3372, 87, 284, 6, 32, "Output",ExpressionUUID->"e9946f24-a127-4261-b647-e852c4716fec"]
}, Open  ]],
Cell[3671, 96, 821, 13, 78, "Text",ExpressionUUID->"90d86723-e27f-48a0-bcb7-8a9cf24d4111"],
Cell[4495, 111, 521, 14, 28, "Input",ExpressionUUID->"ff3a53a6-6f61-4f99-a3ff-e82717e97a1d"],
Cell[5019, 127, 436, 8, 34, "Text",ExpressionUUID->"d72afefb-e7a7-49b4-8074-222e99e3c96d"],
Cell[5458, 137, 239, 4, 37, "CodeText",ExpressionUUID->"420058f8-4b4d-4c51-81f1-17f27f856128"],
Cell[CellGroupData[{
Cell[5722, 145, 148, 2, 28, "Input",ExpressionUUID->"8a236c07-d540-45ce-aac4-ed8e77024593"],
Cell[5873, 149, 306, 6, 32, "Output",ExpressionUUID->"465d0ff2-d684-4419-ad1b-3eb2787329dc"]
}, Open  ]],
Cell[6194, 158, 298, 11, 37, "CodeText",ExpressionUUID->"d7159c24-5212-4f36-a2d6-a14b3f0ede1b"],
Cell[CellGroupData[{
Cell[6517, 173, 337, 6, 28, "Input",ExpressionUUID->"c5b2cb06-b814-4dcc-ab32-3d613f68cf89"],
Cell[6857, 181, 255, 4, 32, "Output",ExpressionUUID->"95adb519-58f7-44c0-adb0-4a3ea1b5f406"]
}, Open  ]],
Cell[7127, 188, 674, 11, 78, "Text",ExpressionUUID->"087d33d1-9fb7-4535-9f12-b4a8c04562a6"]
}, Open  ]],
Cell[CellGroupData[{
Cell[7838, 204, 163, 3, 53, "Subsection",ExpressionUUID->"e8ba0604-9156-4d60-b3a4-6fa1abf46e2f"],
Cell[8004, 209, 321, 6, 34, "Text",ExpressionUUID->"01fdd64d-df9d-44a3-bbf4-beaeebd2291e"],
Cell[8328, 217, 41264, 681, 158, "Input",ExpressionUUID->"4b16c51b-1b7a-44dc-b7a1-4fdf2f65643d"],
Cell[49595, 900, 1481, 23, 166, "Text",ExpressionUUID->"ee4e7589-bbd5-48ad-8e3c-568e73968146"]
}, Open  ]],
Cell[CellGroupData[{
Cell[51113, 928, 232, 4, 53, "Subsection",ExpressionUUID->"7dd81925-af04-407d-a852-172d7989a036"],
Cell[51348, 934, 978, 18, 78, "Text",ExpressionUUID->"5bdda456-e083-4629-9028-09eec4fdbb04"],
Cell[52329, 954, 1168, 22, 78, "Text",ExpressionUUID->"0ced5bda-6f97-48bf-bdd9-98fc8d150891"],
Cell[53500, 978, 303, 7, 34, "Text",ExpressionUUID->"68d620ff-96aa-4b0b-b6d2-b7d97e00b67c"],
Cell[53806, 987, 279, 6, 34, "Text",ExpressionUUID->"d32750fb-133c-4fa7-a9a6-d91c217b0a36"]
}, Open  ]],
Cell[CellGroupData[{
Cell[54122, 998, 301, 4, 53, "Subsection",ExpressionUUID->"ee891427-3bf7-402f-bbaa-85766c3d1e8c"],
Cell[54426, 1004, 287, 6, 34, "Text",ExpressionUUID->"fb6482a8-d7e6-476a-b6dd-58a814c7ee94"],
Cell[CellGroupData[{
Cell[54738, 1014, 204, 3, 28, "Input",ExpressionUUID->"fc9f35d1-225f-4929-bc7d-6be98fbfdaf5"],
Cell[54945, 1019, 183, 3, 32, "Output",ExpressionUUID->"494a6cf7-0e17-4429-baaf-714b220e53d0"]
}, Open  ]],
Cell[55143, 1025, 300, 6, 34, "Text",ExpressionUUID->"191ba1e7-39a9-4cef-82c2-015584ca7b1b"],
Cell[55446, 1033, 214, 4, 28, "Input",ExpressionUUID->"e1cffe7b-7164-4a06-bcc0-4e39bc9070dd"],
Cell[55663, 1039, 252, 4, 34, "Text",ExpressionUUID->"cf21eba0-c639-4245-baf7-0e485943e48c"],
Cell[CellGroupData[{
Cell[55940, 1047, 206, 3, 28, "Input",ExpressionUUID->"d16bb627-762f-45ad-b4c5-8a080af534c2"],
Cell[56149, 1052, 183, 3, 32, "Output",ExpressionUUID->"ffea9302-2576-42e7-b31a-cdfb5ed86b5f"]
}, Open  ]],
Cell[56347, 1058, 295, 9, 37, "CodeText",ExpressionUUID->"dad43f90-b9b3-48a6-ba17-4d89f90969dd"],
Cell[56645, 1069, 208, 3, 28, "Input",ExpressionUUID->"19b2f6b2-f046-4a20-afdf-7ddd7e78e827"],
Cell[56856, 1074, 521, 9, 78, "Text",ExpressionUUID->"44785c11-4eb8-425e-a91f-d874f014caf6"],
Cell[57380, 1085, 469, 13, 37, "CodeText",ExpressionUUID->"ea0f07e2-a5cc-45e4-99c0-4ac777569316"],
Cell[57852, 1100, 383, 8, 28, "Input",ExpressionUUID->"f3ebe83d-02f6-4c62-a48f-0370c3bddce1"],
Cell[58238, 1110, 240, 6, 56, "Text",ExpressionUUID->"a9d0c8f7-e4b9-48d2-82f6-58e9f9966f47"],
Cell[CellGroupData[{
Cell[58503, 1120, 203, 3, 28, "Input",ExpressionUUID->"18355ec9-7050-4c10-9bda-6474f400368e"],
Cell[58709, 1125, 175, 2, 32, "Output",ExpressionUUID->"6075508e-b93f-425d-aff7-1076a832d526"]
}, Open  ]],
Cell[58899, 1130, 181, 3, 34, "Text",ExpressionUUID->"68289f76-623d-48f3-8744-eb7f830bf16a"],
Cell[CellGroupData[{
Cell[59105, 1137, 218, 4, 28, "Input",ExpressionUUID->"14cbc9a4-1be1-4a45-b548-270fbdc7be66"],
Cell[59326, 1143, 227, 4, 32, "Output",ExpressionUUID->"47559d9a-66ec-4b6a-bd7f-cd71b3ecad58"]
}, Open  ]],
Cell[59568, 1150, 396, 9, 34, "Text",ExpressionUUID->"9807928a-3226-4da8-ac6c-d805f476d64c"],
Cell[CellGroupData[{
Cell[59989, 1163, 309, 7, 28, "Input",ExpressionUUID->"90f39cc3-3b41-4143-adce-115eb671a2b6"],
Cell[60301, 1172, 292, 6, 32, "Output",ExpressionUUID->"e7f10fbf-b4bc-4165-8467-51d0819baf9d"]
}, Open  ]],
Cell[60608, 1181, 362, 8, 34, "Text",ExpressionUUID->"25a10c99-a87f-438b-b423-e3d9961e0603"]
}, Open  ]],
Cell[CellGroupData[{
Cell[61007, 1194, 256, 4, 53, "Subsection",ExpressionUUID->"28b614ea-5feb-403b-8447-0d9e9e3f3b84"],
Cell[61266, 1200, 574, 11, 34, "Text",ExpressionUUID->"646a22de-1f33-46b3-883f-7fa695e67715"],
Cell[61843, 1213, 494, 11, 37, "CodeText",ExpressionUUID->"9e0a8177-68f6-49e3-bf27-d8920ea69c4a"],
Cell[CellGroupData[{
Cell[62362, 1228, 693, 14, 28, "Input",ExpressionUUID->"440e88a1-3027-4b78-a3b8-e21016f35da8"],
Cell[63058, 1244, 837, 18, 32, "Output",ExpressionUUID->"85e8f871-c94e-4c1f-bea6-b32b2d546fac"]
}, Open  ]],
Cell[63910, 1265, 534, 10, 56, "Text",ExpressionUUID->"98b622a7-7ed4-482c-a6ca-c06f04b1bddf"],
Cell[CellGroupData[{
Cell[64469, 1279, 525, 12, 28, "Input",ExpressionUUID->"ccc9c3f2-f4cb-4cb2-a17b-9b14d9d3bf3d"],
Cell[64997, 1293, 493, 13, 99, "Output",ExpressionUUID->"4456d63d-b324-47cd-8c3b-65fff203a6ee"]
}, Open  ]],
Cell[65505, 1309, 427, 8, 78, "Text",ExpressionUUID->"00538afd-a0a2-4875-aceb-6065d6393de9"],
Cell[65935, 1319, 599, 14, 105, "Input",ExpressionUUID->"f7d56da2-3d17-466a-af8c-9fc11eeedef4"],
Cell[66537, 1335, 267, 6, 34, "Text",ExpressionUUID->"9a5d4bf9-fc74-4468-b92e-f777a12f28f0"],
Cell[66807, 1343, 382, 12, 37, "CodeText",ExpressionUUID->"d03fab90-fad1-4c91-8e73-c08b4a1bbd1c"],
Cell[CellGroupData[{
Cell[67214, 1359, 359, 7, 28, "Input",ExpressionUUID->"c9a0964b-8f9c-47f3-8177-0efc48927d51"],
Cell[67576, 1368, 364, 7, 32, "Output",ExpressionUUID->"46ea6d0e-ad73-46f7-a565-4b165faffb97"]
}, Open  ]],
Cell[67955, 1378, 183, 3, 37, "CodeText",ExpressionUUID->"2031cefd-f0fa-46f6-b674-8af6feb908e6"],
Cell[CellGroupData[{
Cell[68163, 1385, 474, 11, 28, "Input",ExpressionUUID->"b7b86169-bbf4-4768-bd10-080016c5550f"],
Cell[68640, 1398, 223, 3, 32, "Output",ExpressionUUID->"12932706-b54c-4eee-88ad-db4c50bef11c"]
}, Open  ]],
Cell[68878, 1404, 162, 3, 37, "CodeText",ExpressionUUID->"77b7b1d5-76d2-430f-8c73-d7e4c23997c7"],
Cell[CellGroupData[{
Cell[69065, 1411, 215, 3, 28, "Input",ExpressionUUID->"4ef9ffbc-07b8-4679-9ee8-feb6fa678295"],
Cell[69283, 1416, 363, 7, 32, "Output",ExpressionUUID->"c49eb196-5a16-44b2-bc93-b34404ecb37b"]
}, Open  ]],
Cell[69661, 1426, 339, 7, 37, "CodeText",ExpressionUUID->"9acf6c40-337d-417b-845a-aedbc04cae61"],
Cell[CellGroupData[{
Cell[70025, 1437, 453, 9, 28, "Input",ExpressionUUID->"077e19a7-b634-4a37-b93a-470cf76671c6"],
Cell[70481, 1448, 2843, 75, 135, "Output",ExpressionUUID->"bf0a4c1a-1a96-4593-872e-c68d2bb1130b"]
}, Open  ]],
Cell[73339, 1526, 363, 8, 34, "Text",ExpressionUUID->"c260e2e2-a811-481e-9d86-fc18026ceb69"]
}, Open  ]],
Cell[CellGroupData[{
Cell[73739, 1539, 162, 3, 53, "Subsection",ExpressionUUID->"413925a7-b3b2-45f5-95d0-e3355ae31b91"],
Cell[73904, 1544, 565, 10, 34, "Text",ExpressionUUID->"396017c3-3c0f-4e67-ad41-898e806cdad8"],
Cell[CellGroupData[{
Cell[74494, 1558, 167, 3, 44, "Subsubsection",ExpressionUUID->"4c3ebc83-0fad-4dad-9b3d-eb42e0f87231"],
Cell[74664, 1563, 402, 12, 56, "Text",ExpressionUUID->"ef332a4f-d387-4d95-a1d4-17070400cae9"],
Cell[75069, 1577, 211, 7, 37, "CodeText",ExpressionUUID->"e523783a-ee26-4f09-a67d-263a67e3aa82"],
Cell[CellGroupData[{
Cell[75305, 1588, 215, 3, 28, "Input",ExpressionUUID->"50b562e3-850d-4b34-87b7-77c7af147404"],
Cell[75523, 1593, 9908, 280, 234, "Output",ExpressionUUID->"03b216f0-ab80-467b-aa5c-8d88a42e28b5"]
}, Open  ]],
Cell[85446, 1876, 210, 7, 37, "CodeText",ExpressionUUID->"f173b1b9-eab5-4098-8edd-f6cd571298cf"],
Cell[CellGroupData[{
Cell[85681, 1887, 217, 3, 28, "Input",ExpressionUUID->"5eb64ab3-82a3-411c-a824-cd55d2e70f7b"],
Cell[85901, 1892, 24182, 551, 377, "Output",ExpressionUUID->"9fdeb65b-706f-481b-b302-92548cfceede"]
}, Open  ]],
Cell[110098, 2446, 219, 7, 37, "CodeText",ExpressionUUID->"86b57736-290e-43b4-87d7-8ff134680c45"],
Cell[CellGroupData[{
Cell[110342, 2457, 221, 3, 28, "Input",ExpressionUUID->"7f2eae89-bebd-4f23-ba0c-d798afd02df1"],
Cell[110566, 2462, 1667, 34, 56, "Output",ExpressionUUID->"9fa261e4-9919-43c3-b555-03e512be8553"]
}, Open  ]],
Cell[112248, 2499, 446, 14, 37, "CodeText",ExpressionUUID->"a628df8a-cd63-47c7-aabb-39a04bc6146f"],
Cell[CellGroupData[{
Cell[112719, 2517, 213, 3, 28, "Input",ExpressionUUID->"05153145-08e3-42a7-a5f0-aae75116aeff"],
Cell[112935, 2522, 452, 18, 184, "Output",ExpressionUUID->"da6288e2-72e4-4b4e-9ecd-6ecdf0c8761e"]
}, Open  ]],
Cell[113402, 2543, 210, 4, 37, "CodeText",ExpressionUUID->"fb7de189-4466-460b-be79-d06e4a10ff73"],
Cell[113615, 2549, 261, 5, 28, "Input",ExpressionUUID->"848b2c42-6cbd-4da7-afa7-ed965622f01a"],
Cell[113879, 2556, 207, 3, 37, "CodeText",ExpressionUUID->"deccc495-f0a9-4528-8c0a-9a3162ea7f98"],
Cell[114089, 2561, 234, 5, 28, "Input",ExpressionUUID->"e208c602-1ea8-469f-b4db-bb5f0a07074c"]
}, Open  ]],
Cell[CellGroupData[{
Cell[114360, 2571, 174, 3, 44, "Subsubsection",ExpressionUUID->"048f5e93-563c-45c2-a2c9-3c4b03c2c269"],
Cell[114537, 2576, 336, 8, 78, "Text",ExpressionUUID->"18d3ad72-6543-4d5b-9262-1eb6cde6ac9d"],
Cell[114876, 2586, 211, 4, 37, "CodeText",ExpressionUUID->"a863b29e-5836-4a20-9628-0e28d6b43f4b"],
Cell[115090, 2592, 408, 10, 28, "Input",ExpressionUUID->"8f55a5a2-cd2c-473e-b862-5239577ec1f9"],
Cell[115501, 2604, 180, 3, 37, "CodeText",ExpressionUUID->"dff31419-0f50-4478-9714-8ec852062ec2"],
Cell[CellGroupData[{
Cell[115706, 2611, 553, 13, 28, "Input",ExpressionUUID->"bc22a21a-7df8-4766-a34d-cbf9c2aa6842"],
Cell[116262, 2626, 7431, 140, 251, "Output",ExpressionUUID->"95a55d84-a090-4371-82df-29372dcb8471"]
}, Open  ]],
Cell[123708, 2769, 865, 18, 100, "Text",ExpressionUUID->"08b93728-b7a0-42be-883b-534ca7df6f78"],
Cell[CellGroupData[{
Cell[124598, 2791, 648, 17, 28, "Input",ExpressionUUID->"a93da361-1708-46f5-9d9c-13203685cfb4"],
Cell[125249, 2810, 132362, 2164, 292, "Output",ExpressionUUID->"af856d45-9a65-4e4c-943a-f5242d299291"]
}, Open  ]],
Cell[257626, 4977, 302, 8, 34, "Text",ExpressionUUID->"b74f630b-3f00-4072-9c77-b5b03bc1bbdd"],
Cell[257931, 4987, 236, 5, 28, "Input",ExpressionUUID->"6ad89f37-2fac-4b75-a956-afe027e865ea"],
Cell[258170, 4994, 371, 7, 56, "Text",ExpressionUUID->"3af70925-6cad-4bac-a305-cb1460c4c41e"],
Cell[258544, 5003, 531, 14, 57, "CodeText",ExpressionUUID->"67f001a1-1f71-4e86-bc26-292a8f6c8935"],
Cell[CellGroupData[{
Cell[259100, 5021, 686, 17, 28, "Input",ExpressionUUID->"01efd967-e1af-413d-8060-8f884fb42049"],
Cell[259789, 5040, 2014, 42, 339, "Output",ExpressionUUID->"2e40a9fb-aba2-4b14-9014-46ab4809309b"]
}, Open  ]],
Cell[261818, 5085, 451, 9, 56, "Text",ExpressionUUID->"b7f152d0-9fad-4895-a4c5-5e1ffafcd079"]
}, Open  ]],
Cell[CellGroupData[{
Cell[262306, 5099, 182, 3, 44, "Subsubsection",ExpressionUUID->"eb150b79-b01e-4dff-9528-47f70dac4b33"],
Cell[262491, 5104, 465, 8, 56, "Text",ExpressionUUID->"2da6a16a-a467-4436-9435-40a2c653a822"],
Cell[262959, 5114, 454, 12, 37, "CodeText",ExpressionUUID->"69ce081a-2b4a-4df3-8d94-343cd7928539"],
Cell[CellGroupData[{
Cell[263438, 5130, 323, 6, 28, "Input",ExpressionUUID->"33a77cc9-4f49-43a1-9654-8177c00719b4"],
Cell[263764, 5138, 23814, 563, 362, "Output",ExpressionUUID->"62f4ce84-2e00-4260-8dcc-8fb96a95069d"]
}, Open  ]],
Cell[287593, 5704, 234, 5, 37, "CodeText",ExpressionUUID->"503f24e5-f613-475e-8eef-b4a292b5dc82"],
Cell[287830, 5711, 236, 5, 28, "Input",ExpressionUUID->"81038804-d6bb-43fe-bca3-027adc668f3b"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[288115, 5722, 167, 3, 53, "Subsection",ExpressionUUID->"c02beaf6-4cec-4a2f-b124-8d7c651f578b"],
Cell[288285, 5727, 623, 15, 56, "Text",ExpressionUUID->"0af949de-cf4d-482d-8ca8-7fff7d345477"],
Cell[288911, 5744, 171, 3, 37, "CodeText",ExpressionUUID->"14c07ca0-ad69-44f4-aa01-15244557a267"],
Cell[CellGroupData[{
Cell[289107, 5751, 437, 9, 28, "Input",ExpressionUUID->"0c3f5c61-bee8-4cec-aafc-2da0830bc7d3"],
Cell[289547, 5762, 23822, 563, 371, "Output",ExpressionUUID->"8e84a2e3-57a2-413e-8d3e-fc3f7c043fbf"]
}, Open  ]],
Cell[313384, 6328, 297, 6, 34, "Text",ExpressionUUID->"3c87e218-5157-41cd-b555-b4596192036c"],
Cell[CellGroupData[{
Cell[313706, 6338, 312, 5, 28, "Input",ExpressionUUID->"794ae968-0066-430e-b352-c72f2a4ce824"],
Cell[314021, 6345, 23926, 562, 376, "Output",ExpressionUUID->"26f4282e-f6d3-454b-8708-96a43bee9f71"]
}, Open  ]],
Cell[337962, 6910, 564, 10, 56, "Text",ExpressionUUID->"d75ac2e5-dfa8-4522-b844-9f1d04a2d3b4"],
Cell[338529, 6922, 179, 3, 37, "CodeText",ExpressionUUID->"486dd995-04bf-47da-ac29-ebb6edda170d"],
Cell[338711, 6927, 1037, 25, 40, "Input",ExpressionUUID->"83713868-085e-4d13-ba1d-4b4bbf1e1cf6"],
Cell[339751, 6954, 298, 7, 37, "CodeText",ExpressionUUID->"850d46da-9280-4751-8ea6-2bdd512ab092"],
Cell[340052, 6963, 9803, 167, 44, "Input",ExpressionUUID->"77e49dea-5440-433f-ad77-49fd2a5c200e"],
Cell[349858, 7132, 233, 5, 37, "CodeText",ExpressionUUID->"6d77987f-2170-49b1-8c59-996fccbe4072"],
Cell[350094, 7139, 537, 13, 43, "Input",ExpressionUUID->"2c771a27-8fb0-439c-bfba-bf0ea806abe8"],
Cell[350634, 7154, 610, 11, 56, "Text",ExpressionUUID->"7480394c-b637-48ae-911d-09463a8e9643"],
Cell[351247, 7167, 304, 4, 37, "CodeText",ExpressionUUID->"bb067048-055a-4fd2-abd5-8dd0a70c7d7d"],
Cell[CellGroupData[{
Cell[351576, 7175, 632, 13, 43, "Input",ExpressionUUID->"3407915b-3ce5-4c2f-a807-8cd97a4a3789"],
Cell[352211, 7190, 24245, 459, 677, "Output",ExpressionUUID->"6b7ac2c4-468e-41f1-87a1-a4d8bedc5c64"]
}, Open  ]],
Cell[376471, 7652, 227, 4, 37, "CodeText",ExpressionUUID->"9d501516-7449-4266-b318-346916552b59"],
Cell[CellGroupData[{
Cell[376723, 7660, 641, 13, 43, "Input",ExpressionUUID->"9e620a87-a3e2-4a11-bfec-eabd75a923c8"],
Cell[377367, 7675, 606, 12, 42, "Output",ExpressionUUID->"ba9f1b48-e113-40d3-9a1b-8fb75519a319"]
}, Open  ]],
Cell[377988, 7690, 873, 14, 122, "Text",ExpressionUUID->"56896e48-8b22-4546-a8c2-0e65de0345cb"],
Cell[378864, 7706, 248, 4, 37, "CodeText",ExpressionUUID->"9a5b5e21-ded0-4211-a467-c87a0b03c1ca"],
Cell[379115, 7712, 230, 5, 28, "Input",ExpressionUUID->"ec71bc14-97d6-48a8-85a4-cec2f45c92fd"],
Cell[379348, 7719, 1293, 27, 100, "Text",ExpressionUUID->"9651427c-f77f-49c8-854b-b147a02515d8"],
Cell[380644, 7748, 152, 3, 28, "Input",ExpressionUUID->"56285189-70bd-41d8-a326-c7fe3e0fcd91"],
Cell[380799, 7753, 154, 3, 28, "Input",ExpressionUUID->"899840c7-1a72-4602-ab61-bfef39d7530a"]
}, Open  ]]
}, Open  ]]
}
]
*)

